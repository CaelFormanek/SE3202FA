/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use client";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import dxPivotGrid from "devextreme/ui/pivot_grid";
import * as PropTypes from "prop-types";
import { Component as BaseComponent } from "./core/component";
import NestedOption from "./core/nested-option";
var PivotGrid = /** @class */ (function (_super) {
    __extends(PivotGrid, _super);
    function PivotGrid() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._WidgetClass = dxPivotGrid;
        _this.independentEvents = ["onCellClick", "onCellPrepared", "onContentReady", "onContextMenuPreparing", "onDisposing", "onExporting", "onInitialized"];
        _this._expectedChildren = {
            export: { optionName: "export", isCollectionItem: false },
            fieldChooser: { optionName: "fieldChooser", isCollectionItem: false },
            fieldPanel: { optionName: "fieldPanel", isCollectionItem: false },
            headerFilter: { optionName: "headerFilter", isCollectionItem: false },
            loadPanel: { optionName: "loadPanel", isCollectionItem: false },
            pivotGridTexts: { optionName: "texts", isCollectionItem: false },
            scrolling: { optionName: "scrolling", isCollectionItem: false },
            stateStoring: { optionName: "stateStoring", isCollectionItem: false },
            texts: { optionName: "texts", isCollectionItem: false }
        };
        return _this;
    }
    Object.defineProperty(PivotGrid.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    return PivotGrid;
}(BaseComponent));
PivotGrid.propTypes = {
    allowExpandAll: PropTypes.bool,
    allowFiltering: PropTypes.bool,
    allowSorting: PropTypes.bool,
    allowSortingBySummary: PropTypes.bool,
    dataFieldArea: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "column",
            "row"
        ])
    ]),
    disabled: PropTypes.bool,
    elementAttr: PropTypes.object,
    encodeHtml: PropTypes.bool,
    export: PropTypes.object,
    fieldChooser: PropTypes.object,
    fieldPanel: PropTypes.object,
    headerFilter: PropTypes.object,
    height: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ]),
    hideEmptySummaryCells: PropTypes.bool,
    hint: PropTypes.string,
    loadPanel: PropTypes.object,
    onCellClick: PropTypes.func,
    onCellPrepared: PropTypes.func,
    onContentReady: PropTypes.func,
    onContextMenuPreparing: PropTypes.func,
    onDisposing: PropTypes.func,
    onExporting: PropTypes.func,
    onInitialized: PropTypes.func,
    onOptionChanged: PropTypes.func,
    rowHeaderLayout: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "standard",
            "tree"
        ])
    ]),
    rtlEnabled: PropTypes.bool,
    scrolling: PropTypes.object,
    showBorders: PropTypes.bool,
    showColumnGrandTotals: PropTypes.bool,
    showColumnTotals: PropTypes.bool,
    showRowGrandTotals: PropTypes.bool,
    showRowTotals: PropTypes.bool,
    showTotalsPrior: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "both",
            "columns",
            "none",
            "rows"
        ])
    ]),
    stateStoring: PropTypes.object,
    tabIndex: PropTypes.number,
    texts: PropTypes.object,
    visible: PropTypes.bool,
    width: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ]),
    wordWrapEnabled: PropTypes.bool
};
var Export = /** @class */ (function (_super) {
    __extends(Export, _super);
    function Export() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Export.OptionName = "export";
    return Export;
}(NestedOption));
var FieldChooser = /** @class */ (function (_super) {
    __extends(FieldChooser, _super);
    function FieldChooser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FieldChooser.OptionName = "fieldChooser";
    FieldChooser.ExpectedChildren = {
        fieldChooserTexts: { optionName: "texts", isCollectionItem: false },
        texts: { optionName: "texts", isCollectionItem: false }
    };
    return FieldChooser;
}(NestedOption));
var FieldChooserTexts = /** @class */ (function (_super) {
    __extends(FieldChooserTexts, _super);
    function FieldChooserTexts() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FieldChooserTexts.OptionName = "texts";
    return FieldChooserTexts;
}(NestedOption));
var FieldPanel = /** @class */ (function (_super) {
    __extends(FieldPanel, _super);
    function FieldPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FieldPanel.OptionName = "fieldPanel";
    FieldPanel.ExpectedChildren = {
        fieldPanelTexts: { optionName: "texts", isCollectionItem: false },
        texts: { optionName: "texts", isCollectionItem: false }
    };
    return FieldPanel;
}(NestedOption));
var FieldPanelTexts = /** @class */ (function (_super) {
    __extends(FieldPanelTexts, _super);
    function FieldPanelTexts() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FieldPanelTexts.OptionName = "texts";
    return FieldPanelTexts;
}(NestedOption));
var HeaderFilter = /** @class */ (function (_super) {
    __extends(HeaderFilter, _super);
    function HeaderFilter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HeaderFilter.OptionName = "headerFilter";
    HeaderFilter.ExpectedChildren = {
        headerFilterTexts: { optionName: "texts", isCollectionItem: false },
        search: { optionName: "search", isCollectionItem: false },
        texts: { optionName: "texts", isCollectionItem: false }
    };
    return HeaderFilter;
}(NestedOption));
var HeaderFilterTexts = /** @class */ (function (_super) {
    __extends(HeaderFilterTexts, _super);
    function HeaderFilterTexts() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HeaderFilterTexts.OptionName = "texts";
    return HeaderFilterTexts;
}(NestedOption));
var LoadPanel = /** @class */ (function (_super) {
    __extends(LoadPanel, _super);
    function LoadPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LoadPanel.OptionName = "loadPanel";
    return LoadPanel;
}(NestedOption));
var PivotGridTexts = /** @class */ (function (_super) {
    __extends(PivotGridTexts, _super);
    function PivotGridTexts() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PivotGridTexts.OptionName = "texts";
    return PivotGridTexts;
}(NestedOption));
var Scrolling = /** @class */ (function (_super) {
    __extends(Scrolling, _super);
    function Scrolling() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Scrolling.OptionName = "scrolling";
    return Scrolling;
}(NestedOption));
var Search = /** @class */ (function (_super) {
    __extends(Search, _super);
    function Search() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Search.OptionName = "search";
    return Search;
}(NestedOption));
var StateStoring = /** @class */ (function (_super) {
    __extends(StateStoring, _super);
    function StateStoring() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StateStoring.OptionName = "stateStoring";
    return StateStoring;
}(NestedOption));
var Texts = /** @class */ (function (_super) {
    __extends(Texts, _super);
    function Texts() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Texts.OptionName = "texts";
    return Texts;
}(NestedOption));
export default PivotGrid;
export { PivotGrid, Export, FieldChooser, FieldChooserTexts, FieldPanel, FieldPanelTexts, HeaderFilter, HeaderFilterTexts, LoadPanel, PivotGridTexts, Scrolling, Search, StateStoring, Texts };
