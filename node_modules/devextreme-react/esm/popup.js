/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use client";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import dxPopup from "devextreme/ui/popup";
import * as PropTypes from "prop-types";
import { Component as BaseComponent } from "./core/component";
import NestedOption from "./core/nested-option";
var Popup = /** @class */ (function (_super) {
    __extends(Popup, _super);
    function Popup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._WidgetClass = dxPopup;
        _this.isPortalComponent = true;
        _this.subscribableOptions = ["height", "position", "visible", "width"];
        _this.independentEvents = ["onContentReady", "onDisposing", "onHidden", "onHiding", "onInitialized", "onResize", "onResizeEnd", "onResizeStart", "onShowing", "onShown", "onTitleRendered"];
        _this._defaults = {
            defaultHeight: "height",
            defaultPosition: "position",
            defaultVisible: "visible",
            defaultWidth: "width"
        };
        _this._expectedChildren = {
            animation: { optionName: "animation", isCollectionItem: false },
            position: { optionName: "position", isCollectionItem: false },
            toolbarItem: { optionName: "toolbarItems", isCollectionItem: true }
        };
        _this._templateProps = [{
                tmplOption: "contentTemplate",
                render: "contentRender",
                component: "contentComponent",
                keyFn: "contentKeyFn"
            }, {
                tmplOption: "titleTemplate",
                render: "titleRender",
                component: "titleComponent",
                keyFn: "titleKeyFn"
            }];
        return _this;
    }
    Object.defineProperty(Popup.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    return Popup;
}(BaseComponent));
Popup.propTypes = {
    accessKey: PropTypes.string,
    animation: PropTypes.object,
    closeOnOutsideClick: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.func
    ]),
    copyRootClassesToWrapper: PropTypes.bool,
    deferRendering: PropTypes.bool,
    disabled: PropTypes.bool,
    dragEnabled: PropTypes.bool,
    dragOutsideBoundary: PropTypes.bool,
    enableBodyScroll: PropTypes.bool,
    focusStateEnabled: PropTypes.bool,
    fullScreen: PropTypes.bool,
    height: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ]),
    hideOnOutsideClick: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.func
    ]),
    hideOnParentScroll: PropTypes.bool,
    hint: PropTypes.string,
    hoverStateEnabled: PropTypes.bool,
    maxHeight: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ]),
    maxWidth: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ]),
    minHeight: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ]),
    minWidth: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ]),
    onContentReady: PropTypes.func,
    onDisposing: PropTypes.func,
    onHidden: PropTypes.func,
    onHiding: PropTypes.func,
    onInitialized: PropTypes.func,
    onOptionChanged: PropTypes.func,
    onResize: PropTypes.func,
    onResizeEnd: PropTypes.func,
    onResizeStart: PropTypes.func,
    onShowing: PropTypes.func,
    onShown: PropTypes.func,
    onTitleRendered: PropTypes.func,
    position: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.object,
        PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.oneOf([
                "bottom",
                "center",
                "left",
                "left bottom",
                "left top",
                "right",
                "right bottom",
                "right top",
                "top"
            ])
        ])
    ]),
    resizeEnabled: PropTypes.bool,
    restorePosition: PropTypes.bool,
    rtlEnabled: PropTypes.bool,
    shading: PropTypes.bool,
    shadingColor: PropTypes.string,
    showCloseButton: PropTypes.bool,
    showTitle: PropTypes.bool,
    tabIndex: PropTypes.number,
    title: PropTypes.string,
    toolbarItems: PropTypes.array,
    visible: PropTypes.bool,
    width: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ])
};
var Animation = /** @class */ (function (_super) {
    __extends(Animation, _super);
    function Animation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Animation.OptionName = "animation";
    Animation.ExpectedChildren = {
        hide: { optionName: "hide", isCollectionItem: false },
        show: { optionName: "show", isCollectionItem: false }
    };
    return Animation;
}(NestedOption));
var At = /** @class */ (function (_super) {
    __extends(At, _super);
    function At() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    At.OptionName = "at";
    return At;
}(NestedOption));
var BoundaryOffset = /** @class */ (function (_super) {
    __extends(BoundaryOffset, _super);
    function BoundaryOffset() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BoundaryOffset.OptionName = "boundaryOffset";
    return BoundaryOffset;
}(NestedOption));
var Collision = /** @class */ (function (_super) {
    __extends(Collision, _super);
    function Collision() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Collision.OptionName = "collision";
    return Collision;
}(NestedOption));
var From = /** @class */ (function (_super) {
    __extends(From, _super);
    function From() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    From.OptionName = "from";
    From.ExpectedChildren = {
        position: { optionName: "position", isCollectionItem: false }
    };
    return From;
}(NestedOption));
var Hide = /** @class */ (function (_super) {
    __extends(Hide, _super);
    function Hide() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Hide.OptionName = "hide";
    Hide.ExpectedChildren = {
        from: { optionName: "from", isCollectionItem: false },
        to: { optionName: "to", isCollectionItem: false }
    };
    return Hide;
}(NestedOption));
var My = /** @class */ (function (_super) {
    __extends(My, _super);
    function My() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    My.OptionName = "my";
    return My;
}(NestedOption));
var Offset = /** @class */ (function (_super) {
    __extends(Offset, _super);
    function Offset() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Offset.OptionName = "offset";
    return Offset;
}(NestedOption));
var Position = /** @class */ (function (_super) {
    __extends(Position, _super);
    function Position() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Position.OptionName = "position";
    return Position;
}(NestedOption));
var Show = /** @class */ (function (_super) {
    __extends(Show, _super);
    function Show() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Show.OptionName = "show";
    return Show;
}(NestedOption));
var To = /** @class */ (function (_super) {
    __extends(To, _super);
    function To() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    To.OptionName = "to";
    return To;
}(NestedOption));
var ToolbarItem = /** @class */ (function (_super) {
    __extends(ToolbarItem, _super);
    function ToolbarItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToolbarItem.OptionName = "toolbarItems";
    ToolbarItem.IsCollectionItem = true;
    ToolbarItem.TemplateProps = [{
            tmplOption: "menuItemTemplate",
            render: "menuItemRender",
            component: "menuItemComponent",
            keyFn: "menuItemKeyFn"
        }, {
            tmplOption: "template",
            render: "render",
            component: "component",
            keyFn: "keyFn"
        }];
    return ToolbarItem;
}(NestedOption));
export default Popup;
export { Popup, Animation, At, BoundaryOffset, Collision, From, Hide, My, Offset, Position, Show, To, ToolbarItem };
