/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use client";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import dxList from "devextreme/ui/list";
import * as PropTypes from "prop-types";
import { Component as BaseComponent } from "./core/component";
import NestedOption from "./core/nested-option";
var List = /** @class */ (function (_super) {
    __extends(List, _super);
    function List() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._WidgetClass = dxList;
        _this.subscribableOptions = ["items", "selectedItemKeys", "selectedItems"];
        _this.independentEvents = ["onContentReady", "onDisposing", "onGroupRendered", "onInitialized", "onItemClick", "onItemContextMenu", "onItemDeleted", "onItemDeleting", "onItemHold", "onItemRendered", "onItemReordered", "onItemSwipe", "onPageLoading", "onPullRefresh", "onScroll", "onSelectAllValueChanged"];
        _this._defaults = {
            defaultItems: "items",
            defaultSelectedItemKeys: "selectedItemKeys",
            defaultSelectedItems: "selectedItems"
        };
        _this._expectedChildren = {
            item: { optionName: "items", isCollectionItem: true },
            itemDragging: { optionName: "itemDragging", isCollectionItem: false },
            menuItem: { optionName: "menuItems", isCollectionItem: true },
            searchEditorOptions: { optionName: "searchEditorOptions", isCollectionItem: false }
        };
        _this._templateProps = [{
                tmplOption: "groupTemplate",
                render: "groupRender",
                component: "groupComponent",
                keyFn: "groupKeyFn"
            }, {
                tmplOption: "itemTemplate",
                render: "itemRender",
                component: "itemComponent",
                keyFn: "itemKeyFn"
            }];
        return _this;
    }
    Object.defineProperty(List.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    return List;
}(BaseComponent));
List.propTypes = {
    accessKey: PropTypes.string,
    activeStateEnabled: PropTypes.bool,
    allowItemDeleting: PropTypes.bool,
    bounceEnabled: PropTypes.bool,
    collapsibleGroups: PropTypes.bool,
    disabled: PropTypes.bool,
    displayExpr: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.string
    ]),
    elementAttr: PropTypes.object,
    focusStateEnabled: PropTypes.bool,
    grouped: PropTypes.bool,
    height: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ]),
    hint: PropTypes.string,
    hoverStateEnabled: PropTypes.bool,
    indicateLoading: PropTypes.bool,
    itemDeleteMode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "context",
            "slideButton",
            "slideItem",
            "static",
            "swipe",
            "toggle"
        ])
    ]),
    itemDragging: PropTypes.object,
    itemHoldTimeout: PropTypes.number,
    items: PropTypes.array,
    keyExpr: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.string
    ]),
    menuItems: PropTypes.array,
    menuMode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "context",
            "slide"
        ])
    ]),
    nextButtonText: PropTypes.string,
    noDataText: PropTypes.string,
    onContentReady: PropTypes.func,
    onDisposing: PropTypes.func,
    onGroupRendered: PropTypes.func,
    onInitialized: PropTypes.func,
    onItemClick: PropTypes.func,
    onItemContextMenu: PropTypes.func,
    onItemDeleted: PropTypes.func,
    onItemDeleting: PropTypes.func,
    onItemHold: PropTypes.func,
    onItemRendered: PropTypes.func,
    onItemReordered: PropTypes.func,
    onItemSwipe: PropTypes.func,
    onOptionChanged: PropTypes.func,
    onPageLoading: PropTypes.func,
    onPullRefresh: PropTypes.func,
    onScroll: PropTypes.func,
    onSelectAllValueChanged: PropTypes.func,
    onSelectionChanged: PropTypes.func,
    pageLoadingText: PropTypes.string,
    pageLoadMode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "nextButton",
            "scrollBottom"
        ])
    ]),
    pulledDownText: PropTypes.string,
    pullingDownText: PropTypes.string,
    pullRefreshEnabled: PropTypes.bool,
    refreshingText: PropTypes.string,
    repaintChangesOnly: PropTypes.bool,
    rtlEnabled: PropTypes.bool,
    scrollByContent: PropTypes.bool,
    scrollByThumb: PropTypes.bool,
    scrollingEnabled: PropTypes.bool,
    searchEditorOptions: PropTypes.object,
    searchEnabled: PropTypes.bool,
    searchExpr: PropTypes.oneOfType([
        PropTypes.array,
        PropTypes.func,
        PropTypes.string
    ]),
    searchMode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "contains",
            "startswith",
            "equals"
        ])
    ]),
    searchTimeout: PropTypes.number,
    searchValue: PropTypes.string,
    selectAllMode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "allPages",
            "page"
        ])
    ]),
    selectAllText: PropTypes.string,
    selectByClick: PropTypes.bool,
    selectedItemKeys: PropTypes.array,
    selectedItems: PropTypes.array,
    selectionMode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "single",
            "multiple",
            "all",
            "none"
        ])
    ]),
    showScrollbar: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "always",
            "never",
            "onHover",
            "onScroll"
        ])
    ]),
    showSelectionControls: PropTypes.bool,
    tabIndex: PropTypes.number,
    useNativeScrolling: PropTypes.bool,
    visible: PropTypes.bool,
    width: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ])
};
var Button = /** @class */ (function (_super) {
    __extends(Button, _super);
    function Button() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Button.OptionName = "buttons";
    Button.IsCollectionItem = true;
    Button.ExpectedChildren = {
        options: { optionName: "options", isCollectionItem: false }
    };
    return Button;
}(NestedOption));
var CursorOffset = /** @class */ (function (_super) {
    __extends(CursorOffset, _super);
    function CursorOffset() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CursorOffset.OptionName = "cursorOffset";
    return CursorOffset;
}(NestedOption));
var Item = /** @class */ (function (_super) {
    __extends(Item, _super);
    function Item() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Item.OptionName = "items";
    Item.IsCollectionItem = true;
    Item.TemplateProps = [{
            tmplOption: "template",
            render: "render",
            component: "component",
            keyFn: "keyFn"
        }];
    return Item;
}(NestedOption));
var ItemDragging = /** @class */ (function (_super) {
    __extends(ItemDragging, _super);
    function ItemDragging() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ItemDragging.OptionName = "itemDragging";
    ItemDragging.ExpectedChildren = {
        cursorOffset: { optionName: "cursorOffset", isCollectionItem: false }
    };
    ItemDragging.TemplateProps = [{
            tmplOption: "dragTemplate",
            render: "dragRender",
            component: "dragComponent",
            keyFn: "dragKeyFn"
        }];
    return ItemDragging;
}(NestedOption));
var MenuItem = /** @class */ (function (_super) {
    __extends(MenuItem, _super);
    function MenuItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MenuItem.OptionName = "menuItems";
    MenuItem.IsCollectionItem = true;
    return MenuItem;
}(NestedOption));
var Options = /** @class */ (function (_super) {
    __extends(Options, _super);
    function Options() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Options.OptionName = "options";
    Options.TemplateProps = [{
            tmplOption: "template",
            render: "render",
            component: "component",
            keyFn: "keyFn"
        }];
    return Options;
}(NestedOption));
var SearchEditorOptions = /** @class */ (function (_super) {
    __extends(SearchEditorOptions, _super);
    function SearchEditorOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SearchEditorOptions.OptionName = "searchEditorOptions";
    SearchEditorOptions.DefaultsProps = {
        defaultValue: "value"
    };
    SearchEditorOptions.ExpectedChildren = {
        button: { optionName: "buttons", isCollectionItem: true }
    };
    return SearchEditorOptions;
}(NestedOption));
export default List;
export { List, Button, CursorOffset, Item, ItemDragging, MenuItem, Options, SearchEditorOptions };
