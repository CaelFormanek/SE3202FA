/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use client";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import dxSparkline from "devextreme/viz/sparkline";
import * as PropTypes from "prop-types";
import { Component as BaseComponent } from "./core/component";
import NestedOption from "./core/nested-option";
var Sparkline = /** @class */ (function (_super) {
    __extends(Sparkline, _super);
    function Sparkline() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._WidgetClass = dxSparkline;
        _this.independentEvents = ["onDisposing", "onDrawn", "onExported", "onExporting", "onFileSaving", "onIncidentOccurred", "onInitialized", "onTooltipHidden", "onTooltipShown"];
        _this._expectedChildren = {
            margin: { optionName: "margin", isCollectionItem: false },
            size: { optionName: "size", isCollectionItem: false },
            tooltip: { optionName: "tooltip", isCollectionItem: false }
        };
        return _this;
    }
    Object.defineProperty(Sparkline.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    return Sparkline;
}(BaseComponent));
Sparkline.propTypes = {
    argumentField: PropTypes.string,
    barNegativeColor: PropTypes.string,
    barPositiveColor: PropTypes.string,
    disabled: PropTypes.bool,
    elementAttr: PropTypes.object,
    firstLastColor: PropTypes.string,
    ignoreEmptyPoints: PropTypes.bool,
    lineColor: PropTypes.string,
    lineWidth: PropTypes.number,
    lossColor: PropTypes.string,
    margin: PropTypes.object,
    maxColor: PropTypes.string,
    maxValue: PropTypes.number,
    minColor: PropTypes.string,
    minValue: PropTypes.number,
    onDisposing: PropTypes.func,
    onDrawn: PropTypes.func,
    onExported: PropTypes.func,
    onExporting: PropTypes.func,
    onFileSaving: PropTypes.func,
    onIncidentOccurred: PropTypes.func,
    onInitialized: PropTypes.func,
    onOptionChanged: PropTypes.func,
    onTooltipHidden: PropTypes.func,
    onTooltipShown: PropTypes.func,
    pathModified: PropTypes.bool,
    pointColor: PropTypes.string,
    pointSize: PropTypes.number,
    pointSymbol: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "circle",
            "cross",
            "polygon",
            "square",
            "triangle",
            "triangleDown",
            "triangleUp"
        ])
    ]),
    rtlEnabled: PropTypes.bool,
    showFirstLast: PropTypes.bool,
    showMinMax: PropTypes.bool,
    size: PropTypes.object,
    theme: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "generic.dark",
            "generic.light",
            "generic.contrast",
            "generic.carmine",
            "generic.darkmoon",
            "generic.darkviolet",
            "generic.greenmist",
            "generic.softblue",
            "material.blue.light",
            "material.lime.light",
            "material.orange.light",
            "material.purple.light",
            "material.teal.light"
        ])
    ]),
    tooltip: PropTypes.object,
    type: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "area",
            "bar",
            "line",
            "spline",
            "splinearea",
            "steparea",
            "stepline",
            "winloss"
        ])
    ]),
    valueField: PropTypes.string,
    winColor: PropTypes.string,
    winlossThreshold: PropTypes.number
};
var Border = /** @class */ (function (_super) {
    __extends(Border, _super);
    function Border() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Border.OptionName = "border";
    return Border;
}(NestedOption));
var Font = /** @class */ (function (_super) {
    __extends(Font, _super);
    function Font() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Font.OptionName = "font";
    return Font;
}(NestedOption));
var Format = /** @class */ (function (_super) {
    __extends(Format, _super);
    function Format() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Format.OptionName = "format";
    return Format;
}(NestedOption));
var Margin = /** @class */ (function (_super) {
    __extends(Margin, _super);
    function Margin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Margin.OptionName = "margin";
    return Margin;
}(NestedOption));
var Shadow = /** @class */ (function (_super) {
    __extends(Shadow, _super);
    function Shadow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Shadow.OptionName = "shadow";
    return Shadow;
}(NestedOption));
var Size = /** @class */ (function (_super) {
    __extends(Size, _super);
    function Size() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Size.OptionName = "size";
    return Size;
}(NestedOption));
var Tooltip = /** @class */ (function (_super) {
    __extends(Tooltip, _super);
    function Tooltip() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Tooltip.OptionName = "tooltip";
    Tooltip.ExpectedChildren = {
        border: { optionName: "border", isCollectionItem: false },
        font: { optionName: "font", isCollectionItem: false },
        format: { optionName: "format", isCollectionItem: false },
        shadow: { optionName: "shadow", isCollectionItem: false }
    };
    Tooltip.TemplateProps = [{
            tmplOption: "contentTemplate",
            render: "contentRender",
            component: "contentComponent",
            keyFn: "contentKeyFn"
        }];
    return Tooltip;
}(NestedOption));
export default Sparkline;
export { Sparkline, Border, Font, Format, Margin, Shadow, Size, Tooltip };
