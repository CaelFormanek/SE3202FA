/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
/* eslint-disable no-restricted-globals */
import { getChanges } from './configuration/comparer';
import { buildConfig, findValue, ValueType } from './configuration/tree';
import { mergeNameParts, shallowEquals } from './configuration/utils';
import { capitalizeFirstLetter } from './helpers';
var optionsManagers = new Set();
var guardTimeoutHandler = -1;
var innerGuardTimeoutHandler = -1;
export function unscheduleGuards() {
    clearTimeout(guardTimeoutHandler);
    clearTimeout(innerGuardTimeoutHandler);
}
export function scheduleGuards() {
    unscheduleGuards();
    guardTimeoutHandler = window.setTimeout(function () {
        innerGuardTimeoutHandler = window.setTimeout(function () {
            optionsManagers.forEach(function (optionManager) { return optionManager.execGuards(); });
        });
    });
}
var OptionsManager = /** @class */ (function () {
    function OptionsManager() {
        this.guards = {};
        this.isUpdating = false;
        optionsManagers.add(this);
        this.onOptionChanged = this.onOptionChanged.bind(this);
        this.wrapOptionValue = this.wrapOptionValue.bind(this);
    }
    OptionsManager.prototype.setInstance = function (instance, config, subscribableOptions, independentEvents) {
        this.instance = instance;
        this.currentConfig = config;
        this.subscribableOptions = new Set(subscribableOptions);
        this.independentEvents = new Set(independentEvents);
    };
    OptionsManager.prototype.getInitialOptions = function (rootNode) {
        var _this = this;
        var config = buildConfig(rootNode, false);
        var options = {};
        Object.keys(config.options).forEach(function (key) {
            options[key] = _this.wrapOptionValue(key, config.options[key]);
        });
        return options;
    };
    OptionsManager.prototype.getTemplateOptions = function (rootNode) {
        var config = buildConfig(rootNode, false);
        return config.templates;
    };
    OptionsManager.prototype.update = function (config, dxtemplates) {
        var _this = this;
        var changedOptions = [];
        var optionChangedHandler = function (_a) {
            var value = _a.value, fullName = _a.fullName;
            changedOptions.push([fullName, value]);
        };
        this.instance.on('optionChanged', optionChangedHandler);
        var changes = getChanges(config, this.currentConfig);
        if (!changes.options && !changes.templates && !changes.removedOptions.length) {
            return;
        }
        this.instance.beginUpdate();
        this.isUpdating = true;
        changes.removedOptions.forEach(function (optionName) {
            _this.resetOption(optionName);
        });
        if (Object.keys(dxtemplates).length > 0) {
            this.setValue('integrationOptions', {
                templates: dxtemplates,
            });
        }
        Object.keys(changes.options).forEach(function (key) {
            _this.setValue(key, changes.options[key]);
        });
        this.isUpdating = false;
        this.instance.off('optionChanged', optionChangedHandler);
        this.currentConfig = config;
        changedOptions.forEach(function (_a) {
            var _b = __read(_a, 2), name = _b[0], value = _b[1];
            var currentPropValue = config.options[name];
            if (Object.prototype.hasOwnProperty.call(config.options, name)
                && currentPropValue !== value) {
                _this.setValue(name, currentPropValue);
            }
        });
        this.instance.endUpdate();
    };
    OptionsManager.prototype.onOptionChanged = function (e) {
        var _this = this;
        var _a;
        if (this.isUpdating) {
            return;
        }
        var valueDescriptor = findValue(this.currentConfig, e.fullName.split('.'));
        if (!valueDescriptor || valueDescriptor.value !== e.value) {
            this.callOptionChangeHandler(e.fullName, e.value);
        }
        valueDescriptor = findValue(this.currentConfig, e.fullName.split('.'));
        if (!valueDescriptor) {
            return;
        }
        var value = valueDescriptor.value, type = valueDescriptor.type;
        if (value instanceof Array && type === ValueType.Array) {
            for (var i = 0; i < value.length; i += 1) {
                if (value[i] !== ((_a = e.value) === null || _a === void 0 ? void 0 : _a[i])) {
                    this.addGuard(e.fullName, value);
                    return;
                }
            }
        }
        else if (type === ValueType.Complex && value instanceof Object) {
            Object.keys(value).forEach(function (key) {
                var _a;
                if (value[key] === ((_a = e.value) === null || _a === void 0 ? void 0 : _a[key])) {
                    return;
                }
                _this.addGuard(mergeNameParts(e.fullName, key), value[key]);
            });
        }
        else {
            var valuesAreEqual = value === e.value;
            var valuesAreEqualObjects = !valuesAreEqual
                && value instanceof Object
                && e.value instanceof Object
                && shallowEquals(value, e.value);
            if (valuesAreEqual || valuesAreEqualObjects || this.instance.skipOptionsRollBack) {
                return;
            }
            this.addGuard(e.fullName, value);
        }
    };
    OptionsManager.prototype.dispose = function () {
        var _this = this;
        optionsManagers.delete(this);
        Object.keys(this.guards).forEach(function (optionName) {
            delete _this.guards[optionName];
        });
    };
    OptionsManager.prototype.isOptionSubscribable = function (optionName) {
        return this.subscribableOptions.has(optionName);
    };
    OptionsManager.prototype.isIndependentEvent = function (optionName) {
        return this.independentEvents.has(optionName);
    };
    OptionsManager.prototype.callOptionChangeHandler = function (optionName, optionValue) {
        if (!this.isOptionSubscribable(optionName)) {
            return;
        }
        var parts = optionName.split('.');
        var propName = parts[parts.length - 1];
        if (propName.startsWith('on')) {
            return;
        }
        var eventName = "on" + capitalizeFirstLetter(propName) + "Change";
        parts[parts.length - 1] = eventName;
        var changeEvent = findValue(this.currentConfig, parts);
        if (!changeEvent) {
            return;
        }
        if (typeof changeEvent.value !== 'function') {
            throw new Error("Invalid value for the " + eventName + " property.\n                " + eventName + " must be a function.");
        }
        changeEvent.value(optionValue);
    };
    OptionsManager.prototype.wrapOptionValue = function (name, value) {
        var _this = this;
        if (name.substr(0, 2) === 'on' && typeof value === 'function') {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                if (!_this.isUpdating || _this.isIndependentEvent(name)) {
                    value.apply(void 0, __spreadArray([], __read(args)));
                }
            };
        }
        return value;
    };
    OptionsManager.prototype.addGuard = function (optionName, optionValue) {
        var _this = this;
        if (this.guards[optionName] !== undefined) {
            return;
        }
        var handler = function () {
            _this.setValue(optionName, optionValue);
            delete _this.guards[optionName];
        };
        this.guards[optionName] = handler;
        scheduleGuards();
    };
    OptionsManager.prototype.execGuards = function () {
        Object.values(this.guards)
            .forEach(function (handler) { return handler(); });
    };
    OptionsManager.prototype.resetOption = function (name) {
        this.instance.resetOption(name);
    };
    OptionsManager.prototype.setValue = function (name, value) {
        if (this.guards[name]) {
            delete this.guards[name];
        }
        this.instance.option(name, this.wrapOptionValue(name, value));
    };
    return OptionsManager;
}());
export { OptionsManager, };
