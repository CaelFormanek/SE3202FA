/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
import * as events from 'devextreme/events';
import * as React from 'react';
import { createPortal } from 'react-dom';
import { requestAnimationFrame } from 'devextreme/animation/frame';
import { deferUpdate } from 'devextreme/core/utils/common';
import { TemplateManager } from './template-manager';
import { OptionsManager, scheduleGuards, unscheduleGuards } from './options-manager';
import { elementPropNames, getClassName } from './widget-config';
import { buildConfigTree } from './configuration/react/tree';
import { isIE } from './configuration/utils';
import { RemovalLockerContext } from './helpers';
var DX_REMOVE_EVENT = 'dxremove';
var ComponentBase = /** @class */ (function (_super) {
    __extends(ComponentBase, _super);
    function ComponentBase(props) {
        var _this = _super.call(this, props) || this;
        _this.isPortalComponent = false;
        _this._templateProps = [];
        _this._childNodes = [];
        _this.useRequestAnimationFrameFlag = false;
        _this.useDeferUpdateForTemplates = false;
        _this.guardsUpdateScheduled = false;
        _this._createWidget = _this._createWidget.bind(_this);
        _this._setTemplateManagerHooks = _this._setTemplateManagerHooks.bind(_this);
        _this._optionsManager = new OptionsManager();
        return _this;
    }
    ComponentBase.displayContentsStyle = function () {
        return isIE()
            ? {
                width: '100%',
                height: '100%',
                padding: 0,
                margin: 0,
            }
            : { display: 'contents' };
    };
    ComponentBase.prototype.componentDidMount = function () {
        var _a;
        var _b;
        var style = this.props.style;
        if ((_b = this._childNodes) === null || _b === void 0 ? void 0 : _b.length) {
            (_a = this._element).append.apply(_a, __spreadArray([], __read(this._childNodes)));
        }
        else if (this._element.childNodes.length) {
            this._childNodes = Array.from(this._element.childNodes);
        }
        this._updateCssClasses(null, this.props);
        if (style) {
            this._setInlineStyles(style);
        }
    };
    ComponentBase.prototype.componentDidUpdate = function (prevProps) {
        var _a;
        this._updateCssClasses(prevProps, this.props);
        var config = this._getConfig();
        var templateOptions = this._optionsManager.getTemplateOptions(config);
        var dxTemplates = ((_a = this._createDXTemplates) === null || _a === void 0 ? void 0 : _a.call(this, templateOptions)) || {};
        this._optionsManager.update(config, dxTemplates);
        this._scheduleTemplatesUpdate();
    };
    ComponentBase.prototype.componentWillUnmount = function () {
        var _a;
        this._lockParentOnRemoved();
        if (this._instance) {
            var dxRemoveArgs = { isUnmounting: true };
            (_a = this._childNodes) === null || _a === void 0 ? void 0 : _a.forEach(function (child) { var _a; return (_a = child.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(child); });
            events.triggerHandler(this._element, DX_REMOVE_EVENT, dxRemoveArgs);
            this._instance.dispose();
        }
        this._optionsManager.dispose();
        this._unlockParentOnRemoved();
    };
    ComponentBase.prototype._createWidget = function (element) {
        var _a, _b;
        element = element || this._element;
        var config = this._getConfig();
        var options = __assign({ templatesRenderAsynchronously: true }, this._optionsManager.getInitialOptions(config));
        var templateOptions = this._optionsManager.getTemplateOptions(config);
        var dxTemplates = (_a = this._createDXTemplates) === null || _a === void 0 ? void 0 : _a.call(this, templateOptions);
        if (dxTemplates && Object.keys(dxTemplates).length) {
            options = __assign(__assign({}, options), { integrationOptions: {
                    templates: dxTemplates,
                } });
        }
        (_b = this._clearInstantiationModels) === null || _b === void 0 ? void 0 : _b.call(this);
        this._instance = new this._WidgetClass(element, options);
        if (!this.useRequestAnimationFrameFlag) {
            this.useDeferUpdateForTemplates = this._instance.option('integrationOptions.useDeferUpdateForTemplates');
        }
        this._optionsManager.setInstance(this._instance, config, this.subscribableOptions, this.independentEvents);
        this._instance.on('optionChanged', this._optionsManager.onOptionChanged);
    };
    ComponentBase.prototype._scheduleTemplatesUpdate = function () {
        var _this = this;
        if (this.guardsUpdateScheduled) {
            return;
        }
        this.guardsUpdateScheduled = true;
        var updateFunc = this.useDeferUpdateForTemplates ? deferUpdate : requestAnimationFrame;
        updateFunc(function () {
            var _a;
            _this.guardsUpdateScheduled = false;
            (_a = _this._updateTemplates) === null || _a === void 0 ? void 0 : _a.call(_this, function () { return scheduleGuards(); });
        });
        unscheduleGuards();
    };
    ComponentBase.prototype._getConfig = function () {
        return buildConfigTree({
            templates: this._templateProps,
            initialValuesProps: this._defaults,
            predefinedValuesProps: {},
            expectedChildren: this._expectedChildren,
        }, this.props);
    };
    ComponentBase.prototype._getElementProps = function () {
        var _this = this;
        var elementProps = {
            ref: function (element) { _this._element = element; },
        };
        elementPropNames.forEach(function (name) {
            var props = _this.props;
            if (name in props) {
                elementProps[name] = props[name];
            }
        });
        return elementProps;
    };
    ComponentBase.prototype._setInlineStyles = function (styles) {
        var _this = this;
        Object.entries(styles).forEach(function (_a) {
            var _b = __read(_a, 2), name = _b[0], value = _b[1];
            _this._element.style[name] = value;
        });
    };
    ComponentBase.prototype._updateCssClasses = function (prevProps, newProps) {
        var _a, _b;
        var prevClassName = prevProps ? getClassName(prevProps) : undefined;
        var newClassName = getClassName(newProps);
        if (prevClassName === newClassName) {
            return;
        }
        if (prevClassName) {
            var classNames = prevClassName.split(' ').filter(function (c) { return c; });
            if (classNames.length) {
                (_a = this._element.classList).remove.apply(_a, __spreadArray([], __read(classNames)));
            }
        }
        if (newClassName) {
            var classNames = newClassName.split(' ').filter(function (c) { return c; });
            if (classNames.length) {
                (_b = this._element.classList).add.apply(_b, __spreadArray([], __read(classNames)));
            }
        }
    };
    ComponentBase.prototype._lockParentOnRemoved = function () {
        var _a;
        (_a = this.context) === null || _a === void 0 ? void 0 : _a.lock();
    };
    ComponentBase.prototype._unlockParentOnRemoved = function () {
        var _a;
        (_a = this.context) === null || _a === void 0 ? void 0 : _a.unlock();
    };
    ComponentBase.prototype._setTemplateManagerHooks = function (_a) {
        var createDXTemplates = _a.createDXTemplates, clearInstantiationModels = _a.clearInstantiationModels, updateTemplates = _a.updateTemplates;
        this._createDXTemplates = createDXTemplates;
        this._clearInstantiationModels = clearInstantiationModels;
        this._updateTemplates = updateTemplates;
    };
    ComponentBase.prototype.renderChildren = function () {
        // @ts-expect-error TS2339
        var children = this.props.children;
        return children;
    };
    ComponentBase.prototype.renderContent = function () {
        var _this = this;
        // @ts-expect-error TS2339
        var children = this.props.children;
        return this.isPortalComponent && children
            ? React.createElement('div', {
                ref: function (node) {
                    if (node && _this.portalContainer !== node) {
                        _this.portalContainer = node;
                        _this.forceUpdate();
                    }
                },
                style: ComponentBase.displayContentsStyle(),
            })
            : this.renderChildren();
    };
    ComponentBase.prototype.renderPortal = function () {
        return this.portalContainer && createPortal(this.renderChildren(), this.portalContainer);
    };
    ComponentBase.prototype.render = function () {
        return React.createElement(React.Fragment, {}, React.createElement('div', this._getElementProps(), this.renderContent(), React.createElement(TemplateManager, {
            init: this._setTemplateManagerHooks,
        })), this.isPortalComponent && this.renderPortal());
    };
    ComponentBase.contextType = RemovalLockerContext;
    return ComponentBase;
}(React.PureComponent));
export { ComponentBase, DX_REMOVE_EVENT, };
