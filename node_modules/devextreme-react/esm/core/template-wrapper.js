/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import * as React from 'react';
import * as events from 'devextreme/events';
import { useCallback, useLayoutEffect, useEffect, useState, useRef, useMemo, memo, } from 'react';
import { createPortal } from 'react-dom';
import { DX_REMOVE_EVENT } from './component-base';
import { RemovalLockerContext } from './helpers';
var createHiddenNode = function (containerNodeName, ref, defaultElement) {
    var style = { display: 'none' };
    switch (containerNodeName) {
        case 'TABLE':
            return React.createElement("tbody", { style: style, ref: ref });
        case 'TBODY':
            return React.createElement("tr", { style: style, ref: ref });
        default:
            return React.createElement(defaultElement, { style: style, ref: ref });
    }
};
var TemplateWrapperComponent = function (_a) {
    var templateFactory = _a.templateFactory, data = _a.data, index = _a.index, container = _a.container, onRemoved = _a.onRemoved, onRendered = _a.onRendered;
    var _b = __read(useState(false), 2), removalListenerRequired = _b[0], setRemovalListenerRequired = _b[1];
    var isRemovalLocked = useRef(false);
    var removalLocker = useMemo(function () { return ({
        lock: function () { isRemovalLocked.current = true; },
        unlock: function () { isRemovalLocked.current = false; },
    }); }, []);
    var element = useRef();
    var hiddenNodeElement = useRef();
    var removalListenerElement = useRef();
    var onTemplateRemoved = useCallback(function (_, args) {
        if ((args === null || args === void 0 ? void 0 : args.isUnmounting) || isRemovalLocked.current) {
            return;
        }
        if (element.current) {
            events.off(element.current, DX_REMOVE_EVENT, onTemplateRemoved);
        }
        if (removalListenerElement.current) {
            events.off(removalListenerElement.current, DX_REMOVE_EVENT, onTemplateRemoved);
        }
        onRemoved();
    }, [onRemoved]);
    useLayoutEffect(function () {
        var el = element.current;
        if (el && el.nodeType === Node.ELEMENT_NODE) {
            events.off(el, DX_REMOVE_EVENT, onTemplateRemoved);
            events.on(el, DX_REMOVE_EVENT, onTemplateRemoved);
        }
        else if (!removalListenerRequired) {
            setRemovalListenerRequired(true);
        }
        else if (removalListenerElement.current) {
            events.off(removalListenerElement.current, DX_REMOVE_EVENT, onTemplateRemoved);
            events.on(removalListenerElement.current, DX_REMOVE_EVENT, onTemplateRemoved);
        }
        return function () {
            if (element.current) {
                container.appendChild(element.current);
            }
            if (hiddenNodeElement.current) {
                container.appendChild(hiddenNodeElement.current);
            }
            if (removalListenerElement.current) {
                container.appendChild(removalListenerElement.current);
            }
            if (el) {
                events.off(el, DX_REMOVE_EVENT, onTemplateRemoved);
            }
        };
    }, [onTemplateRemoved, removalListenerRequired, container]);
    useEffect(function () {
        onRendered();
    }, [onRendered]);
    var hiddenNode = createHiddenNode(container === null || container === void 0 ? void 0 : container.nodeName, function (node) {
        hiddenNodeElement.current = node;
        element.current = node === null || node === void 0 ? void 0 : node.previousSibling;
    }, 'div');
    var removalListener = removalListenerRequired
        ? createHiddenNode(container === null || container === void 0 ? void 0 : container.nodeName, function (node) { removalListenerElement.current = node; }, 'span')
        : undefined;
    return createPortal(React.createElement(React.Fragment, null,
        React.createElement(RemovalLockerContext.Provider, { value: removalLocker },
            templateFactory({ data: data, index: index, onRendered: onRendered }),
            hiddenNode,
            removalListener)), container);
};
export var TemplateWrapper = memo(TemplateWrapperComponent);
