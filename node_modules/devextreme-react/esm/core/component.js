/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { ComponentBase } from './component-base';
import { ExtensionComponent } from './extension-component';
var Component = /** @class */ (function (_super) {
    __extends(Component, _super);
    function Component(props) {
        var _this = _super.call(this, props) || this;
        _this._extensionCreators = [];
        _this._registerExtension = _this._registerExtension.bind(_this);
        return _this;
    }
    Component.prototype.componentDidMount = function () {
        _super.prototype.componentDidMount.call(this);
        this._createWidget();
        this._createExtensions();
    };
    Component.prototype.componentWillUnmount = function () {
        _super.prototype.componentWillUnmount.call(this);
        this.clearExtensions();
    };
    Component.prototype.clearExtensions = function () {
        this._extensionCreators = [];
    };
    // @ts-expect-error TS2416
    Component.prototype.renderChildren = function () {
        var _this = this;
        return React.Children.map(
        // @ts-expect-error TS2339
        this.props.children, function (child) {
            if (child && Object.prototype.isPrototypeOf.call(ExtensionComponent, child.type)) {
                return React.cloneElement(child, { onMounted: _this._registerExtension });
            }
            return child;
        });
    };
    Component.prototype._registerExtension = function (creator) {
        this._extensionCreators.push(creator);
    };
    Component.prototype._createExtensions = function () {
        var _this = this;
        this._extensionCreators.forEach(function (creator) { return creator(_this._element); });
    };
    return Component;
}(ComponentBase));
export { Component, };
