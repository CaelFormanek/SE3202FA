/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use client";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import dxLinearGauge from "devextreme/viz/linear_gauge";
import * as PropTypes from "prop-types";
import { Component as BaseComponent } from "./core/component";
import NestedOption from "./core/nested-option";
var LinearGauge = /** @class */ (function (_super) {
    __extends(LinearGauge, _super);
    function LinearGauge() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._WidgetClass = dxLinearGauge;
        _this.subscribableOptions = ["loadingIndicator", "loadingIndicator.show", "subvalues", "value"];
        _this.independentEvents = ["onDisposing", "onDrawn", "onExported", "onExporting", "onFileSaving", "onIncidentOccurred", "onInitialized", "onTooltipHidden", "onTooltipShown"];
        _this._defaults = {
            defaultLoadingIndicator: "loadingIndicator",
            defaultSubvalues: "subvalues",
            defaultValue: "value"
        };
        _this._expectedChildren = {
            animation: { optionName: "animation", isCollectionItem: false },
            export: { optionName: "export", isCollectionItem: false },
            geometry: { optionName: "geometry", isCollectionItem: false },
            loadingIndicator: { optionName: "loadingIndicator", isCollectionItem: false },
            margin: { optionName: "margin", isCollectionItem: false },
            rangeContainer: { optionName: "rangeContainer", isCollectionItem: false },
            scale: { optionName: "scale", isCollectionItem: false },
            size: { optionName: "size", isCollectionItem: false },
            subvalueIndicator: { optionName: "subvalueIndicator", isCollectionItem: false },
            title: { optionName: "title", isCollectionItem: false },
            tooltip: { optionName: "tooltip", isCollectionItem: false },
            valueIndicator: { optionName: "valueIndicator", isCollectionItem: false }
        };
        return _this;
    }
    Object.defineProperty(LinearGauge.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    return LinearGauge;
}(BaseComponent));
LinearGauge.propTypes = {
    animation: PropTypes.object,
    containerBackgroundColor: PropTypes.string,
    disabled: PropTypes.bool,
    elementAttr: PropTypes.object,
    export: PropTypes.object,
    geometry: PropTypes.object,
    loadingIndicator: PropTypes.object,
    margin: PropTypes.object,
    onDisposing: PropTypes.func,
    onDrawn: PropTypes.func,
    onExported: PropTypes.func,
    onExporting: PropTypes.func,
    onFileSaving: PropTypes.func,
    onIncidentOccurred: PropTypes.func,
    onInitialized: PropTypes.func,
    onOptionChanged: PropTypes.func,
    onTooltipHidden: PropTypes.func,
    onTooltipShown: PropTypes.func,
    pathModified: PropTypes.bool,
    rangeContainer: PropTypes.object,
    redrawOnResize: PropTypes.bool,
    rtlEnabled: PropTypes.bool,
    scale: PropTypes.object,
    size: PropTypes.object,
    subvalueIndicator: PropTypes.object,
    subvalues: PropTypes.array,
    theme: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "generic.dark",
            "generic.light",
            "generic.contrast",
            "generic.carmine",
            "generic.darkmoon",
            "generic.darkviolet",
            "generic.greenmist",
            "generic.softblue",
            "material.blue.light",
            "material.lime.light",
            "material.orange.light",
            "material.purple.light",
            "material.teal.light"
        ])
    ]),
    title: PropTypes.oneOfType([
        PropTypes.object,
        PropTypes.string
    ]),
    tooltip: PropTypes.object,
    value: PropTypes.number,
    valueIndicator: PropTypes.object
};
var Animation = /** @class */ (function (_super) {
    __extends(Animation, _super);
    function Animation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Animation.OptionName = "animation";
    return Animation;
}(NestedOption));
var BackgroundColor = /** @class */ (function (_super) {
    __extends(BackgroundColor, _super);
    function BackgroundColor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BackgroundColor.OptionName = "backgroundColor";
    return BackgroundColor;
}(NestedOption));
var Border = /** @class */ (function (_super) {
    __extends(Border, _super);
    function Border() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Border.OptionName = "border";
    return Border;
}(NestedOption));
var Color = /** @class */ (function (_super) {
    __extends(Color, _super);
    function Color() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Color.OptionName = "color";
    return Color;
}(NestedOption));
var Export = /** @class */ (function (_super) {
    __extends(Export, _super);
    function Export() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Export.OptionName = "export";
    return Export;
}(NestedOption));
var Font = /** @class */ (function (_super) {
    __extends(Font, _super);
    function Font() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Font.OptionName = "font";
    return Font;
}(NestedOption));
var Format = /** @class */ (function (_super) {
    __extends(Format, _super);
    function Format() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Format.OptionName = "format";
    return Format;
}(NestedOption));
var Geometry = /** @class */ (function (_super) {
    __extends(Geometry, _super);
    function Geometry() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Geometry.OptionName = "geometry";
    return Geometry;
}(NestedOption));
var Label = /** @class */ (function (_super) {
    __extends(Label, _super);
    function Label() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Label.OptionName = "label";
    Label.ExpectedChildren = {
        font: { optionName: "font", isCollectionItem: false },
        format: { optionName: "format", isCollectionItem: false }
    };
    return Label;
}(NestedOption));
var LoadingIndicator = /** @class */ (function (_super) {
    __extends(LoadingIndicator, _super);
    function LoadingIndicator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LoadingIndicator.OptionName = "loadingIndicator";
    LoadingIndicator.DefaultsProps = {
        defaultShow: "show"
    };
    LoadingIndicator.ExpectedChildren = {
        font: { optionName: "font", isCollectionItem: false }
    };
    return LoadingIndicator;
}(NestedOption));
var Margin = /** @class */ (function (_super) {
    __extends(Margin, _super);
    function Margin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Margin.OptionName = "margin";
    return Margin;
}(NestedOption));
var MinorTick = /** @class */ (function (_super) {
    __extends(MinorTick, _super);
    function MinorTick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MinorTick.OptionName = "minorTick";
    return MinorTick;
}(NestedOption));
var Range = /** @class */ (function (_super) {
    __extends(Range, _super);
    function Range() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Range.OptionName = "ranges";
    Range.IsCollectionItem = true;
    Range.ExpectedChildren = {
        color: { optionName: "color", isCollectionItem: false }
    };
    return Range;
}(NestedOption));
var RangeContainer = /** @class */ (function (_super) {
    __extends(RangeContainer, _super);
    function RangeContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RangeContainer.OptionName = "rangeContainer";
    RangeContainer.ExpectedChildren = {
        backgroundColor: { optionName: "backgroundColor", isCollectionItem: false },
        range: { optionName: "ranges", isCollectionItem: true },
        width: { optionName: "width", isCollectionItem: false }
    };
    return RangeContainer;
}(NestedOption));
var Scale = /** @class */ (function (_super) {
    __extends(Scale, _super);
    function Scale() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Scale.OptionName = "scale";
    Scale.ExpectedChildren = {
        label: { optionName: "label", isCollectionItem: false },
        minorTick: { optionName: "minorTick", isCollectionItem: false },
        tick: { optionName: "tick", isCollectionItem: false }
    };
    return Scale;
}(NestedOption));
var Shadow = /** @class */ (function (_super) {
    __extends(Shadow, _super);
    function Shadow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Shadow.OptionName = "shadow";
    return Shadow;
}(NestedOption));
var Size = /** @class */ (function (_super) {
    __extends(Size, _super);
    function Size() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Size.OptionName = "size";
    return Size;
}(NestedOption));
var Subtitle = /** @class */ (function (_super) {
    __extends(Subtitle, _super);
    function Subtitle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Subtitle.OptionName = "subtitle";
    Subtitle.ExpectedChildren = {
        font: { optionName: "font", isCollectionItem: false }
    };
    return Subtitle;
}(NestedOption));
var SubvalueIndicator = /** @class */ (function (_super) {
    __extends(SubvalueIndicator, _super);
    function SubvalueIndicator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SubvalueIndicator.OptionName = "subvalueIndicator";
    SubvalueIndicator.ExpectedChildren = {
        color: { optionName: "color", isCollectionItem: false },
        text: { optionName: "text", isCollectionItem: false }
    };
    return SubvalueIndicator;
}(NestedOption));
var Text = /** @class */ (function (_super) {
    __extends(Text, _super);
    function Text() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Text.OptionName = "text";
    Text.ExpectedChildren = {
        font: { optionName: "font", isCollectionItem: false },
        format: { optionName: "format", isCollectionItem: false }
    };
    return Text;
}(NestedOption));
var Tick = /** @class */ (function (_super) {
    __extends(Tick, _super);
    function Tick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Tick.OptionName = "tick";
    return Tick;
}(NestedOption));
var Title = /** @class */ (function (_super) {
    __extends(Title, _super);
    function Title() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Title.OptionName = "title";
    Title.ExpectedChildren = {
        font: { optionName: "font", isCollectionItem: false },
        margin: { optionName: "margin", isCollectionItem: false },
        subtitle: { optionName: "subtitle", isCollectionItem: false }
    };
    return Title;
}(NestedOption));
var Tooltip = /** @class */ (function (_super) {
    __extends(Tooltip, _super);
    function Tooltip() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Tooltip.OptionName = "tooltip";
    Tooltip.ExpectedChildren = {
        border: { optionName: "border", isCollectionItem: false },
        font: { optionName: "font", isCollectionItem: false },
        format: { optionName: "format", isCollectionItem: false },
        shadow: { optionName: "shadow", isCollectionItem: false }
    };
    Tooltip.TemplateProps = [{
            tmplOption: "contentTemplate",
            render: "contentRender",
            component: "contentComponent",
            keyFn: "contentKeyFn"
        }];
    return Tooltip;
}(NestedOption));
var ValueIndicator = /** @class */ (function (_super) {
    __extends(ValueIndicator, _super);
    function ValueIndicator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ValueIndicator.OptionName = "valueIndicator";
    return ValueIndicator;
}(NestedOption));
var Width = /** @class */ (function (_super) {
    __extends(Width, _super);
    function Width() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Width.OptionName = "width";
    return Width;
}(NestedOption));
export default LinearGauge;
export { LinearGauge, Animation, BackgroundColor, Border, Color, Export, Font, Format, Geometry, Label, LoadingIndicator, Margin, MinorTick, Range, RangeContainer, Scale, Shadow, Size, Subtitle, SubvalueIndicator, Text, Tick, Title, Tooltip, ValueIndicator, Width };
