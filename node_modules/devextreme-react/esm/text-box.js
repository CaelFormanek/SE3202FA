/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use client";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import dxTextBox from "devextreme/ui/text_box";
import * as PropTypes from "prop-types";
import { Component as BaseComponent } from "./core/component";
import NestedOption from "./core/nested-option";
var TextBox = /** @class */ (function (_super) {
    __extends(TextBox, _super);
    function TextBox() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._WidgetClass = dxTextBox;
        _this.subscribableOptions = ["value"];
        _this.independentEvents = ["onChange", "onContentReady", "onCopy", "onCut", "onDisposing", "onEnterKey", "onFocusIn", "onFocusOut", "onInitialized", "onInput", "onKeyDown", "onKeyUp", "onPaste", "onValueChanged"];
        _this._defaults = {
            defaultValue: "value"
        };
        _this._expectedChildren = {
            button: { optionName: "buttons", isCollectionItem: true }
        };
        return _this;
    }
    Object.defineProperty(TextBox.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    return TextBox;
}(BaseComponent));
TextBox.propTypes = {
    accessKey: PropTypes.string,
    activeStateEnabled: PropTypes.bool,
    buttons: PropTypes.array,
    disabled: PropTypes.bool,
    elementAttr: PropTypes.object,
    focusStateEnabled: PropTypes.bool,
    height: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ]),
    hint: PropTypes.string,
    hoverStateEnabled: PropTypes.bool,
    isDirty: PropTypes.bool,
    isValid: PropTypes.bool,
    label: PropTypes.string,
    labelMode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "static",
            "floating",
            "hidden",
            "outside"
        ])
    ]),
    mask: PropTypes.string,
    maskChar: PropTypes.string,
    maskInvalidMessage: PropTypes.string,
    maxLength: PropTypes.oneOfType([
        PropTypes.number,
        PropTypes.string
    ]),
    mode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "email",
            "password",
            "search",
            "tel",
            "text",
            "url"
        ])
    ]),
    name: PropTypes.string,
    onChange: PropTypes.func,
    onContentReady: PropTypes.func,
    onCopy: PropTypes.func,
    onCut: PropTypes.func,
    onDisposing: PropTypes.func,
    onEnterKey: PropTypes.func,
    onFocusIn: PropTypes.func,
    onFocusOut: PropTypes.func,
    onInitialized: PropTypes.func,
    onInput: PropTypes.func,
    onKeyDown: PropTypes.func,
    onKeyUp: PropTypes.func,
    onOptionChanged: PropTypes.func,
    onPaste: PropTypes.func,
    onValueChanged: PropTypes.func,
    placeholder: PropTypes.string,
    readOnly: PropTypes.bool,
    rtlEnabled: PropTypes.bool,
    showClearButton: PropTypes.bool,
    showMaskMode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "always",
            "onFocus"
        ])
    ]),
    spellcheck: PropTypes.bool,
    stylingMode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "outlined",
            "underlined",
            "filled"
        ])
    ]),
    tabIndex: PropTypes.number,
    text: PropTypes.string,
    useMaskedValue: PropTypes.bool,
    validationErrors: PropTypes.array,
    validationMessageMode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "always",
            "auto"
        ])
    ]),
    validationMessagePosition: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "bottom",
            "left",
            "right",
            "top"
        ])
    ]),
    validationStatus: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "valid",
            "invalid",
            "pending"
        ])
    ]),
    value: PropTypes.string,
    valueChangeEvent: PropTypes.string,
    visible: PropTypes.bool,
    width: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ])
};
var Button = /** @class */ (function (_super) {
    __extends(Button, _super);
    function Button() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Button.OptionName = "buttons";
    Button.IsCollectionItem = true;
    Button.ExpectedChildren = {
        options: { optionName: "options", isCollectionItem: false }
    };
    return Button;
}(NestedOption));
var Options = /** @class */ (function (_super) {
    __extends(Options, _super);
    function Options() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Options.OptionName = "options";
    Options.TemplateProps = [{
            tmplOption: "template",
            render: "render",
            component: "component",
            keyFn: "keyFn"
        }];
    return Options;
}(NestedOption));
export default TextBox;
export { TextBox, Button, Options };
