/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use client";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import dxChart from "devextreme/viz/chart";
import * as PropTypes from "prop-types";
import { Component as BaseComponent } from "./core/component";
import NestedOption from "./core/nested-option";
var Chart = /** @class */ (function (_super) {
    __extends(Chart, _super);
    function Chart() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._WidgetClass = dxChart;
        _this.useRequestAnimationFrameFlag = true;
        _this.subscribableOptions = ["argumentAxis", "argumentAxis.categories", "argumentAxis.visualRange", "loadingIndicator", "loadingIndicator.show", "valueAxis", "valueAxis.categories", "valueAxis.visualRange"];
        _this.independentEvents = ["onArgumentAxisClick", "onDisposing", "onDone", "onDrawn", "onExported", "onExporting", "onFileSaving", "onIncidentOccurred", "onInitialized", "onLegendClick", "onPointClick", "onSeriesClick", "onTooltipHidden", "onTooltipShown", "onZoomEnd", "onZoomStart"];
        _this._defaults = {
            defaultArgumentAxis: "argumentAxis",
            defaultLoadingIndicator: "loadingIndicator",
            defaultValueAxis: "valueAxis"
        };
        _this._expectedChildren = {
            adaptiveLayout: { optionName: "adaptiveLayout", isCollectionItem: false },
            animation: { optionName: "animation", isCollectionItem: false },
            annotation: { optionName: "annotations", isCollectionItem: true },
            argumentAxis: { optionName: "argumentAxis", isCollectionItem: false },
            chartTitle: { optionName: "title", isCollectionItem: false },
            commonAnnotationSettings: { optionName: "commonAnnotationSettings", isCollectionItem: false },
            commonAxisSettings: { optionName: "commonAxisSettings", isCollectionItem: false },
            commonPaneSettings: { optionName: "commonPaneSettings", isCollectionItem: false },
            commonSeriesSettings: { optionName: "commonSeriesSettings", isCollectionItem: false },
            crosshair: { optionName: "crosshair", isCollectionItem: false },
            dataPrepareSettings: { optionName: "dataPrepareSettings", isCollectionItem: false },
            export: { optionName: "export", isCollectionItem: false },
            legend: { optionName: "legend", isCollectionItem: false },
            loadingIndicator: { optionName: "loadingIndicator", isCollectionItem: false },
            margin: { optionName: "margin", isCollectionItem: false },
            pane: { optionName: "panes", isCollectionItem: true },
            scrollBar: { optionName: "scrollBar", isCollectionItem: false },
            series: { optionName: "series", isCollectionItem: true },
            seriesTemplate: { optionName: "seriesTemplate", isCollectionItem: false },
            size: { optionName: "size", isCollectionItem: false },
            title: { optionName: "title", isCollectionItem: false },
            tooltip: { optionName: "tooltip", isCollectionItem: false },
            valueAxis: { optionName: "valueAxis", isCollectionItem: true },
            zoomAndPan: { optionName: "zoomAndPan", isCollectionItem: false }
        };
        return _this;
    }
    Object.defineProperty(Chart.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    return Chart;
}(BaseComponent));
Chart.propTypes = {
    adaptiveLayout: PropTypes.object,
    adjustOnZoom: PropTypes.bool,
    animation: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.object
    ]),
    annotations: PropTypes.array,
    argumentAxis: PropTypes.object,
    autoHidePointMarkers: PropTypes.bool,
    barGroupPadding: PropTypes.number,
    barGroupWidth: PropTypes.number,
    commonAnnotationSettings: PropTypes.object,
    commonAxisSettings: PropTypes.object,
    commonPaneSettings: PropTypes.object,
    commonSeriesSettings: PropTypes.object,
    containerBackgroundColor: PropTypes.string,
    crosshair: PropTypes.object,
    customizeAnnotation: PropTypes.func,
    customizeLabel: PropTypes.func,
    customizePoint: PropTypes.func,
    dataPrepareSettings: PropTypes.object,
    defaultPane: PropTypes.string,
    disabled: PropTypes.bool,
    elementAttr: PropTypes.object,
    export: PropTypes.object,
    legend: PropTypes.object,
    loadingIndicator: PropTypes.object,
    margin: PropTypes.object,
    maxBubbleSize: PropTypes.number,
    minBubbleSize: PropTypes.number,
    negativesAsZeroes: PropTypes.bool,
    onArgumentAxisClick: PropTypes.func,
    onDisposing: PropTypes.func,
    onDone: PropTypes.func,
    onDrawn: PropTypes.func,
    onExported: PropTypes.func,
    onExporting: PropTypes.func,
    onFileSaving: PropTypes.func,
    onIncidentOccurred: PropTypes.func,
    onInitialized: PropTypes.func,
    onLegendClick: PropTypes.func,
    onOptionChanged: PropTypes.func,
    onPointClick: PropTypes.func,
    onPointHoverChanged: PropTypes.func,
    onPointSelectionChanged: PropTypes.func,
    onSeriesClick: PropTypes.func,
    onSeriesHoverChanged: PropTypes.func,
    onSeriesSelectionChanged: PropTypes.func,
    onTooltipHidden: PropTypes.func,
    onTooltipShown: PropTypes.func,
    onZoomEnd: PropTypes.func,
    onZoomStart: PropTypes.func,
    palette: PropTypes.oneOfType([
        PropTypes.array,
        PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.oneOf([
                "Bright",
                "Harmony Light",
                "Ocean",
                "Pastel",
                "Soft",
                "Soft Pastel",
                "Vintage",
                "Violet",
                "Carmine",
                "Dark Moon",
                "Dark Violet",
                "Green Mist",
                "Soft Blue",
                "Material",
                "Office"
            ])
        ])
    ]),
    paletteExtensionMode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "alternate",
            "blend",
            "extrapolate"
        ])
    ]),
    panes: PropTypes.oneOfType([
        PropTypes.array,
        PropTypes.object
    ]),
    pathModified: PropTypes.bool,
    pointSelectionMode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "single",
            "multiple"
        ])
    ]),
    redrawOnResize: PropTypes.bool,
    resizePanesOnZoom: PropTypes.bool,
    resolveLabelOverlapping: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "hide",
            "none",
            "stack"
        ])
    ]),
    rotated: PropTypes.bool,
    rtlEnabled: PropTypes.bool,
    scrollBar: PropTypes.object,
    series: PropTypes.oneOfType([
        PropTypes.array,
        PropTypes.object
    ]),
    seriesSelectionMode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "single",
            "multiple"
        ])
    ]),
    seriesTemplate: PropTypes.object,
    size: PropTypes.object,
    stickyHovering: PropTypes.bool,
    synchronizeMultiAxes: PropTypes.bool,
    theme: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "generic.dark",
            "generic.light",
            "generic.contrast",
            "generic.carmine",
            "generic.darkmoon",
            "generic.darkviolet",
            "generic.greenmist",
            "generic.softblue",
            "material.blue.light",
            "material.lime.light",
            "material.orange.light",
            "material.purple.light",
            "material.teal.light"
        ])
    ]),
    title: PropTypes.oneOfType([
        PropTypes.object,
        PropTypes.string
    ]),
    tooltip: PropTypes.object,
    valueAxis: PropTypes.oneOfType([
        PropTypes.array,
        PropTypes.object
    ]),
    zoomAndPan: PropTypes.object
};
var AdaptiveLayout = /** @class */ (function (_super) {
    __extends(AdaptiveLayout, _super);
    function AdaptiveLayout() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AdaptiveLayout.OptionName = "adaptiveLayout";
    return AdaptiveLayout;
}(NestedOption));
var Aggregation = /** @class */ (function (_super) {
    __extends(Aggregation, _super);
    function Aggregation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Aggregation.OptionName = "aggregation";
    return Aggregation;
}(NestedOption));
var AggregationInterval = /** @class */ (function (_super) {
    __extends(AggregationInterval, _super);
    function AggregationInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AggregationInterval.OptionName = "aggregationInterval";
    return AggregationInterval;
}(NestedOption));
var Animation = /** @class */ (function (_super) {
    __extends(Animation, _super);
    function Animation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Animation.OptionName = "animation";
    return Animation;
}(NestedOption));
var Annotation = /** @class */ (function (_super) {
    __extends(Annotation, _super);
    function Annotation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Annotation.OptionName = "annotations";
    Annotation.IsCollectionItem = true;
    Annotation.ExpectedChildren = {
        annotationBorder: { optionName: "border", isCollectionItem: false },
        annotationImage: { optionName: "image", isCollectionItem: false },
        border: { optionName: "border", isCollectionItem: false },
        font: { optionName: "font", isCollectionItem: false },
        image: { optionName: "image", isCollectionItem: false },
        shadow: { optionName: "shadow", isCollectionItem: false }
    };
    Annotation.TemplateProps = [{
            tmplOption: "template",
            render: "render",
            component: "component",
            keyFn: "keyFn"
        }, {
            tmplOption: "tooltipTemplate",
            render: "tooltipRender",
            component: "tooltipComponent",
            keyFn: "tooltipKeyFn"
        }];
    return Annotation;
}(NestedOption));
var AnnotationBorder = /** @class */ (function (_super) {
    __extends(AnnotationBorder, _super);
    function AnnotationBorder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnnotationBorder.OptionName = "border";
    return AnnotationBorder;
}(NestedOption));
var AnnotationImage = /** @class */ (function (_super) {
    __extends(AnnotationImage, _super);
    function AnnotationImage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnnotationImage.OptionName = "image";
    return AnnotationImage;
}(NestedOption));
var ArgumentAxis = /** @class */ (function (_super) {
    __extends(ArgumentAxis, _super);
    function ArgumentAxis() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ArgumentAxis.OptionName = "argumentAxis";
    ArgumentAxis.DefaultsProps = {
        defaultCategories: "categories",
        defaultVisualRange: "visualRange"
    };
    ArgumentAxis.ExpectedChildren = {
        aggregationInterval: { optionName: "aggregationInterval", isCollectionItem: false },
        axisConstantLineStyle: { optionName: "constantLineStyle", isCollectionItem: false },
        axisLabel: { optionName: "label", isCollectionItem: false },
        axisTitle: { optionName: "title", isCollectionItem: false },
        break: { optionName: "breaks", isCollectionItem: true },
        breakStyle: { optionName: "breakStyle", isCollectionItem: false },
        constantLine: { optionName: "constantLines", isCollectionItem: true },
        constantLineStyle: { optionName: "constantLineStyle", isCollectionItem: false },
        grid: { optionName: "grid", isCollectionItem: false },
        label: { optionName: "label", isCollectionItem: false },
        minorGrid: { optionName: "minorGrid", isCollectionItem: false },
        minorTick: { optionName: "minorTick", isCollectionItem: false },
        minorTickInterval: { optionName: "minorTickInterval", isCollectionItem: false },
        minVisualRangeLength: { optionName: "minVisualRangeLength", isCollectionItem: false },
        strip: { optionName: "strips", isCollectionItem: true },
        stripStyle: { optionName: "stripStyle", isCollectionItem: false },
        tick: { optionName: "tick", isCollectionItem: false },
        tickInterval: { optionName: "tickInterval", isCollectionItem: false },
        title: { optionName: "title", isCollectionItem: false },
        visualRange: { optionName: "visualRange", isCollectionItem: false },
        wholeRange: { optionName: "wholeRange", isCollectionItem: false }
    };
    return ArgumentAxis;
}(NestedOption));
var ArgumentFormat = /** @class */ (function (_super) {
    __extends(ArgumentFormat, _super);
    function ArgumentFormat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ArgumentFormat.OptionName = "argumentFormat";
    return ArgumentFormat;
}(NestedOption));
var AxisConstantLineStyle = /** @class */ (function (_super) {
    __extends(AxisConstantLineStyle, _super);
    function AxisConstantLineStyle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AxisConstantLineStyle.OptionName = "constantLineStyle";
    return AxisConstantLineStyle;
}(NestedOption));
var AxisConstantLineStyleLabel = /** @class */ (function (_super) {
    __extends(AxisConstantLineStyleLabel, _super);
    function AxisConstantLineStyleLabel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AxisConstantLineStyleLabel.OptionName = "label";
    return AxisConstantLineStyleLabel;
}(NestedOption));
var AxisLabel = /** @class */ (function (_super) {
    __extends(AxisLabel, _super);
    function AxisLabel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AxisLabel.OptionName = "label";
    AxisLabel.TemplateProps = [{
            tmplOption: "template",
            render: "render",
            component: "component",
            keyFn: "keyFn"
        }];
    return AxisLabel;
}(NestedOption));
var AxisTitle = /** @class */ (function (_super) {
    __extends(AxisTitle, _super);
    function AxisTitle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AxisTitle.OptionName = "title";
    return AxisTitle;
}(NestedOption));
var BackgroundColor = /** @class */ (function (_super) {
    __extends(BackgroundColor, _super);
    function BackgroundColor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BackgroundColor.OptionName = "backgroundColor";
    return BackgroundColor;
}(NestedOption));
var Border = /** @class */ (function (_super) {
    __extends(Border, _super);
    function Border() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Border.OptionName = "border";
    return Border;
}(NestedOption));
var Break = /** @class */ (function (_super) {
    __extends(Break, _super);
    function Break() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Break.OptionName = "breaks";
    Break.IsCollectionItem = true;
    return Break;
}(NestedOption));
var BreakStyle = /** @class */ (function (_super) {
    __extends(BreakStyle, _super);
    function BreakStyle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BreakStyle.OptionName = "breakStyle";
    return BreakStyle;
}(NestedOption));
var ChartTitle = /** @class */ (function (_super) {
    __extends(ChartTitle, _super);
    function ChartTitle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChartTitle.OptionName = "title";
    ChartTitle.ExpectedChildren = {
        chartTitleSubtitle: { optionName: "subtitle", isCollectionItem: false },
        font: { optionName: "font", isCollectionItem: false },
        margin: { optionName: "margin", isCollectionItem: false },
        subtitle: { optionName: "subtitle", isCollectionItem: false }
    };
    return ChartTitle;
}(NestedOption));
var ChartTitleSubtitle = /** @class */ (function (_super) {
    __extends(ChartTitleSubtitle, _super);
    function ChartTitleSubtitle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChartTitleSubtitle.OptionName = "subtitle";
    ChartTitleSubtitle.ExpectedChildren = {
        font: { optionName: "font", isCollectionItem: false }
    };
    return ChartTitleSubtitle;
}(NestedOption));
var Color = /** @class */ (function (_super) {
    __extends(Color, _super);
    function Color() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Color.OptionName = "color";
    return Color;
}(NestedOption));
var CommonAnnotationSettings = /** @class */ (function (_super) {
    __extends(CommonAnnotationSettings, _super);
    function CommonAnnotationSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CommonAnnotationSettings.OptionName = "commonAnnotationSettings";
    CommonAnnotationSettings.TemplateProps = [{
            tmplOption: "template",
            render: "render",
            component: "component",
            keyFn: "keyFn"
        }, {
            tmplOption: "tooltipTemplate",
            render: "tooltipRender",
            component: "tooltipComponent",
            keyFn: "tooltipKeyFn"
        }];
    return CommonAnnotationSettings;
}(NestedOption));
var CommonAxisSettings = /** @class */ (function (_super) {
    __extends(CommonAxisSettings, _super);
    function CommonAxisSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CommonAxisSettings.OptionName = "commonAxisSettings";
    CommonAxisSettings.ExpectedChildren = {
        commonAxisSettingsConstantLineStyle: { optionName: "constantLineStyle", isCollectionItem: false },
        commonAxisSettingsLabel: { optionName: "label", isCollectionItem: false },
        commonAxisSettingsTitle: { optionName: "title", isCollectionItem: false },
        constantLineStyle: { optionName: "constantLineStyle", isCollectionItem: false },
        label: { optionName: "label", isCollectionItem: false },
        title: { optionName: "title", isCollectionItem: false }
    };
    return CommonAxisSettings;
}(NestedOption));
var CommonAxisSettingsConstantLineStyle = /** @class */ (function (_super) {
    __extends(CommonAxisSettingsConstantLineStyle, _super);
    function CommonAxisSettingsConstantLineStyle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CommonAxisSettingsConstantLineStyle.OptionName = "constantLineStyle";
    CommonAxisSettingsConstantLineStyle.ExpectedChildren = {
        commonAxisSettingsConstantLineStyleLabel: { optionName: "label", isCollectionItem: false },
        label: { optionName: "label", isCollectionItem: false }
    };
    return CommonAxisSettingsConstantLineStyle;
}(NestedOption));
var CommonAxisSettingsConstantLineStyleLabel = /** @class */ (function (_super) {
    __extends(CommonAxisSettingsConstantLineStyleLabel, _super);
    function CommonAxisSettingsConstantLineStyleLabel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CommonAxisSettingsConstantLineStyleLabel.OptionName = "label";
    return CommonAxisSettingsConstantLineStyleLabel;
}(NestedOption));
var CommonAxisSettingsLabel = /** @class */ (function (_super) {
    __extends(CommonAxisSettingsLabel, _super);
    function CommonAxisSettingsLabel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CommonAxisSettingsLabel.OptionName = "label";
    CommonAxisSettingsLabel.TemplateProps = [{
            tmplOption: "template",
            render: "render",
            component: "component",
            keyFn: "keyFn"
        }];
    return CommonAxisSettingsLabel;
}(NestedOption));
var CommonAxisSettingsTitle = /** @class */ (function (_super) {
    __extends(CommonAxisSettingsTitle, _super);
    function CommonAxisSettingsTitle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CommonAxisSettingsTitle.OptionName = "title";
    return CommonAxisSettingsTitle;
}(NestedOption));
var CommonPaneSettings = /** @class */ (function (_super) {
    __extends(CommonPaneSettings, _super);
    function CommonPaneSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CommonPaneSettings.OptionName = "commonPaneSettings";
    CommonPaneSettings.ExpectedChildren = {
        backgroundColor: { optionName: "backgroundColor", isCollectionItem: false },
        border: { optionName: "border", isCollectionItem: false },
        paneBorder: { optionName: "border", isCollectionItem: false }
    };
    return CommonPaneSettings;
}(NestedOption));
var CommonSeriesSettings = /** @class */ (function (_super) {
    __extends(CommonSeriesSettings, _super);
    function CommonSeriesSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CommonSeriesSettings.OptionName = "commonSeriesSettings";
    CommonSeriesSettings.ExpectedChildren = {
        aggregation: { optionName: "aggregation", isCollectionItem: false },
        border: { optionName: "border", isCollectionItem: false },
        color: { optionName: "color", isCollectionItem: false },
        commonSeriesSettingsHoverStyle: { optionName: "hoverStyle", isCollectionItem: false },
        commonSeriesSettingsLabel: { optionName: "label", isCollectionItem: false },
        commonSeriesSettingsSelectionStyle: { optionName: "selectionStyle", isCollectionItem: false },
        hoverStyle: { optionName: "hoverStyle", isCollectionItem: false },
        label: { optionName: "label", isCollectionItem: false },
        point: { optionName: "point", isCollectionItem: false },
        reduction: { optionName: "reduction", isCollectionItem: false },
        selectionStyle: { optionName: "selectionStyle", isCollectionItem: false },
        seriesBorder: { optionName: "border", isCollectionItem: false },
        valueErrorBar: { optionName: "valueErrorBar", isCollectionItem: false }
    };
    return CommonSeriesSettings;
}(NestedOption));
var CommonSeriesSettingsHoverStyle = /** @class */ (function (_super) {
    __extends(CommonSeriesSettingsHoverStyle, _super);
    function CommonSeriesSettingsHoverStyle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CommonSeriesSettingsHoverStyle.OptionName = "hoverStyle";
    CommonSeriesSettingsHoverStyle.ExpectedChildren = {
        border: { optionName: "border", isCollectionItem: false },
        color: { optionName: "color", isCollectionItem: false },
        hatching: { optionName: "hatching", isCollectionItem: false },
        seriesBorder: { optionName: "border", isCollectionItem: false }
    };
    return CommonSeriesSettingsHoverStyle;
}(NestedOption));
var CommonSeriesSettingsLabel = /** @class */ (function (_super) {
    __extends(CommonSeriesSettingsLabel, _super);
    function CommonSeriesSettingsLabel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CommonSeriesSettingsLabel.OptionName = "label";
    CommonSeriesSettingsLabel.ExpectedChildren = {
        argumentFormat: { optionName: "argumentFormat", isCollectionItem: false },
        border: { optionName: "border", isCollectionItem: false },
        connector: { optionName: "connector", isCollectionItem: false },
        font: { optionName: "font", isCollectionItem: false },
        format: { optionName: "format", isCollectionItem: false },
        seriesBorder: { optionName: "border", isCollectionItem: false }
    };
    return CommonSeriesSettingsLabel;
}(NestedOption));
var CommonSeriesSettingsSelectionStyle = /** @class */ (function (_super) {
    __extends(CommonSeriesSettingsSelectionStyle, _super);
    function CommonSeriesSettingsSelectionStyle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CommonSeriesSettingsSelectionStyle.OptionName = "selectionStyle";
    CommonSeriesSettingsSelectionStyle.ExpectedChildren = {
        border: { optionName: "border", isCollectionItem: false },
        color: { optionName: "color", isCollectionItem: false },
        hatching: { optionName: "hatching", isCollectionItem: false },
        seriesBorder: { optionName: "border", isCollectionItem: false }
    };
    return CommonSeriesSettingsSelectionStyle;
}(NestedOption));
var Connector = /** @class */ (function (_super) {
    __extends(Connector, _super);
    function Connector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Connector.OptionName = "connector";
    return Connector;
}(NestedOption));
var ConstantLine = /** @class */ (function (_super) {
    __extends(ConstantLine, _super);
    function ConstantLine() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ConstantLine.OptionName = "constantLines";
    ConstantLine.IsCollectionItem = true;
    return ConstantLine;
}(NestedOption));
var ConstantLineLabel = /** @class */ (function (_super) {
    __extends(ConstantLineLabel, _super);
    function ConstantLineLabel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ConstantLineLabel.OptionName = "label";
    return ConstantLineLabel;
}(NestedOption));
var ConstantLineStyle = /** @class */ (function (_super) {
    __extends(ConstantLineStyle, _super);
    function ConstantLineStyle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ConstantLineStyle.OptionName = "constantLineStyle";
    return ConstantLineStyle;
}(NestedOption));
var Crosshair = /** @class */ (function (_super) {
    __extends(Crosshair, _super);
    function Crosshair() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Crosshair.OptionName = "crosshair";
    Crosshair.ExpectedChildren = {
        horizontalLine: { optionName: "horizontalLine", isCollectionItem: false },
        horizontalLineLabel: { optionName: "label", isCollectionItem: false },
        label: { optionName: "label", isCollectionItem: false },
        verticalLine: { optionName: "verticalLine", isCollectionItem: false }
    };
    return Crosshair;
}(NestedOption));
var DataPrepareSettings = /** @class */ (function (_super) {
    __extends(DataPrepareSettings, _super);
    function DataPrepareSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataPrepareSettings.OptionName = "dataPrepareSettings";
    return DataPrepareSettings;
}(NestedOption));
var DragBoxStyle = /** @class */ (function (_super) {
    __extends(DragBoxStyle, _super);
    function DragBoxStyle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DragBoxStyle.OptionName = "dragBoxStyle";
    return DragBoxStyle;
}(NestedOption));
var Export = /** @class */ (function (_super) {
    __extends(Export, _super);
    function Export() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Export.OptionName = "export";
    return Export;
}(NestedOption));
var Font = /** @class */ (function (_super) {
    __extends(Font, _super);
    function Font() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Font.OptionName = "font";
    return Font;
}(NestedOption));
var Format = /** @class */ (function (_super) {
    __extends(Format, _super);
    function Format() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Format.OptionName = "format";
    return Format;
}(NestedOption));
var Grid = /** @class */ (function (_super) {
    __extends(Grid, _super);
    function Grid() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Grid.OptionName = "grid";
    return Grid;
}(NestedOption));
var Hatching = /** @class */ (function (_super) {
    __extends(Hatching, _super);
    function Hatching() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Hatching.OptionName = "hatching";
    return Hatching;
}(NestedOption));
var Height = /** @class */ (function (_super) {
    __extends(Height, _super);
    function Height() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Height.OptionName = "height";
    return Height;
}(NestedOption));
var HorizontalLine = /** @class */ (function (_super) {
    __extends(HorizontalLine, _super);
    function HorizontalLine() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HorizontalLine.OptionName = "horizontalLine";
    HorizontalLine.ExpectedChildren = {
        horizontalLineLabel: { optionName: "label", isCollectionItem: false },
        label: { optionName: "label", isCollectionItem: false }
    };
    return HorizontalLine;
}(NestedOption));
var HorizontalLineLabel = /** @class */ (function (_super) {
    __extends(HorizontalLineLabel, _super);
    function HorizontalLineLabel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HorizontalLineLabel.OptionName = "label";
    return HorizontalLineLabel;
}(NestedOption));
var HoverStyle = /** @class */ (function (_super) {
    __extends(HoverStyle, _super);
    function HoverStyle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HoverStyle.OptionName = "hoverStyle";
    return HoverStyle;
}(NestedOption));
var Image = /** @class */ (function (_super) {
    __extends(Image, _super);
    function Image() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Image.OptionName = "image";
    return Image;
}(NestedOption));
var Label = /** @class */ (function (_super) {
    __extends(Label, _super);
    function Label() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Label.OptionName = "label";
    Label.TemplateProps = [{
            tmplOption: "template",
            render: "render",
            component: "component",
            keyFn: "keyFn"
        }];
    return Label;
}(NestedOption));
var Legend = /** @class */ (function (_super) {
    __extends(Legend, _super);
    function Legend() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Legend.OptionName = "legend";
    Legend.ExpectedChildren = {
        annotationBorder: { optionName: "border", isCollectionItem: false },
        border: { optionName: "border", isCollectionItem: false },
        font: { optionName: "font", isCollectionItem: false },
        legendTitle: { optionName: "title", isCollectionItem: false },
        margin: { optionName: "margin", isCollectionItem: false },
        title: { optionName: "title", isCollectionItem: false }
    };
    Legend.TemplateProps = [{
            tmplOption: "markerTemplate",
            render: "markerRender",
            component: "markerComponent",
            keyFn: "markerKeyFn"
        }];
    return Legend;
}(NestedOption));
var LegendTitle = /** @class */ (function (_super) {
    __extends(LegendTitle, _super);
    function LegendTitle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LegendTitle.OptionName = "title";
    LegendTitle.ExpectedChildren = {
        font: { optionName: "font", isCollectionItem: false },
        legendTitleSubtitle: { optionName: "subtitle", isCollectionItem: false },
        margin: { optionName: "margin", isCollectionItem: false },
        subtitle: { optionName: "subtitle", isCollectionItem: false }
    };
    return LegendTitle;
}(NestedOption));
var LegendTitleSubtitle = /** @class */ (function (_super) {
    __extends(LegendTitleSubtitle, _super);
    function LegendTitleSubtitle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LegendTitleSubtitle.OptionName = "subtitle";
    LegendTitleSubtitle.ExpectedChildren = {
        font: { optionName: "font", isCollectionItem: false }
    };
    return LegendTitleSubtitle;
}(NestedOption));
var Length = /** @class */ (function (_super) {
    __extends(Length, _super);
    function Length() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Length.OptionName = "length";
    return Length;
}(NestedOption));
var LoadingIndicator = /** @class */ (function (_super) {
    __extends(LoadingIndicator, _super);
    function LoadingIndicator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LoadingIndicator.OptionName = "loadingIndicator";
    LoadingIndicator.DefaultsProps = {
        defaultShow: "show"
    };
    LoadingIndicator.ExpectedChildren = {
        font: { optionName: "font", isCollectionItem: false }
    };
    return LoadingIndicator;
}(NestedOption));
var Margin = /** @class */ (function (_super) {
    __extends(Margin, _super);
    function Margin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Margin.OptionName = "margin";
    return Margin;
}(NestedOption));
var MinorGrid = /** @class */ (function (_super) {
    __extends(MinorGrid, _super);
    function MinorGrid() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MinorGrid.OptionName = "minorGrid";
    return MinorGrid;
}(NestedOption));
var MinorTick = /** @class */ (function (_super) {
    __extends(MinorTick, _super);
    function MinorTick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MinorTick.OptionName = "minorTick";
    return MinorTick;
}(NestedOption));
var MinorTickInterval = /** @class */ (function (_super) {
    __extends(MinorTickInterval, _super);
    function MinorTickInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MinorTickInterval.OptionName = "minorTickInterval";
    return MinorTickInterval;
}(NestedOption));
var MinVisualRangeLength = /** @class */ (function (_super) {
    __extends(MinVisualRangeLength, _super);
    function MinVisualRangeLength() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MinVisualRangeLength.OptionName = "minVisualRangeLength";
    return MinVisualRangeLength;
}(NestedOption));
var Pane = /** @class */ (function (_super) {
    __extends(Pane, _super);
    function Pane() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Pane.OptionName = "panes";
    Pane.IsCollectionItem = true;
    return Pane;
}(NestedOption));
var PaneBorder = /** @class */ (function (_super) {
    __extends(PaneBorder, _super);
    function PaneBorder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PaneBorder.OptionName = "border";
    return PaneBorder;
}(NestedOption));
var Point = /** @class */ (function (_super) {
    __extends(Point, _super);
    function Point() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Point.OptionName = "point";
    Point.ExpectedChildren = {
        border: { optionName: "border", isCollectionItem: false },
        color: { optionName: "color", isCollectionItem: false },
        hoverStyle: { optionName: "hoverStyle", isCollectionItem: false },
        image: { optionName: "image", isCollectionItem: false },
        pointBorder: { optionName: "border", isCollectionItem: false },
        pointHoverStyle: { optionName: "hoverStyle", isCollectionItem: false },
        pointImage: { optionName: "image", isCollectionItem: false },
        pointSelectionStyle: { optionName: "selectionStyle", isCollectionItem: false },
        selectionStyle: { optionName: "selectionStyle", isCollectionItem: false }
    };
    return Point;
}(NestedOption));
var PointBorder = /** @class */ (function (_super) {
    __extends(PointBorder, _super);
    function PointBorder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PointBorder.OptionName = "border";
    return PointBorder;
}(NestedOption));
var PointHoverStyle = /** @class */ (function (_super) {
    __extends(PointHoverStyle, _super);
    function PointHoverStyle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PointHoverStyle.OptionName = "hoverStyle";
    PointHoverStyle.ExpectedChildren = {
        border: { optionName: "border", isCollectionItem: false },
        color: { optionName: "color", isCollectionItem: false },
        pointBorder: { optionName: "border", isCollectionItem: false }
    };
    return PointHoverStyle;
}(NestedOption));
var PointImage = /** @class */ (function (_super) {
    __extends(PointImage, _super);
    function PointImage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PointImage.OptionName = "image";
    PointImage.ExpectedChildren = {
        height: { optionName: "height", isCollectionItem: false },
        url: { optionName: "url", isCollectionItem: false },
        width: { optionName: "width", isCollectionItem: false }
    };
    return PointImage;
}(NestedOption));
var PointSelectionStyle = /** @class */ (function (_super) {
    __extends(PointSelectionStyle, _super);
    function PointSelectionStyle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PointSelectionStyle.OptionName = "selectionStyle";
    PointSelectionStyle.ExpectedChildren = {
        border: { optionName: "border", isCollectionItem: false },
        color: { optionName: "color", isCollectionItem: false },
        pointBorder: { optionName: "border", isCollectionItem: false }
    };
    return PointSelectionStyle;
}(NestedOption));
var Reduction = /** @class */ (function (_super) {
    __extends(Reduction, _super);
    function Reduction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Reduction.OptionName = "reduction";
    return Reduction;
}(NestedOption));
var ScrollBar = /** @class */ (function (_super) {
    __extends(ScrollBar, _super);
    function ScrollBar() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ScrollBar.OptionName = "scrollBar";
    return ScrollBar;
}(NestedOption));
var SelectionStyle = /** @class */ (function (_super) {
    __extends(SelectionStyle, _super);
    function SelectionStyle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SelectionStyle.OptionName = "selectionStyle";
    return SelectionStyle;
}(NestedOption));
var Series = /** @class */ (function (_super) {
    __extends(Series, _super);
    function Series() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Series.OptionName = "series";
    Series.IsCollectionItem = true;
    return Series;
}(NestedOption));
var SeriesBorder = /** @class */ (function (_super) {
    __extends(SeriesBorder, _super);
    function SeriesBorder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SeriesBorder.OptionName = "border";
    return SeriesBorder;
}(NestedOption));
var SeriesTemplate = /** @class */ (function (_super) {
    __extends(SeriesTemplate, _super);
    function SeriesTemplate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SeriesTemplate.OptionName = "seriesTemplate";
    return SeriesTemplate;
}(NestedOption));
var Shadow = /** @class */ (function (_super) {
    __extends(Shadow, _super);
    function Shadow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Shadow.OptionName = "shadow";
    return Shadow;
}(NestedOption));
var Size = /** @class */ (function (_super) {
    __extends(Size, _super);
    function Size() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Size.OptionName = "size";
    return Size;
}(NestedOption));
var Strip = /** @class */ (function (_super) {
    __extends(Strip, _super);
    function Strip() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Strip.OptionName = "strips";
    Strip.IsCollectionItem = true;
    return Strip;
}(NestedOption));
var StripLabel = /** @class */ (function (_super) {
    __extends(StripLabel, _super);
    function StripLabel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StripLabel.OptionName = "label";
    return StripLabel;
}(NestedOption));
var StripStyle = /** @class */ (function (_super) {
    __extends(StripStyle, _super);
    function StripStyle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StripStyle.OptionName = "stripStyle";
    StripStyle.ExpectedChildren = {
        label: { optionName: "label", isCollectionItem: false },
        stripStyleLabel: { optionName: "label", isCollectionItem: false }
    };
    return StripStyle;
}(NestedOption));
var StripStyleLabel = /** @class */ (function (_super) {
    __extends(StripStyleLabel, _super);
    function StripStyleLabel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StripStyleLabel.OptionName = "label";
    return StripStyleLabel;
}(NestedOption));
var Subtitle = /** @class */ (function (_super) {
    __extends(Subtitle, _super);
    function Subtitle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Subtitle.OptionName = "subtitle";
    return Subtitle;
}(NestedOption));
var Tick = /** @class */ (function (_super) {
    __extends(Tick, _super);
    function Tick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Tick.OptionName = "tick";
    return Tick;
}(NestedOption));
var TickInterval = /** @class */ (function (_super) {
    __extends(TickInterval, _super);
    function TickInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TickInterval.OptionName = "tickInterval";
    return TickInterval;
}(NestedOption));
var Title = /** @class */ (function (_super) {
    __extends(Title, _super);
    function Title() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Title.OptionName = "title";
    return Title;
}(NestedOption));
var Tooltip = /** @class */ (function (_super) {
    __extends(Tooltip, _super);
    function Tooltip() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Tooltip.OptionName = "tooltip";
    Tooltip.ExpectedChildren = {
        argumentFormat: { optionName: "argumentFormat", isCollectionItem: false },
        border: { optionName: "border", isCollectionItem: false },
        font: { optionName: "font", isCollectionItem: false },
        format: { optionName: "format", isCollectionItem: false },
        shadow: { optionName: "shadow", isCollectionItem: false },
        tooltipBorder: { optionName: "border", isCollectionItem: false }
    };
    Tooltip.TemplateProps = [{
            tmplOption: "contentTemplate",
            render: "contentRender",
            component: "contentComponent",
            keyFn: "contentKeyFn"
        }];
    return Tooltip;
}(NestedOption));
var TooltipBorder = /** @class */ (function (_super) {
    __extends(TooltipBorder, _super);
    function TooltipBorder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TooltipBorder.OptionName = "border";
    return TooltipBorder;
}(NestedOption));
var Url = /** @class */ (function (_super) {
    __extends(Url, _super);
    function Url() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Url.OptionName = "url";
    return Url;
}(NestedOption));
var ValueAxis = /** @class */ (function (_super) {
    __extends(ValueAxis, _super);
    function ValueAxis() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ValueAxis.OptionName = "valueAxis";
    ValueAxis.IsCollectionItem = true;
    ValueAxis.DefaultsProps = {
        defaultCategories: "categories",
        defaultVisualRange: "visualRange"
    };
    ValueAxis.ExpectedChildren = {
        axisConstantLineStyle: { optionName: "constantLineStyle", isCollectionItem: false },
        axisLabel: { optionName: "label", isCollectionItem: false },
        axisTitle: { optionName: "title", isCollectionItem: false },
        break: { optionName: "breaks", isCollectionItem: true },
        constantLine: { optionName: "constantLines", isCollectionItem: true },
        constantLineStyle: { optionName: "constantLineStyle", isCollectionItem: false },
        label: { optionName: "label", isCollectionItem: false },
        minorTickInterval: { optionName: "minorTickInterval", isCollectionItem: false },
        minVisualRangeLength: { optionName: "minVisualRangeLength", isCollectionItem: false },
        strip: { optionName: "strips", isCollectionItem: true },
        tickInterval: { optionName: "tickInterval", isCollectionItem: false },
        title: { optionName: "title", isCollectionItem: false },
        visualRange: { optionName: "visualRange", isCollectionItem: false },
        wholeRange: { optionName: "wholeRange", isCollectionItem: false }
    };
    return ValueAxis;
}(NestedOption));
var ValueErrorBar = /** @class */ (function (_super) {
    __extends(ValueErrorBar, _super);
    function ValueErrorBar() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ValueErrorBar.OptionName = "valueErrorBar";
    return ValueErrorBar;
}(NestedOption));
var VerticalLine = /** @class */ (function (_super) {
    __extends(VerticalLine, _super);
    function VerticalLine() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VerticalLine.OptionName = "verticalLine";
    VerticalLine.ExpectedChildren = {
        horizontalLineLabel: { optionName: "label", isCollectionItem: false },
        label: { optionName: "label", isCollectionItem: false }
    };
    return VerticalLine;
}(NestedOption));
var VisualRange = /** @class */ (function (_super) {
    __extends(VisualRange, _super);
    function VisualRange() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VisualRange.OptionName = "visualRange";
    VisualRange.DefaultsProps = {
        defaultEndValue: "endValue",
        defaultStartValue: "startValue"
    };
    return VisualRange;
}(NestedOption));
var WholeRange = /** @class */ (function (_super) {
    __extends(WholeRange, _super);
    function WholeRange() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WholeRange.OptionName = "wholeRange";
    WholeRange.DefaultsProps = {
        defaultEndValue: "endValue",
        defaultStartValue: "startValue"
    };
    return WholeRange;
}(NestedOption));
var Width = /** @class */ (function (_super) {
    __extends(Width, _super);
    function Width() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Width.OptionName = "width";
    return Width;
}(NestedOption));
var ZoomAndPan = /** @class */ (function (_super) {
    __extends(ZoomAndPan, _super);
    function ZoomAndPan() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZoomAndPan.OptionName = "zoomAndPan";
    ZoomAndPan.ExpectedChildren = {
        dragBoxStyle: { optionName: "dragBoxStyle", isCollectionItem: false }
    };
    return ZoomAndPan;
}(NestedOption));
export default Chart;
export { Chart, AdaptiveLayout, Aggregation, AggregationInterval, Animation, Annotation, AnnotationBorder, AnnotationImage, ArgumentAxis, ArgumentFormat, AxisConstantLineStyle, AxisConstantLineStyleLabel, AxisLabel, AxisTitle, BackgroundColor, Border, Break, BreakStyle, ChartTitle, ChartTitleSubtitle, Color, CommonAnnotationSettings, CommonAxisSettings, CommonAxisSettingsConstantLineStyle, CommonAxisSettingsConstantLineStyleLabel, CommonAxisSettingsLabel, CommonAxisSettingsTitle, CommonPaneSettings, CommonSeriesSettings, CommonSeriesSettingsHoverStyle, CommonSeriesSettingsLabel, CommonSeriesSettingsSelectionStyle, Connector, ConstantLine, ConstantLineLabel, ConstantLineStyle, Crosshair, DataPrepareSettings, DragBoxStyle, Export, Font, Format, Grid, Hatching, Height, HorizontalLine, HorizontalLineLabel, HoverStyle, Image, Label, Legend, LegendTitle, LegendTitleSubtitle, Length, LoadingIndicator, Margin, MinorGrid, MinorTick, MinorTickInterval, MinVisualRangeLength, Pane, PaneBorder, Point, PointBorder, PointHoverStyle, PointImage, PointSelectionStyle, Reduction, ScrollBar, SelectionStyle, Series, SeriesBorder, SeriesTemplate, Shadow, Size, Strip, StripLabel, StripStyle, StripStyleLabel, Subtitle, Tick, TickInterval, Title, Tooltip, TooltipBorder, Url, ValueAxis, ValueErrorBar, VerticalLine, VisualRange, WholeRange, Width, ZoomAndPan };
