/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use client";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import dxPivotGridFieldChooser from "devextreme/ui/pivot_grid_field_chooser";
import * as PropTypes from "prop-types";
import { Component as BaseComponent } from "./core/component";
import NestedOption from "./core/nested-option";
var PivotGridFieldChooser = /** @class */ (function (_super) {
    __extends(PivotGridFieldChooser, _super);
    function PivotGridFieldChooser() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._WidgetClass = dxPivotGridFieldChooser;
        _this.independentEvents = ["onContentReady", "onContextMenuPreparing", "onDisposing", "onInitialized"];
        _this._expectedChildren = {
            headerFilter: { optionName: "headerFilter", isCollectionItem: false },
            pivotGridFieldChooserTexts: { optionName: "texts", isCollectionItem: false },
            texts: { optionName: "texts", isCollectionItem: false }
        };
        return _this;
    }
    Object.defineProperty(PivotGridFieldChooser.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    return PivotGridFieldChooser;
}(BaseComponent));
PivotGridFieldChooser.propTypes = {
    accessKey: PropTypes.string,
    activeStateEnabled: PropTypes.bool,
    allowSearch: PropTypes.bool,
    applyChangesMode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "instantly",
            "onDemand"
        ])
    ]),
    disabled: PropTypes.bool,
    elementAttr: PropTypes.object,
    encodeHtml: PropTypes.bool,
    focusStateEnabled: PropTypes.bool,
    headerFilter: PropTypes.object,
    height: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ]),
    hint: PropTypes.string,
    hoverStateEnabled: PropTypes.bool,
    layout: PropTypes.oneOfType([
        PropTypes.number,
        PropTypes.oneOf([
            0,
            1,
            2
        ])
    ]),
    onContentReady: PropTypes.func,
    onContextMenuPreparing: PropTypes.func,
    onDisposing: PropTypes.func,
    onInitialized: PropTypes.func,
    onOptionChanged: PropTypes.func,
    rtlEnabled: PropTypes.bool,
    searchTimeout: PropTypes.number,
    tabIndex: PropTypes.number,
    texts: PropTypes.object,
    visible: PropTypes.bool,
    width: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ])
};
var HeaderFilter = /** @class */ (function (_super) {
    __extends(HeaderFilter, _super);
    function HeaderFilter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HeaderFilter.OptionName = "headerFilter";
    HeaderFilter.ExpectedChildren = {
        headerFilterTexts: { optionName: "texts", isCollectionItem: false },
        search: { optionName: "search", isCollectionItem: false },
        texts: { optionName: "texts", isCollectionItem: false }
    };
    return HeaderFilter;
}(NestedOption));
var HeaderFilterTexts = /** @class */ (function (_super) {
    __extends(HeaderFilterTexts, _super);
    function HeaderFilterTexts() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HeaderFilterTexts.OptionName = "texts";
    return HeaderFilterTexts;
}(NestedOption));
var PivotGridFieldChooserTexts = /** @class */ (function (_super) {
    __extends(PivotGridFieldChooserTexts, _super);
    function PivotGridFieldChooserTexts() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PivotGridFieldChooserTexts.OptionName = "texts";
    return PivotGridFieldChooserTexts;
}(NestedOption));
var Search = /** @class */ (function (_super) {
    __extends(Search, _super);
    function Search() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Search.OptionName = "search";
    return Search;
}(NestedOption));
var Texts = /** @class */ (function (_super) {
    __extends(Texts, _super);
    function Texts() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Texts.OptionName = "texts";
    return Texts;
}(NestedOption));
export default PivotGridFieldChooser;
export { PivotGridFieldChooser, HeaderFilter, HeaderFilterTexts, PivotGridFieldChooserTexts, Search, Texts };
