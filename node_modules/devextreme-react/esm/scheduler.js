/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use client";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import dxScheduler from "devextreme/ui/scheduler";
import * as PropTypes from "prop-types";
import { Component as BaseComponent } from "./core/component";
import NestedOption from "./core/nested-option";
var Scheduler = /** @class */ (function (_super) {
    __extends(Scheduler, _super);
    function Scheduler() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._WidgetClass = dxScheduler;
        _this.subscribableOptions = ["currentDate", "currentView"];
        _this.independentEvents = ["onAppointmentAdded", "onAppointmentAdding", "onAppointmentClick", "onAppointmentContextMenu", "onAppointmentDblClick", "onAppointmentDeleted", "onAppointmentDeleting", "onAppointmentFormOpening", "onAppointmentRendered", "onAppointmentTooltipShowing", "onAppointmentUpdated", "onAppointmentUpdating", "onCellClick", "onCellContextMenu", "onContentReady", "onDisposing", "onInitialized"];
        _this._defaults = {
            defaultCurrentDate: "currentDate",
            defaultCurrentView: "currentView"
        };
        _this._expectedChildren = {
            appointmentDragging: { optionName: "appointmentDragging", isCollectionItem: false },
            editing: { optionName: "editing", isCollectionItem: false },
            resource: { optionName: "resources", isCollectionItem: true },
            scrolling: { optionName: "scrolling", isCollectionItem: false },
            view: { optionName: "views", isCollectionItem: true }
        };
        _this._templateProps = [{
                tmplOption: "appointmentCollectorTemplate",
                render: "appointmentCollectorRender",
                component: "appointmentCollectorComponent",
                keyFn: "appointmentCollectorKeyFn"
            }, {
                tmplOption: "appointmentTemplate",
                render: "appointmentRender",
                component: "appointmentComponent",
                keyFn: "appointmentKeyFn"
            }, {
                tmplOption: "appointmentTooltipTemplate",
                render: "appointmentTooltipRender",
                component: "appointmentTooltipComponent",
                keyFn: "appointmentTooltipKeyFn"
            }, {
                tmplOption: "dataCellTemplate",
                render: "dataCellRender",
                component: "dataCellComponent",
                keyFn: "dataCellKeyFn"
            }, {
                tmplOption: "dateCellTemplate",
                render: "dateCellRender",
                component: "dateCellComponent",
                keyFn: "dateCellKeyFn"
            }, {
                tmplOption: "dropDownAppointmentTemplate",
                render: "dropDownAppointmentRender",
                component: "dropDownAppointmentComponent",
                keyFn: "dropDownAppointmentKeyFn"
            }, {
                tmplOption: "resourceCellTemplate",
                render: "resourceCellRender",
                component: "resourceCellComponent",
                keyFn: "resourceCellKeyFn"
            }, {
                tmplOption: "timeCellTemplate",
                render: "timeCellRender",
                component: "timeCellComponent",
                keyFn: "timeCellKeyFn"
            }];
        return _this;
    }
    Object.defineProperty(Scheduler.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    return Scheduler;
}(BaseComponent));
Scheduler.propTypes = {
    accessKey: PropTypes.string,
    adaptivityEnabled: PropTypes.bool,
    allDayExpr: PropTypes.string,
    allDayPanelMode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "all",
            "allDay",
            "hidden"
        ])
    ]),
    appointmentDragging: PropTypes.object,
    cellDuration: PropTypes.number,
    crossScrollingEnabled: PropTypes.bool,
    currentDate: PropTypes.oneOfType([
        PropTypes.instanceOf(Date),
        PropTypes.number,
        PropTypes.string
    ]),
    currentView: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "agenda",
            "day",
            "month",
            "timelineDay",
            "timelineMonth",
            "timelineWeek",
            "timelineWorkWeek",
            "week",
            "workWeek"
        ])
    ]),
    customizeDateNavigatorText: PropTypes.func,
    dateSerializationFormat: PropTypes.string,
    descriptionExpr: PropTypes.string,
    disabled: PropTypes.bool,
    editing: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.object
    ]),
    elementAttr: PropTypes.object,
    endDateExpr: PropTypes.string,
    endDateTimeZoneExpr: PropTypes.string,
    endDayHour: PropTypes.number,
    firstDayOfWeek: PropTypes.oneOfType([
        PropTypes.number,
        PropTypes.oneOf([
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ])
    ]),
    focusStateEnabled: PropTypes.bool,
    groupByDate: PropTypes.bool,
    groups: PropTypes.array,
    height: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ]),
    hint: PropTypes.string,
    indicatorUpdateInterval: PropTypes.number,
    max: PropTypes.oneOfType([
        PropTypes.instanceOf(Date),
        PropTypes.number,
        PropTypes.string
    ]),
    maxAppointmentsPerCell: PropTypes.oneOfType([
        PropTypes.number,
        PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.oneOf([
                "auto",
                "unlimited"
            ])
        ])
    ]),
    min: PropTypes.oneOfType([
        PropTypes.instanceOf(Date),
        PropTypes.number,
        PropTypes.string
    ]),
    noDataText: PropTypes.string,
    offset: PropTypes.number,
    onAppointmentAdded: PropTypes.func,
    onAppointmentAdding: PropTypes.func,
    onAppointmentClick: PropTypes.func,
    onAppointmentContextMenu: PropTypes.func,
    onAppointmentDblClick: PropTypes.func,
    onAppointmentDeleted: PropTypes.func,
    onAppointmentDeleting: PropTypes.func,
    onAppointmentFormOpening: PropTypes.func,
    onAppointmentRendered: PropTypes.func,
    onAppointmentTooltipShowing: PropTypes.func,
    onAppointmentUpdated: PropTypes.func,
    onAppointmentUpdating: PropTypes.func,
    onCellClick: PropTypes.func,
    onCellContextMenu: PropTypes.func,
    onContentReady: PropTypes.func,
    onDisposing: PropTypes.func,
    onInitialized: PropTypes.func,
    onOptionChanged: PropTypes.func,
    recurrenceEditMode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "dialog",
            "occurrence",
            "series"
        ])
    ]),
    recurrenceExceptionExpr: PropTypes.string,
    recurrenceRuleExpr: PropTypes.string,
    remoteFiltering: PropTypes.bool,
    resources: PropTypes.array,
    rtlEnabled: PropTypes.bool,
    scrolling: PropTypes.object,
    selectedCellData: PropTypes.array,
    shadeUntilCurrentTime: PropTypes.bool,
    showAllDayPanel: PropTypes.bool,
    showCurrentTimeIndicator: PropTypes.bool,
    startDateExpr: PropTypes.string,
    startDateTimeZoneExpr: PropTypes.string,
    startDayHour: PropTypes.number,
    tabIndex: PropTypes.number,
    textExpr: PropTypes.string,
    timeZone: PropTypes.string,
    useDropDownViewSwitcher: PropTypes.bool,
    views: PropTypes.array,
    visible: PropTypes.bool,
    width: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ])
};
var AppointmentDragging = /** @class */ (function (_super) {
    __extends(AppointmentDragging, _super);
    function AppointmentDragging() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppointmentDragging.OptionName = "appointmentDragging";
    return AppointmentDragging;
}(NestedOption));
var Editing = /** @class */ (function (_super) {
    __extends(Editing, _super);
    function Editing() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Editing.OptionName = "editing";
    return Editing;
}(NestedOption));
var Resource = /** @class */ (function (_super) {
    __extends(Resource, _super);
    function Resource() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Resource.OptionName = "resources";
    Resource.IsCollectionItem = true;
    return Resource;
}(NestedOption));
var Scrolling = /** @class */ (function (_super) {
    __extends(Scrolling, _super);
    function Scrolling() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Scrolling.OptionName = "scrolling";
    return Scrolling;
}(NestedOption));
var View = /** @class */ (function (_super) {
    __extends(View, _super);
    function View() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    View.OptionName = "views";
    View.IsCollectionItem = true;
    View.ExpectedChildren = {
        scrolling: { optionName: "scrolling", isCollectionItem: false }
    };
    View.TemplateProps = [{
            tmplOption: "appointmentCollectorTemplate",
            render: "appointmentCollectorRender",
            component: "appointmentCollectorComponent",
            keyFn: "appointmentCollectorKeyFn"
        }, {
            tmplOption: "appointmentTemplate",
            render: "appointmentRender",
            component: "appointmentComponent",
            keyFn: "appointmentKeyFn"
        }, {
            tmplOption: "appointmentTooltipTemplate",
            render: "appointmentTooltipRender",
            component: "appointmentTooltipComponent",
            keyFn: "appointmentTooltipKeyFn"
        }, {
            tmplOption: "dataCellTemplate",
            render: "dataCellRender",
            component: "dataCellComponent",
            keyFn: "dataCellKeyFn"
        }, {
            tmplOption: "dateCellTemplate",
            render: "dateCellRender",
            component: "dateCellComponent",
            keyFn: "dateCellKeyFn"
        }, {
            tmplOption: "dropDownAppointmentTemplate",
            render: "dropDownAppointmentRender",
            component: "dropDownAppointmentComponent",
            keyFn: "dropDownAppointmentKeyFn"
        }, {
            tmplOption: "resourceCellTemplate",
            render: "resourceCellRender",
            component: "resourceCellComponent",
            keyFn: "resourceCellKeyFn"
        }, {
            tmplOption: "timeCellTemplate",
            render: "timeCellRender",
            component: "timeCellComponent",
            keyFn: "timeCellKeyFn"
        }];
    return View;
}(NestedOption));
export default Scheduler;
export { Scheduler, AppointmentDragging, Editing, Resource, Scrolling, View };
