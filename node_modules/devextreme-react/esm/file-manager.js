/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use client";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import dxFileManager from "devextreme/ui/file_manager";
import * as PropTypes from "prop-types";
import { Component as BaseComponent } from "./core/component";
import NestedOption from "./core/nested-option";
var FileManager = /** @class */ (function (_super) {
    __extends(FileManager, _super);
    function FileManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._WidgetClass = dxFileManager;
        _this.independentEvents = ["onContentReady", "onContextMenuItemClick", "onContextMenuShowing", "onDirectoryCreated", "onDirectoryCreating", "onDisposing", "onErrorOccurred", "onFileUploaded", "onFileUploading", "onInitialized", "onItemCopied", "onItemCopying", "onItemDeleted", "onItemDeleting", "onItemDownloading", "onItemMoved", "onItemMoving", "onItemRenamed", "onItemRenaming", "onSelectedFileOpened", "onToolbarItemClick"];
        _this._expectedChildren = {
            contextMenu: { optionName: "contextMenu", isCollectionItem: false },
            itemView: { optionName: "itemView", isCollectionItem: false },
            notifications: { optionName: "notifications", isCollectionItem: false },
            permissions: { optionName: "permissions", isCollectionItem: false },
            toolbar: { optionName: "toolbar", isCollectionItem: false },
            upload: { optionName: "upload", isCollectionItem: false }
        };
        return _this;
    }
    Object.defineProperty(FileManager.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    return FileManager;
}(BaseComponent));
FileManager.propTypes = {
    accessKey: PropTypes.string,
    activeStateEnabled: PropTypes.bool,
    allowedFileExtensions: PropTypes.array,
    contextMenu: PropTypes.object,
    currentPath: PropTypes.string,
    currentPathKeys: PropTypes.array,
    customizeDetailColumns: PropTypes.func,
    customizeThumbnail: PropTypes.func,
    disabled: PropTypes.bool,
    elementAttr: PropTypes.object,
    focusedItemKey: PropTypes.string,
    focusStateEnabled: PropTypes.bool,
    height: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ]),
    hint: PropTypes.string,
    hoverStateEnabled: PropTypes.bool,
    itemView: PropTypes.object,
    notifications: PropTypes.object,
    onContentReady: PropTypes.func,
    onContextMenuItemClick: PropTypes.func,
    onContextMenuShowing: PropTypes.func,
    onCurrentDirectoryChanged: PropTypes.func,
    onDirectoryCreated: PropTypes.func,
    onDirectoryCreating: PropTypes.func,
    onDisposing: PropTypes.func,
    onErrorOccurred: PropTypes.func,
    onFileUploaded: PropTypes.func,
    onFileUploading: PropTypes.func,
    onFocusedItemChanged: PropTypes.func,
    onInitialized: PropTypes.func,
    onItemCopied: PropTypes.func,
    onItemCopying: PropTypes.func,
    onItemDeleted: PropTypes.func,
    onItemDeleting: PropTypes.func,
    onItemDownloading: PropTypes.func,
    onItemMoved: PropTypes.func,
    onItemMoving: PropTypes.func,
    onItemRenamed: PropTypes.func,
    onItemRenaming: PropTypes.func,
    onOptionChanged: PropTypes.func,
    onSelectedFileOpened: PropTypes.func,
    onSelectionChanged: PropTypes.func,
    onToolbarItemClick: PropTypes.func,
    permissions: PropTypes.object,
    rootFolderName: PropTypes.string,
    rtlEnabled: PropTypes.bool,
    selectedItemKeys: PropTypes.array,
    selectionMode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "single",
            "multiple"
        ])
    ]),
    tabIndex: PropTypes.number,
    toolbar: PropTypes.object,
    upload: PropTypes.object,
    visible: PropTypes.bool,
    width: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ])
};
var Column = /** @class */ (function (_super) {
    __extends(Column, _super);
    function Column() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Column.OptionName = "columns";
    Column.IsCollectionItem = true;
    return Column;
}(NestedOption));
var ContextMenu = /** @class */ (function (_super) {
    __extends(ContextMenu, _super);
    function ContextMenu() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ContextMenu.OptionName = "contextMenu";
    ContextMenu.ExpectedChildren = {
        contextMenuItem: { optionName: "items", isCollectionItem: true },
        item: { optionName: "items", isCollectionItem: true }
    };
    return ContextMenu;
}(NestedOption));
var ContextMenuItem = /** @class */ (function (_super) {
    __extends(ContextMenuItem, _super);
    function ContextMenuItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ContextMenuItem.OptionName = "items";
    ContextMenuItem.IsCollectionItem = true;
    return ContextMenuItem;
}(NestedOption));
var Details = /** @class */ (function (_super) {
    __extends(Details, _super);
    function Details() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Details.OptionName = "details";
    Details.ExpectedChildren = {
        column: { optionName: "columns", isCollectionItem: true }
    };
    return Details;
}(NestedOption));
var FileSelectionItem = /** @class */ (function (_super) {
    __extends(FileSelectionItem, _super);
    function FileSelectionItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FileSelectionItem.OptionName = "fileSelectionItems";
    FileSelectionItem.IsCollectionItem = true;
    return FileSelectionItem;
}(NestedOption));
var Item = /** @class */ (function (_super) {
    __extends(Item, _super);
    function Item() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Item.OptionName = "items";
    Item.IsCollectionItem = true;
    return Item;
}(NestedOption));
var ItemView = /** @class */ (function (_super) {
    __extends(ItemView, _super);
    function ItemView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ItemView.OptionName = "itemView";
    ItemView.ExpectedChildren = {
        details: { optionName: "details", isCollectionItem: false }
    };
    return ItemView;
}(NestedOption));
var Notifications = /** @class */ (function (_super) {
    __extends(Notifications, _super);
    function Notifications() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Notifications.OptionName = "notifications";
    return Notifications;
}(NestedOption));
var Permissions = /** @class */ (function (_super) {
    __extends(Permissions, _super);
    function Permissions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Permissions.OptionName = "permissions";
    return Permissions;
}(NestedOption));
var Toolbar = /** @class */ (function (_super) {
    __extends(Toolbar, _super);
    function Toolbar() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Toolbar.OptionName = "toolbar";
    Toolbar.ExpectedChildren = {
        fileSelectionItem: { optionName: "fileSelectionItems", isCollectionItem: true },
        item: { optionName: "items", isCollectionItem: true },
        toolbarItem: { optionName: "items", isCollectionItem: true }
    };
    return Toolbar;
}(NestedOption));
var ToolbarItem = /** @class */ (function (_super) {
    __extends(ToolbarItem, _super);
    function ToolbarItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToolbarItem.OptionName = "items";
    ToolbarItem.IsCollectionItem = true;
    return ToolbarItem;
}(NestedOption));
var Upload = /** @class */ (function (_super) {
    __extends(Upload, _super);
    function Upload() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Upload.OptionName = "upload";
    return Upload;
}(NestedOption));
export default FileManager;
export { FileManager, Column, ContextMenu, ContextMenuItem, Details, FileSelectionItem, Item, ItemView, Notifications, Permissions, Toolbar, ToolbarItem, Upload };
