/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
import dxPivotGrid, { Properties } from "devextreme/ui/pivot_grid";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import NestedOption from "./core/nested-option";
import type { CellClickEvent, CellPreparedEvent, ContentReadyEvent, ContextMenuPreparingEvent, DisposingEvent, ExportingEvent, InitializedEvent } from "devextreme/ui/pivot_grid";
import type { HeaderFilterSearchConfig } from "devextreme/common/grids";
declare type ReplaceFieldTypes<TSource, TReplacement> = {
    [P in keyof TSource]: P extends keyof TReplacement ? TReplacement[P] : TSource[P];
};
declare type IPivotGridOptionsNarrowedEvents = {
    onCellClick?: ((e: CellClickEvent) => void);
    onCellPrepared?: ((e: CellPreparedEvent) => void);
    onContentReady?: ((e: ContentReadyEvent) => void);
    onContextMenuPreparing?: ((e: ContextMenuPreparingEvent) => void);
    onDisposing?: ((e: DisposingEvent) => void);
    onExporting?: ((e: ExportingEvent) => void);
    onInitialized?: ((e: InitializedEvent) => void);
};
declare type IPivotGridOptions = React.PropsWithChildren<ReplaceFieldTypes<Properties, IPivotGridOptionsNarrowedEvents> & IHtmlOptions>;
declare class PivotGrid extends BaseComponent<React.PropsWithChildren<IPivotGridOptions>> {
    get instance(): dxPivotGrid;
    protected _WidgetClass: typeof dxPivotGrid;
    protected independentEvents: string[];
    protected _expectedChildren: {
        export: {
            optionName: string;
            isCollectionItem: boolean;
        };
        fieldChooser: {
            optionName: string;
            isCollectionItem: boolean;
        };
        fieldPanel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        headerFilter: {
            optionName: string;
            isCollectionItem: boolean;
        };
        loadPanel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        pivotGridTexts: {
            optionName: string;
            isCollectionItem: boolean;
        };
        scrolling: {
            optionName: string;
            isCollectionItem: boolean;
        };
        stateStoring: {
            optionName: string;
            isCollectionItem: boolean;
        };
        texts: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IExportProps = React.PropsWithChildren<{
    enabled?: boolean;
}>;
declare class Export extends NestedOption<IExportProps> {
    static OptionName: string;
}
declare type IFieldChooserProps = React.PropsWithChildren<{
    allowSearch?: boolean;
    applyChangesMode?: "instantly" | "onDemand";
    enabled?: boolean;
    height?: number;
    layout?: 0 | 1 | 2;
    searchTimeout?: number;
    texts?: Record<string, any> | {
        allFields?: string;
        columnFields?: string;
        dataFields?: string;
        filterFields?: string;
        rowFields?: string;
    };
    title?: string;
    width?: number;
}>;
declare class FieldChooser extends NestedOption<IFieldChooserProps> {
    static OptionName: string;
    static ExpectedChildren: {
        fieldChooserTexts: {
            optionName: string;
            isCollectionItem: boolean;
        };
        texts: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IFieldChooserTextsProps = React.PropsWithChildren<{
    allFields?: string;
    columnFields?: string;
    dataFields?: string;
    filterFields?: string;
    rowFields?: string;
}>;
declare class FieldChooserTexts extends NestedOption<IFieldChooserTextsProps> {
    static OptionName: string;
}
declare type IFieldPanelProps = React.PropsWithChildren<{
    allowFieldDragging?: boolean;
    showColumnFields?: boolean;
    showDataFields?: boolean;
    showFilterFields?: boolean;
    showRowFields?: boolean;
    texts?: Record<string, any> | {
        columnFieldArea?: string;
        dataFieldArea?: string;
        filterFieldArea?: string;
        rowFieldArea?: string;
    };
    visible?: boolean;
}>;
declare class FieldPanel extends NestedOption<IFieldPanelProps> {
    static OptionName: string;
    static ExpectedChildren: {
        fieldPanelTexts: {
            optionName: string;
            isCollectionItem: boolean;
        };
        texts: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IFieldPanelTextsProps = React.PropsWithChildren<{
    columnFieldArea?: string;
    dataFieldArea?: string;
    filterFieldArea?: string;
    rowFieldArea?: string;
}>;
declare class FieldPanelTexts extends NestedOption<IFieldPanelTextsProps> {
    static OptionName: string;
}
declare type IHeaderFilterProps = React.PropsWithChildren<{
    allowSearch?: boolean;
    allowSelectAll?: boolean;
    height?: number;
    search?: HeaderFilterSearchConfig;
    searchTimeout?: number;
    showRelevantValues?: boolean;
    texts?: Record<string, any> | {
        cancel?: string;
        emptyValue?: string;
        ok?: string;
    };
    width?: number;
}>;
declare class HeaderFilter extends NestedOption<IHeaderFilterProps> {
    static OptionName: string;
    static ExpectedChildren: {
        headerFilterTexts: {
            optionName: string;
            isCollectionItem: boolean;
        };
        search: {
            optionName: string;
            isCollectionItem: boolean;
        };
        texts: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IHeaderFilterTextsProps = React.PropsWithChildren<{
    cancel?: string;
    emptyValue?: string;
    ok?: string;
}>;
declare class HeaderFilterTexts extends NestedOption<IHeaderFilterTextsProps> {
    static OptionName: string;
}
declare type ILoadPanelProps = React.PropsWithChildren<{
    enabled?: boolean;
    height?: number;
    indicatorSrc?: string;
    shading?: boolean;
    shadingColor?: string;
    showIndicator?: boolean;
    showPane?: boolean;
    text?: string;
    width?: number;
}>;
declare class LoadPanel extends NestedOption<ILoadPanelProps> {
    static OptionName: string;
}
declare type IPivotGridTextsProps = React.PropsWithChildren<{
    collapseAll?: string;
    dataNotAvailable?: string;
    expandAll?: string;
    exportToExcel?: string;
    grandTotal?: string;
    noData?: string;
    removeAllSorting?: string;
    showFieldChooser?: string;
    sortColumnBySummary?: string;
    sortRowBySummary?: string;
    total?: string;
}>;
declare class PivotGridTexts extends NestedOption<IPivotGridTextsProps> {
    static OptionName: string;
}
declare type IScrollingProps = React.PropsWithChildren<{
    mode?: "standard" | "virtual";
    useNative?: boolean | "auto";
}>;
declare class Scrolling extends NestedOption<IScrollingProps> {
    static OptionName: string;
}
declare type ISearchProps = React.PropsWithChildren<{
    editorOptions?: any;
    enabled?: boolean;
    mode?: "contains" | "startswith" | "equals";
    timeout?: number;
}>;
declare class Search extends NestedOption<ISearchProps> {
    static OptionName: string;
}
declare type IStateStoringProps = React.PropsWithChildren<{
    customLoad?: (() => any);
    customSave?: ((state: any) => void);
    enabled?: boolean;
    savingTimeout?: number;
    storageKey?: string;
    type?: "custom" | "localStorage" | "sessionStorage";
}>;
declare class StateStoring extends NestedOption<IStateStoringProps> {
    static OptionName: string;
}
declare type ITextsProps = React.PropsWithChildren<{
    allFields?: string;
    columnFields?: string;
    dataFields?: string;
    filterFields?: string;
    rowFields?: string;
    columnFieldArea?: string;
    dataFieldArea?: string;
    filterFieldArea?: string;
    rowFieldArea?: string;
    cancel?: string;
    emptyValue?: string;
    ok?: string;
    collapseAll?: string;
    dataNotAvailable?: string;
    expandAll?: string;
    exportToExcel?: string;
    grandTotal?: string;
    noData?: string;
    removeAllSorting?: string;
    showFieldChooser?: string;
    sortColumnBySummary?: string;
    sortRowBySummary?: string;
    total?: string;
}>;
declare class Texts extends NestedOption<ITextsProps> {
    static OptionName: string;
}
export default PivotGrid;
export { PivotGrid, IPivotGridOptions, Export, IExportProps, FieldChooser, IFieldChooserProps, FieldChooserTexts, IFieldChooserTextsProps, FieldPanel, IFieldPanelProps, FieldPanelTexts, IFieldPanelTextsProps, HeaderFilter, IHeaderFilterProps, HeaderFilterTexts, IHeaderFilterTextsProps, LoadPanel, ILoadPanelProps, PivotGridTexts, IPivotGridTextsProps, Scrolling, IScrollingProps, Search, ISearchProps, StateStoring, IStateStoringProps, Texts, ITextsProps };
import type * as PivotGridTypes from 'devextreme/ui/pivot_grid_types';
export { PivotGridTypes };
