/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use client";
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileUploader = void 0;
var file_uploader_1 = __importDefault(require("devextreme/ui/file_uploader"));
var PropTypes = __importStar(require("prop-types"));
var component_1 = require("./core/component");
var FileUploader = /** @class */ (function (_super) {
    __extends(FileUploader, _super);
    function FileUploader() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._WidgetClass = file_uploader_1.default;
        _this.subscribableOptions = ["value"];
        _this.independentEvents = ["onBeforeSend", "onContentReady", "onDisposing", "onDropZoneEnter", "onDropZoneLeave", "onFilesUploaded", "onInitialized", "onProgress", "onUploadAborted", "onUploaded", "onUploadError", "onUploadStarted", "onValueChanged"];
        _this._defaults = {
            defaultValue: "value"
        };
        return _this;
    }
    Object.defineProperty(FileUploader.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    return FileUploader;
}(component_1.Component));
exports.FileUploader = FileUploader;
FileUploader.propTypes = {
    abortUpload: PropTypes.func,
    accept: PropTypes.string,
    accessKey: PropTypes.string,
    activeStateEnabled: PropTypes.bool,
    allowCanceling: PropTypes.bool,
    allowedFileExtensions: PropTypes.array,
    chunkSize: PropTypes.number,
    disabled: PropTypes.bool,
    elementAttr: PropTypes.object,
    focusStateEnabled: PropTypes.bool,
    height: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ]),
    hint: PropTypes.string,
    hoverStateEnabled: PropTypes.bool,
    invalidFileExtensionMessage: PropTypes.string,
    invalidMaxFileSizeMessage: PropTypes.string,
    invalidMinFileSizeMessage: PropTypes.string,
    isDirty: PropTypes.bool,
    isValid: PropTypes.bool,
    labelText: PropTypes.string,
    maxFileSize: PropTypes.number,
    minFileSize: PropTypes.number,
    multiple: PropTypes.bool,
    name: PropTypes.string,
    onBeforeSend: PropTypes.func,
    onContentReady: PropTypes.func,
    onDisposing: PropTypes.func,
    onDropZoneEnter: PropTypes.func,
    onDropZoneLeave: PropTypes.func,
    onFilesUploaded: PropTypes.func,
    onInitialized: PropTypes.func,
    onOptionChanged: PropTypes.func,
    onProgress: PropTypes.func,
    onUploadAborted: PropTypes.func,
    onUploaded: PropTypes.func,
    onUploadError: PropTypes.func,
    onUploadStarted: PropTypes.func,
    onValueChanged: PropTypes.func,
    progress: PropTypes.number,
    readOnly: PropTypes.bool,
    readyToUploadMessage: PropTypes.string,
    rtlEnabled: PropTypes.bool,
    selectButtonText: PropTypes.string,
    showFileList: PropTypes.bool,
    tabIndex: PropTypes.number,
    uploadAbortedMessage: PropTypes.string,
    uploadButtonText: PropTypes.string,
    uploadChunk: PropTypes.func,
    uploadedMessage: PropTypes.string,
    uploadFailedMessage: PropTypes.string,
    uploadFile: PropTypes.func,
    uploadMethod: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "POST",
            "PUT"
        ])
    ]),
    uploadMode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "instantly",
            "useButtons",
            "useForm"
        ])
    ]),
    uploadUrl: PropTypes.string,
    validationErrors: PropTypes.array,
    validationStatus: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
            "valid",
            "invalid",
            "pending"
        ])
    ]),
    value: PropTypes.array,
    visible: PropTypes.bool,
    width: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ])
};
exports.default = FileUploader;
