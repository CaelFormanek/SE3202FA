/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
import dxChart, { Properties } from "devextreme/viz/chart";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import NestedOption from "./core/nested-option";
import type { ArgumentAxisClickEvent, DisposingEvent, DoneEvent, DrawnEvent, ExportedEvent, ExportingEvent, FileSavingEvent, IncidentOccurredEvent, InitializedEvent, LegendClickEvent, PointClickEvent, SeriesClickEvent, TooltipHiddenEvent, TooltipShownEvent, ZoomEndEvent, ZoomStartEvent, chartPointAggregationInfoObject, chartSeriesObject, dxChartAnnotationConfig, chartPointObject } from "devextreme/viz/chart";
import type { Font as ChartsFont, ScaleBreak, ChartsColor, LegendItem } from "devextreme/common/charts";
import type { template } from "devextreme/core/templates/template";
import type { ChartSeries } from "devextreme/viz/common";
import type * as CommonChartTypes from "devextreme/common/charts";
import type * as LocalizationTypes from "devextreme/localization";
declare type ReplaceFieldTypes<TSource, TReplacement> = {
    [P in keyof TSource]: P extends keyof TReplacement ? TReplacement[P] : TSource[P];
};
declare type IChartOptionsNarrowedEvents = {
    onArgumentAxisClick?: ((e: ArgumentAxisClickEvent) => void);
    onDisposing?: ((e: DisposingEvent) => void);
    onDone?: ((e: DoneEvent) => void);
    onDrawn?: ((e: DrawnEvent) => void);
    onExported?: ((e: ExportedEvent) => void);
    onExporting?: ((e: ExportingEvent) => void);
    onFileSaving?: ((e: FileSavingEvent) => void);
    onIncidentOccurred?: ((e: IncidentOccurredEvent) => void);
    onInitialized?: ((e: InitializedEvent) => void);
    onLegendClick?: ((e: LegendClickEvent) => void);
    onPointClick?: ((e: PointClickEvent) => void);
    onSeriesClick?: ((e: SeriesClickEvent) => void);
    onTooltipHidden?: ((e: TooltipHiddenEvent) => void);
    onTooltipShown?: ((e: TooltipShownEvent) => void);
    onZoomEnd?: ((e: ZoomEndEvent) => void);
    onZoomStart?: ((e: ZoomStartEvent) => void);
};
declare type IChartOptions = React.PropsWithChildren<ReplaceFieldTypes<Properties, IChartOptionsNarrowedEvents> & IHtmlOptions & {
    defaultArgumentAxis?: Record<string, any>;
    defaultLoadingIndicator?: Record<string, any>;
    defaultValueAxis?: Array<Record<string, any>> | Record<string, any>;
    onArgumentAxisChange?: (value: Record<string, any>) => void;
    onLoadingIndicatorChange?: (value: Record<string, any>) => void;
    onValueAxisChange?: (value: Array<Record<string, any>> | Record<string, any>) => void;
}>;
declare class Chart extends BaseComponent<React.PropsWithChildren<IChartOptions>> {
    get instance(): dxChart;
    protected _WidgetClass: typeof dxChart;
    protected useRequestAnimationFrameFlag: boolean;
    protected subscribableOptions: string[];
    protected independentEvents: string[];
    protected _defaults: {
        defaultArgumentAxis: string;
        defaultLoadingIndicator: string;
        defaultValueAxis: string;
    };
    protected _expectedChildren: {
        adaptiveLayout: {
            optionName: string;
            isCollectionItem: boolean;
        };
        animation: {
            optionName: string;
            isCollectionItem: boolean;
        };
        annotation: {
            optionName: string;
            isCollectionItem: boolean;
        };
        argumentAxis: {
            optionName: string;
            isCollectionItem: boolean;
        };
        chartTitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        commonAnnotationSettings: {
            optionName: string;
            isCollectionItem: boolean;
        };
        commonAxisSettings: {
            optionName: string;
            isCollectionItem: boolean;
        };
        commonPaneSettings: {
            optionName: string;
            isCollectionItem: boolean;
        };
        commonSeriesSettings: {
            optionName: string;
            isCollectionItem: boolean;
        };
        crosshair: {
            optionName: string;
            isCollectionItem: boolean;
        };
        dataPrepareSettings: {
            optionName: string;
            isCollectionItem: boolean;
        };
        export: {
            optionName: string;
            isCollectionItem: boolean;
        };
        legend: {
            optionName: string;
            isCollectionItem: boolean;
        };
        loadingIndicator: {
            optionName: string;
            isCollectionItem: boolean;
        };
        margin: {
            optionName: string;
            isCollectionItem: boolean;
        };
        pane: {
            optionName: string;
            isCollectionItem: boolean;
        };
        scrollBar: {
            optionName: string;
            isCollectionItem: boolean;
        };
        series: {
            optionName: string;
            isCollectionItem: boolean;
        };
        seriesTemplate: {
            optionName: string;
            isCollectionItem: boolean;
        };
        size: {
            optionName: string;
            isCollectionItem: boolean;
        };
        title: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tooltip: {
            optionName: string;
            isCollectionItem: boolean;
        };
        valueAxis: {
            optionName: string;
            isCollectionItem: boolean;
        };
        zoomAndPan: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IAdaptiveLayoutProps = React.PropsWithChildren<{
    height?: number;
    keepLabels?: boolean;
    width?: number;
}>;
declare class AdaptiveLayout extends NestedOption<IAdaptiveLayoutProps> {
    static OptionName: string;
}
declare type IAggregationProps = React.PropsWithChildren<{
    calculate?: ((aggregationInfo: chartPointAggregationInfoObject, series: chartSeriesObject) => Record<string, any> | Array<Record<string, any>>);
    enabled?: boolean;
    method?: "avg" | "count" | "max" | "min" | "ohlc" | "range" | "sum" | "custom";
}>;
declare class Aggregation extends NestedOption<IAggregationProps> {
    static OptionName: string;
}
declare type IAggregationIntervalProps = React.PropsWithChildren<{
    days?: number;
    hours?: number;
    milliseconds?: number;
    minutes?: number;
    months?: number;
    quarters?: number;
    seconds?: number;
    weeks?: number;
    years?: number;
}>;
declare class AggregationInterval extends NestedOption<IAggregationIntervalProps> {
    static OptionName: string;
}
declare type IAnimationProps = React.PropsWithChildren<{
    duration?: number;
    easing?: "easeOutCubic" | "linear";
    enabled?: boolean;
    maxPointCountSupported?: number;
}>;
declare class Animation extends NestedOption<IAnimationProps> {
    static OptionName: string;
}
declare type IAnnotationProps = React.PropsWithChildren<{
    allowDragging?: boolean;
    argument?: Date | number | string;
    arrowLength?: number;
    arrowWidth?: number;
    axis?: string;
    border?: Record<string, any> | {
        color?: string;
        cornerRadius?: number;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    color?: string;
    customizeTooltip?: ((annotation: dxChartAnnotationConfig | any) => Record<string, any>);
    data?: any;
    description?: string;
    font?: ChartsFont;
    height?: number;
    image?: Record<string, any> | string | {
        height?: number;
        url?: string;
        width?: number;
    };
    name?: string;
    offsetX?: number;
    offsetY?: number;
    opacity?: number;
    paddingLeftRight?: number;
    paddingTopBottom?: number;
    series?: string;
    shadow?: Record<string, any> | {
        blur?: number;
        color?: string;
        offsetX?: number;
        offsetY?: number;
        opacity?: number;
    };
    template?: ((annotation: dxChartAnnotationConfig | any, element: any) => string | any) | template;
    text?: string;
    textOverflow?: "ellipsis" | "hide" | "none";
    tooltipEnabled?: boolean;
    tooltipTemplate?: ((annotation: dxChartAnnotationConfig | any, element: any) => string | any) | template;
    type?: "text" | "image" | "custom";
    value?: Date | number | string;
    width?: number;
    wordWrap?: "normal" | "breakWord" | "none";
    x?: number;
    y?: number;
    render?: (...params: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
    tooltipRender?: (...params: any) => React.ReactNode;
    tooltipComponent?: React.ComponentType<any>;
    tooltipKeyFn?: (data: any) => string;
}>;
declare class Annotation extends NestedOption<IAnnotationProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        annotationBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
        annotationImage: {
            optionName: string;
            isCollectionItem: boolean;
        };
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        image: {
            optionName: string;
            isCollectionItem: boolean;
        };
        shadow: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare type IAnnotationBorderProps = React.PropsWithChildren<{
    color?: string;
    cornerRadius?: number;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    opacity?: number;
    visible?: boolean;
    width?: number;
}>;
declare class AnnotationBorder extends NestedOption<IAnnotationBorderProps> {
    static OptionName: string;
}
declare type IAnnotationImageProps = React.PropsWithChildren<{
    height?: number;
    url?: string;
    width?: number;
}>;
declare class AnnotationImage extends NestedOption<IAnnotationImageProps> {
    static OptionName: string;
}
declare type IArgumentAxisProps = React.PropsWithChildren<{
    aggregateByCategory?: boolean;
    aggregatedPointsPosition?: "betweenTicks" | "crossTicks";
    aggregationGroupWidth?: number;
    aggregationInterval?: number | Record<string, any> | "day" | "hour" | "millisecond" | "minute" | "month" | "quarter" | "second" | "week" | "year" | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    allowDecimals?: boolean;
    argumentType?: "datetime" | "numeric" | "string";
    axisDivisionFactor?: number;
    breaks?: Array<ScaleBreak> | {
        endValue?: Date | number | string;
        startValue?: Date | number | string;
    }[];
    breakStyle?: Record<string, any> | {
        color?: string;
        line?: "straight" | "waved";
        width?: number;
    };
    categories?: Array<Date | number | string>;
    color?: string;
    constantLines?: Array<Record<string, any>> | {
        color?: string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        displayBehindSeries?: boolean;
        extendAxis?: boolean;
        label?: Record<string, any> | {
            font?: ChartsFont;
            horizontalAlignment?: "center" | "left" | "right";
            position?: "inside" | "outside";
            text?: string;
            verticalAlignment?: "bottom" | "center" | "top";
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        value?: Date | number | string;
        width?: number;
    }[];
    constantLineStyle?: Record<string, any> | {
        color?: string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        label?: Record<string, any> | {
            font?: ChartsFont;
            horizontalAlignment?: "center" | "left" | "right";
            position?: "inside" | "outside";
            verticalAlignment?: "bottom" | "center" | "top";
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        width?: number;
    };
    customPosition?: Date | number | string;
    customPositionAxis?: string;
    discreteAxisDivisionMode?: "betweenLabels" | "crossLabels";
    endOnTick?: boolean;
    grid?: Record<string, any> | {
        color?: string;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    holidays?: Array<Date | string> | Array<number>;
    hoverMode?: "allArgumentPoints" | "none";
    inverted?: boolean;
    label?: Record<string, any> | {
        alignment?: "center" | "left" | "right";
        customizeHint?: ((argument: {
            value: Date | number | string;
            valueText: string;
        }) => string);
        customizeText?: ((argument: {
            value: Date | number | string;
            valueText: string;
        }) => string);
        displayMode?: "rotate" | "stagger" | "standard";
        font?: ChartsFont;
        format?: LocalizationTypes.Format;
        indentFromAxis?: number;
        overlappingBehavior?: "rotate" | "stagger" | "none" | "hide";
        position?: "inside" | "outside" | "bottom" | "left" | "right" | "top";
        rotationAngle?: number;
        staggeringSpacing?: number;
        template?: ((data: {
            value: Date | number | string;
            valueText: string;
        }, element: any) => string | any) | template;
        textOverflow?: "ellipsis" | "hide" | "none";
        visible?: boolean;
        wordWrap?: "normal" | "breakWord" | "none";
    };
    linearThreshold?: number;
    logarithmBase?: number;
    maxValueMargin?: number;
    minorGrid?: Record<string, any> | {
        color?: string;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    minorTick?: Record<string, any> | {
        color?: string;
        length?: number;
        opacity?: number;
        shift?: number;
        visible?: boolean;
        width?: number;
    };
    minorTickCount?: number;
    minorTickInterval?: number | Record<string, any> | "day" | "hour" | "millisecond" | "minute" | "month" | "quarter" | "second" | "week" | "year" | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    minValueMargin?: number;
    minVisualRangeLength?: number | Record<string, any> | "day" | "hour" | "millisecond" | "minute" | "month" | "quarter" | "second" | "week" | "year" | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    offset?: number;
    opacity?: number;
    placeholderSize?: number;
    position?: "bottom" | "left" | "right" | "top";
    singleWorkdays?: Array<Date | string> | Array<number>;
    strips?: Array<Record<string, any>> | {
        color?: string;
        endValue?: Date | number | string;
        label?: Record<string, any> | {
            font?: ChartsFont;
            horizontalAlignment?: "center" | "left" | "right";
            text?: string;
            verticalAlignment?: "bottom" | "center" | "top";
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        startValue?: Date | number | string;
    }[];
    stripStyle?: Record<string, any> | {
        label?: Record<string, any> | {
            font?: ChartsFont;
            horizontalAlignment?: "center" | "left" | "right";
            verticalAlignment?: "bottom" | "center" | "top";
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
    };
    tick?: Record<string, any> | {
        color?: string;
        length?: number;
        opacity?: number;
        shift?: number;
        visible?: boolean;
        width?: number;
    };
    tickInterval?: number | Record<string, any> | "day" | "hour" | "millisecond" | "minute" | "month" | "quarter" | "second" | "week" | "year" | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    title?: Record<string, any> | string | {
        alignment?: "center" | "left" | "right";
        font?: ChartsFont;
        margin?: number;
        text?: string;
        textOverflow?: "ellipsis" | "hide" | "none";
        wordWrap?: "normal" | "breakWord" | "none";
    };
    type?: "continuous" | "discrete" | "logarithmic";
    valueMarginsEnabled?: boolean;
    visible?: boolean;
    visualRange?: Array<Date | number | string> | CommonChartTypes.VisualRange;
    visualRangeUpdateMode?: "auto" | "keep" | "reset" | "shift";
    wholeRange?: Array<Date | number | string> | CommonChartTypes.VisualRange;
    width?: number;
    workdaysOnly?: boolean;
    workWeek?: Array<number>;
    defaultCategories?: Array<Date | number | string>;
    onCategoriesChange?: (value: Array<Date | number | string>) => void;
    defaultVisualRange?: Array<Date | number | string> | CommonChartTypes.VisualRange;
    onVisualRangeChange?: (value: Array<Date | number | string> | CommonChartTypes.VisualRange) => void;
}>;
declare class ArgumentAxis extends NestedOption<IArgumentAxisProps> {
    static OptionName: string;
    static DefaultsProps: {
        defaultCategories: string;
        defaultVisualRange: string;
    };
    static ExpectedChildren: {
        aggregationInterval: {
            optionName: string;
            isCollectionItem: boolean;
        };
        axisConstantLineStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        axisLabel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        axisTitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        break: {
            optionName: string;
            isCollectionItem: boolean;
        };
        breakStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        constantLine: {
            optionName: string;
            isCollectionItem: boolean;
        };
        constantLineStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        grid: {
            optionName: string;
            isCollectionItem: boolean;
        };
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
        minorGrid: {
            optionName: string;
            isCollectionItem: boolean;
        };
        minorTick: {
            optionName: string;
            isCollectionItem: boolean;
        };
        minorTickInterval: {
            optionName: string;
            isCollectionItem: boolean;
        };
        minVisualRangeLength: {
            optionName: string;
            isCollectionItem: boolean;
        };
        strip: {
            optionName: string;
            isCollectionItem: boolean;
        };
        stripStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tick: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tickInterval: {
            optionName: string;
            isCollectionItem: boolean;
        };
        title: {
            optionName: string;
            isCollectionItem: boolean;
        };
        visualRange: {
            optionName: string;
            isCollectionItem: boolean;
        };
        wholeRange: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IArgumentFormatProps = React.PropsWithChildren<{
    currency?: string;
    formatter?: ((value: number | Date) => string);
    parser?: ((value: string) => number | Date);
    precision?: number;
    type?: "billions" | "currency" | "day" | "decimal" | "exponential" | "fixedPoint" | "largeNumber" | "longDate" | "longTime" | "millions" | "millisecond" | "month" | "monthAndDay" | "monthAndYear" | "percent" | "quarter" | "quarterAndYear" | "shortDate" | "shortTime" | "thousands" | "trillions" | "year" | "dayOfWeek" | "hour" | "longDateLongTime" | "minute" | "second" | "shortDateShortTime";
    useCurrencyAccountingStyle?: boolean;
}>;
declare class ArgumentFormat extends NestedOption<IArgumentFormatProps> {
    static OptionName: string;
}
declare type IAxisConstantLineStyleProps = React.PropsWithChildren<{
    color?: string;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    label?: Record<string, any> | {
        font?: ChartsFont;
        horizontalAlignment?: "center" | "left" | "right";
        position?: "inside" | "outside";
        verticalAlignment?: "bottom" | "center" | "top";
        visible?: boolean;
    };
    paddingLeftRight?: number;
    paddingTopBottom?: number;
    width?: number;
}>;
declare class AxisConstantLineStyle extends NestedOption<IAxisConstantLineStyleProps> {
    static OptionName: string;
}
declare type IAxisConstantLineStyleLabelProps = React.PropsWithChildren<{
    font?: ChartsFont;
    horizontalAlignment?: "center" | "left" | "right";
    position?: "inside" | "outside";
    verticalAlignment?: "bottom" | "center" | "top";
    visible?: boolean;
}>;
declare class AxisConstantLineStyleLabel extends NestedOption<IAxisConstantLineStyleLabelProps> {
    static OptionName: string;
}
declare type IAxisLabelProps = React.PropsWithChildren<{
    alignment?: "center" | "left" | "right";
    customizeHint?: ((argument: {
        value: Date | number | string;
        valueText: string;
    }) => string);
    customizeText?: ((argument: {
        value: Date | number | string;
        valueText: string;
    }) => string);
    displayMode?: "rotate" | "stagger" | "standard";
    font?: ChartsFont;
    format?: LocalizationTypes.Format;
    indentFromAxis?: number;
    overlappingBehavior?: "rotate" | "stagger" | "none" | "hide";
    position?: "inside" | "outside" | "bottom" | "left" | "right" | "top";
    rotationAngle?: number;
    staggeringSpacing?: number;
    template?: ((data: {
        value: Date | number | string;
        valueText: string;
    }, element: any) => string | any) | template;
    textOverflow?: "ellipsis" | "hide" | "none";
    visible?: boolean;
    wordWrap?: "normal" | "breakWord" | "none";
    render?: (...params: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}>;
declare class AxisLabel extends NestedOption<IAxisLabelProps> {
    static OptionName: string;
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare type IAxisTitleProps = React.PropsWithChildren<{
    alignment?: "center" | "left" | "right";
    font?: ChartsFont;
    margin?: number;
    text?: string;
    textOverflow?: "ellipsis" | "hide" | "none";
    wordWrap?: "normal" | "breakWord" | "none";
}>;
declare class AxisTitle extends NestedOption<IAxisTitleProps> {
    static OptionName: string;
}
declare type IBackgroundColorProps = React.PropsWithChildren<{
    base?: string;
    fillId?: string;
}>;
declare class BackgroundColor extends NestedOption<IBackgroundColorProps> {
    static OptionName: string;
}
declare type IBorderProps = React.PropsWithChildren<{
    color?: string;
    cornerRadius?: number;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    opacity?: number;
    visible?: boolean;
    width?: number;
    bottom?: boolean;
    left?: boolean;
    right?: boolean;
    top?: boolean;
}>;
declare class Border extends NestedOption<IBorderProps> {
    static OptionName: string;
}
declare type IBreakProps = React.PropsWithChildren<{
    endValue?: Date | number | string;
    startValue?: Date | number | string;
}>;
declare class Break extends NestedOption<IBreakProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare type IBreakStyleProps = React.PropsWithChildren<{
    color?: string;
    line?: "straight" | "waved";
    width?: number;
}>;
declare class BreakStyle extends NestedOption<IBreakStyleProps> {
    static OptionName: string;
}
declare type IChartTitleProps = React.PropsWithChildren<{
    font?: ChartsFont;
    horizontalAlignment?: "center" | "left" | "right";
    margin?: number | Record<string, any> | {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    };
    placeholderSize?: number;
    subtitle?: Record<string, any> | string | {
        font?: ChartsFont;
        offset?: number;
        text?: string;
        textOverflow?: "ellipsis" | "hide" | "none";
        wordWrap?: "normal" | "breakWord" | "none";
    };
    text?: string;
    textOverflow?: "ellipsis" | "hide" | "none";
    verticalAlignment?: "bottom" | "top";
    wordWrap?: "normal" | "breakWord" | "none";
}>;
declare class ChartTitle extends NestedOption<IChartTitleProps> {
    static OptionName: string;
    static ExpectedChildren: {
        chartTitleSubtitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        margin: {
            optionName: string;
            isCollectionItem: boolean;
        };
        subtitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IChartTitleSubtitleProps = React.PropsWithChildren<{
    font?: ChartsFont;
    offset?: number;
    text?: string;
    textOverflow?: "ellipsis" | "hide" | "none";
    wordWrap?: "normal" | "breakWord" | "none";
}>;
declare class ChartTitleSubtitle extends NestedOption<IChartTitleSubtitleProps> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IColorProps = React.PropsWithChildren<{
    base?: string;
    fillId?: string;
}>;
declare class Color extends NestedOption<IColorProps> {
    static OptionName: string;
}
declare type ICommonAnnotationSettingsProps = React.PropsWithChildren<{
    allowDragging?: boolean;
    argument?: Date | number | string;
    arrowLength?: number;
    arrowWidth?: number;
    axis?: string;
    border?: Record<string, any> | {
        color?: string;
        cornerRadius?: number;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    color?: string;
    customizeTooltip?: ((annotation: dxChartAnnotationConfig | any) => Record<string, any>);
    data?: any;
    description?: string;
    font?: ChartsFont;
    height?: number;
    image?: Record<string, any> | string | {
        height?: number;
        url?: string;
        width?: number;
    };
    offsetX?: number;
    offsetY?: number;
    opacity?: number;
    paddingLeftRight?: number;
    paddingTopBottom?: number;
    series?: string;
    shadow?: Record<string, any> | {
        blur?: number;
        color?: string;
        offsetX?: number;
        offsetY?: number;
        opacity?: number;
    };
    template?: ((annotation: dxChartAnnotationConfig | any, element: any) => string | any) | template;
    text?: string;
    textOverflow?: "ellipsis" | "hide" | "none";
    tooltipEnabled?: boolean;
    tooltipTemplate?: ((annotation: dxChartAnnotationConfig | any, element: any) => string | any) | template;
    type?: "text" | "image" | "custom";
    value?: Date | number | string;
    width?: number;
    wordWrap?: "normal" | "breakWord" | "none";
    x?: number;
    y?: number;
    render?: (...params: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
    tooltipRender?: (...params: any) => React.ReactNode;
    tooltipComponent?: React.ComponentType<any>;
    tooltipKeyFn?: (data: any) => string;
}>;
declare class CommonAnnotationSettings extends NestedOption<ICommonAnnotationSettingsProps> {
    static OptionName: string;
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare type ICommonAxisSettingsProps = React.PropsWithChildren<{
    aggregatedPointsPosition?: "betweenTicks" | "crossTicks";
    allowDecimals?: boolean;
    breakStyle?: Record<string, any> | {
        color?: string;
        line?: "straight" | "waved";
        width?: number;
    };
    color?: string;
    constantLineStyle?: Record<string, any> | {
        color?: string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        label?: Record<string, any> | {
            font?: ChartsFont;
            position?: "inside" | "outside";
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        width?: number;
    };
    discreteAxisDivisionMode?: "betweenLabels" | "crossLabels";
    endOnTick?: boolean;
    grid?: Record<string, any> | {
        color?: string;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    inverted?: boolean;
    label?: Record<string, any> | {
        alignment?: "center" | "left" | "right";
        displayMode?: "rotate" | "stagger" | "standard";
        font?: ChartsFont;
        indentFromAxis?: number;
        overlappingBehavior?: "rotate" | "stagger" | "none" | "hide";
        position?: "inside" | "outside" | "bottom" | "left" | "right" | "top";
        rotationAngle?: number;
        staggeringSpacing?: number;
        template?: ((data: {
            value: Date | number | string;
            valueText: string;
        }, element: any) => string | any) | template;
        textOverflow?: "ellipsis" | "hide" | "none";
        visible?: boolean;
        wordWrap?: "normal" | "breakWord" | "none";
    };
    maxValueMargin?: number;
    minorGrid?: Record<string, any> | {
        color?: string;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    minorTick?: Record<string, any> | {
        color?: string;
        length?: number;
        opacity?: number;
        shift?: number;
        visible?: boolean;
        width?: number;
    };
    minValueMargin?: number;
    opacity?: number;
    placeholderSize?: number;
    stripStyle?: Record<string, any> | {
        label?: Record<string, any> | {
            font?: ChartsFont;
            horizontalAlignment?: "center" | "left" | "right";
            verticalAlignment?: "bottom" | "center" | "top";
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
    };
    tick?: Record<string, any> | {
        color?: string;
        length?: number;
        opacity?: number;
        shift?: number;
        visible?: boolean;
        width?: number;
    };
    title?: Record<string, any> | {
        alignment?: "center" | "left" | "right";
        font?: ChartsFont;
        margin?: number;
        textOverflow?: "ellipsis" | "hide" | "none";
        wordWrap?: "normal" | "breakWord" | "none";
    };
    valueMarginsEnabled?: boolean;
    visible?: boolean;
    width?: number;
}>;
declare class CommonAxisSettings extends NestedOption<ICommonAxisSettingsProps> {
    static OptionName: string;
    static ExpectedChildren: {
        commonAxisSettingsConstantLineStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        commonAxisSettingsLabel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        commonAxisSettingsTitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        constantLineStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
        title: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type ICommonAxisSettingsConstantLineStyleProps = React.PropsWithChildren<{
    color?: string;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    label?: Record<string, any> | {
        font?: ChartsFont;
        position?: "inside" | "outside";
        visible?: boolean;
    };
    paddingLeftRight?: number;
    paddingTopBottom?: number;
    width?: number;
}>;
declare class CommonAxisSettingsConstantLineStyle extends NestedOption<ICommonAxisSettingsConstantLineStyleProps> {
    static OptionName: string;
    static ExpectedChildren: {
        commonAxisSettingsConstantLineStyleLabel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type ICommonAxisSettingsConstantLineStyleLabelProps = React.PropsWithChildren<{
    font?: ChartsFont;
    position?: "inside" | "outside";
    visible?: boolean;
}>;
declare class CommonAxisSettingsConstantLineStyleLabel extends NestedOption<ICommonAxisSettingsConstantLineStyleLabelProps> {
    static OptionName: string;
}
declare type ICommonAxisSettingsLabelProps = React.PropsWithChildren<{
    alignment?: "center" | "left" | "right";
    displayMode?: "rotate" | "stagger" | "standard";
    font?: ChartsFont;
    indentFromAxis?: number;
    overlappingBehavior?: "rotate" | "stagger" | "none" | "hide";
    position?: "inside" | "outside" | "bottom" | "left" | "right" | "top";
    rotationAngle?: number;
    staggeringSpacing?: number;
    template?: ((data: {
        value: Date | number | string;
        valueText: string;
    }, element: any) => string | any) | template;
    textOverflow?: "ellipsis" | "hide" | "none";
    visible?: boolean;
    wordWrap?: "normal" | "breakWord" | "none";
    render?: (...params: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}>;
declare class CommonAxisSettingsLabel extends NestedOption<ICommonAxisSettingsLabelProps> {
    static OptionName: string;
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare type ICommonAxisSettingsTitleProps = React.PropsWithChildren<{
    alignment?: "center" | "left" | "right";
    font?: ChartsFont;
    margin?: number;
    textOverflow?: "ellipsis" | "hide" | "none";
    wordWrap?: "normal" | "breakWord" | "none";
}>;
declare class CommonAxisSettingsTitle extends NestedOption<ICommonAxisSettingsTitleProps> {
    static OptionName: string;
}
declare type ICommonPaneSettingsProps = React.PropsWithChildren<{
    backgroundColor?: ChartsColor | string;
    border?: Record<string, any> | {
        bottom?: boolean;
        color?: string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        left?: boolean;
        opacity?: number;
        right?: boolean;
        top?: boolean;
        visible?: boolean;
        width?: number;
    };
}>;
declare class CommonPaneSettings extends NestedOption<ICommonPaneSettingsProps> {
    static OptionName: string;
    static ExpectedChildren: {
        backgroundColor: {
            optionName: string;
            isCollectionItem: boolean;
        };
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        paneBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type ICommonSeriesSettingsProps = React.PropsWithChildren<{
    aggregation?: Record<string, any> | {
        calculate?: ((aggregationInfo: chartPointAggregationInfoObject, series: chartSeriesObject) => Record<string, any> | Array<Record<string, any>>);
        enabled?: boolean;
        method?: "avg" | "count" | "max" | "min" | "ohlc" | "range" | "sum" | "custom";
    };
    area?: any;
    argumentField?: string;
    axis?: string;
    bar?: any;
    barOverlapGroup?: string;
    barPadding?: number;
    barWidth?: number;
    border?: Record<string, any> | {
        color?: string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        visible?: boolean;
        width?: number;
    };
    bubble?: any;
    candlestick?: any;
    closeValueField?: string;
    color?: ChartsColor | string;
    cornerRadius?: number;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    fullstackedarea?: any;
    fullstackedbar?: any;
    fullstackedline?: any;
    fullstackedspline?: any;
    fullstackedsplinearea?: any;
    highValueField?: string;
    hoverMode?: "allArgumentPoints" | "allSeriesPoints" | "excludePoints" | "includePoints" | "nearestPoint" | "none" | "onlyPoint";
    hoverStyle?: Record<string, any> | {
        border?: Record<string, any> | {
            color?: string;
            dashStyle?: "dash" | "dot" | "longDash" | "solid";
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        hatching?: Record<string, any> | {
            direction?: "left" | "none" | "right";
            opacity?: number;
            step?: number;
            width?: number;
        };
        highlight?: boolean;
        width?: number;
    };
    ignoreEmptyPoints?: boolean;
    innerColor?: string;
    label?: Record<string, any> | {
        alignment?: "center" | "left" | "right";
        argumentFormat?: LocalizationTypes.Format;
        backgroundColor?: string;
        border?: Record<string, any> | {
            color?: string;
            dashStyle?: "dash" | "dot" | "longDash" | "solid";
            visible?: boolean;
            width?: number;
        };
        connector?: Record<string, any> | {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        customizeText?: ((pointInfo: any) => string);
        displayFormat?: string;
        font?: ChartsFont;
        format?: LocalizationTypes.Format;
        horizontalOffset?: number;
        position?: "inside" | "outside";
        rotationAngle?: number;
        showForZeroValues?: boolean;
        verticalOffset?: number;
        visible?: boolean;
    };
    line?: any;
    lowValueField?: string;
    maxLabelCount?: number;
    minBarSize?: number;
    opacity?: number;
    openValueField?: string;
    pane?: string;
    point?: Record<string, any> | {
        border?: Record<string, any> | {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string;
        hoverMode?: "allArgumentPoints" | "allSeriesPoints" | "none" | "onlyPoint";
        hoverStyle?: Record<string, any> | {
            border?: Record<string, any> | {
                color?: string;
                visible?: boolean;
                width?: number;
            };
            color?: ChartsColor | string;
            size?: number;
        };
        image?: Record<string, any> | string | {
            height?: number | Record<string, any> | {
                rangeMaxPoint?: number;
                rangeMinPoint?: number;
            };
            url?: Record<string, any> | string | {
                rangeMaxPoint?: string;
                rangeMinPoint?: string;
            };
            width?: number | Record<string, any> | {
                rangeMaxPoint?: number;
                rangeMinPoint?: number;
            };
        };
        selectionMode?: "allArgumentPoints" | "allSeriesPoints" | "none" | "onlyPoint";
        selectionStyle?: Record<string, any> | {
            border?: Record<string, any> | {
                color?: string;
                visible?: boolean;
                width?: number;
            };
            color?: ChartsColor | string;
            size?: number;
        };
        size?: number;
        symbol?: "circle" | "cross" | "polygon" | "square" | "triangle" | "triangleDown" | "triangleUp";
        visible?: boolean;
    };
    rangearea?: any;
    rangebar?: any;
    rangeValue1Field?: string;
    rangeValue2Field?: string;
    reduction?: Record<string, any> | {
        color?: string;
        level?: "close" | "high" | "low" | "open";
    };
    scatter?: any;
    selectionMode?: "allArgumentPoints" | "allSeriesPoints" | "excludePoints" | "includePoints" | "none" | "onlyPoint";
    selectionStyle?: Record<string, any> | {
        border?: Record<string, any> | {
            color?: string;
            dashStyle?: "dash" | "dot" | "longDash" | "solid";
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        hatching?: Record<string, any> | {
            direction?: "left" | "none" | "right";
            opacity?: number;
            step?: number;
            width?: number;
        };
        highlight?: boolean;
        width?: number;
    };
    showInLegend?: boolean;
    sizeField?: string;
    spline?: any;
    splinearea?: any;
    stack?: string;
    stackedarea?: any;
    stackedbar?: any;
    stackedline?: any;
    stackedspline?: any;
    stackedsplinearea?: any;
    steparea?: any;
    stepline?: any;
    stock?: any;
    tagField?: string;
    type?: "area" | "bar" | "bubble" | "candlestick" | "fullstackedarea" | "fullstackedbar" | "fullstackedline" | "fullstackedspline" | "fullstackedsplinearea" | "line" | "rangearea" | "rangebar" | "scatter" | "spline" | "splinearea" | "stackedarea" | "stackedbar" | "stackedline" | "stackedspline" | "stackedsplinearea" | "steparea" | "stepline" | "stock";
    valueErrorBar?: Record<string, any> | {
        color?: string;
        displayMode?: "auto" | "high" | "low" | "none";
        edgeLength?: number;
        highValueField?: string;
        lineWidth?: number;
        lowValueField?: string;
        opacity?: number;
        type?: "fixed" | "percent" | "stdDeviation" | "stdError" | "variance";
        value?: number;
    };
    valueField?: string;
    visible?: boolean;
    width?: number;
}>;
declare class CommonSeriesSettings extends NestedOption<ICommonSeriesSettingsProps> {
    static OptionName: string;
    static ExpectedChildren: {
        aggregation: {
            optionName: string;
            isCollectionItem: boolean;
        };
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        color: {
            optionName: string;
            isCollectionItem: boolean;
        };
        commonSeriesSettingsHoverStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        commonSeriesSettingsLabel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        commonSeriesSettingsSelectionStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        hoverStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
        point: {
            optionName: string;
            isCollectionItem: boolean;
        };
        reduction: {
            optionName: string;
            isCollectionItem: boolean;
        };
        selectionStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        seriesBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
        valueErrorBar: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type ICommonSeriesSettingsHoverStyleProps = React.PropsWithChildren<{
    border?: Record<string, any> | {
        color?: string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        visible?: boolean;
        width?: number;
    };
    color?: ChartsColor | string;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    hatching?: Record<string, any> | {
        direction?: "left" | "none" | "right";
        opacity?: number;
        step?: number;
        width?: number;
    };
    highlight?: boolean;
    width?: number;
}>;
declare class CommonSeriesSettingsHoverStyle extends NestedOption<ICommonSeriesSettingsHoverStyleProps> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        color: {
            optionName: string;
            isCollectionItem: boolean;
        };
        hatching: {
            optionName: string;
            isCollectionItem: boolean;
        };
        seriesBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type ICommonSeriesSettingsLabelProps = React.PropsWithChildren<{
    alignment?: "center" | "left" | "right";
    argumentFormat?: LocalizationTypes.Format;
    backgroundColor?: string;
    border?: Record<string, any> | {
        color?: string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        visible?: boolean;
        width?: number;
    };
    connector?: Record<string, any> | {
        color?: string;
        visible?: boolean;
        width?: number;
    };
    customizeText?: ((pointInfo: any) => string);
    displayFormat?: string;
    font?: ChartsFont;
    format?: LocalizationTypes.Format;
    horizontalOffset?: number;
    position?: "inside" | "outside";
    rotationAngle?: number;
    showForZeroValues?: boolean;
    verticalOffset?: number;
    visible?: boolean;
}>;
declare class CommonSeriesSettingsLabel extends NestedOption<ICommonSeriesSettingsLabelProps> {
    static OptionName: string;
    static ExpectedChildren: {
        argumentFormat: {
            optionName: string;
            isCollectionItem: boolean;
        };
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        connector: {
            optionName: string;
            isCollectionItem: boolean;
        };
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        format: {
            optionName: string;
            isCollectionItem: boolean;
        };
        seriesBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type ICommonSeriesSettingsSelectionStyleProps = React.PropsWithChildren<{
    border?: Record<string, any> | {
        color?: string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        visible?: boolean;
        width?: number;
    };
    color?: ChartsColor | string;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    hatching?: Record<string, any> | {
        direction?: "left" | "none" | "right";
        opacity?: number;
        step?: number;
        width?: number;
    };
    highlight?: boolean;
    width?: number;
}>;
declare class CommonSeriesSettingsSelectionStyle extends NestedOption<ICommonSeriesSettingsSelectionStyleProps> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        color: {
            optionName: string;
            isCollectionItem: boolean;
        };
        hatching: {
            optionName: string;
            isCollectionItem: boolean;
        };
        seriesBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IConnectorProps = React.PropsWithChildren<{
    color?: string;
    visible?: boolean;
    width?: number;
}>;
declare class Connector extends NestedOption<IConnectorProps> {
    static OptionName: string;
}
declare type IConstantLineProps = React.PropsWithChildren<{
    color?: string;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    displayBehindSeries?: boolean;
    extendAxis?: boolean;
    label?: Record<string, any> | {
        font?: ChartsFont;
        horizontalAlignment?: "center" | "left" | "right";
        position?: "inside" | "outside";
        text?: string;
        verticalAlignment?: "bottom" | "center" | "top";
        visible?: boolean;
    };
    paddingLeftRight?: number;
    paddingTopBottom?: number;
    value?: Date | number | string;
    width?: number;
}>;
declare class ConstantLine extends NestedOption<IConstantLineProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare type IConstantLineLabelProps = React.PropsWithChildren<{
    font?: ChartsFont;
    horizontalAlignment?: "center" | "left" | "right";
    position?: "inside" | "outside";
    text?: string;
    verticalAlignment?: "bottom" | "center" | "top";
    visible?: boolean;
}>;
declare class ConstantLineLabel extends NestedOption<IConstantLineLabelProps> {
    static OptionName: string;
}
declare type IConstantLineStyleProps = React.PropsWithChildren<{
    color?: string;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    label?: Record<string, any> | {
        font?: ChartsFont;
        horizontalAlignment?: "center" | "left" | "right";
        position?: "inside" | "outside";
        verticalAlignment?: "bottom" | "center" | "top";
        visible?: boolean;
    };
    paddingLeftRight?: number;
    paddingTopBottom?: number;
    width?: number;
}>;
declare class ConstantLineStyle extends NestedOption<IConstantLineStyleProps> {
    static OptionName: string;
}
declare type ICrosshairProps = React.PropsWithChildren<{
    color?: string;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    enabled?: boolean;
    horizontalLine?: boolean | Record<string, any> | {
        color?: string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        label?: Record<string, any> | {
            backgroundColor?: string;
            customizeText?: ((info: {
                point: chartPointObject;
                value: Date | number | string;
                valueText: string;
            }) => string);
            font?: ChartsFont;
            format?: LocalizationTypes.Format;
            visible?: boolean;
        };
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    label?: Record<string, any> | {
        backgroundColor?: string;
        customizeText?: ((info: {
            point: chartPointObject;
            value: Date | number | string;
            valueText: string;
        }) => string);
        font?: ChartsFont;
        format?: LocalizationTypes.Format;
        visible?: boolean;
    };
    opacity?: number;
    verticalLine?: boolean | Record<string, any> | {
        color?: string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        label?: Record<string, any> | {
            backgroundColor?: string;
            customizeText?: ((info: {
                point: chartPointObject;
                value: Date | number | string;
                valueText: string;
            }) => string);
            font?: ChartsFont;
            format?: LocalizationTypes.Format;
            visible?: boolean;
        };
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    width?: number;
}>;
declare class Crosshair extends NestedOption<ICrosshairProps> {
    static OptionName: string;
    static ExpectedChildren: {
        horizontalLine: {
            optionName: string;
            isCollectionItem: boolean;
        };
        horizontalLineLabel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
        verticalLine: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IDataPrepareSettingsProps = React.PropsWithChildren<{
    checkTypeForAllData?: boolean;
    convertToAxisDataType?: boolean;
    sortingMethod?: boolean | ((a: any, b: any) => number);
}>;
declare class DataPrepareSettings extends NestedOption<IDataPrepareSettingsProps> {
    static OptionName: string;
}
declare type IDragBoxStyleProps = React.PropsWithChildren<{
    color?: string;
    opacity?: number;
}>;
declare class DragBoxStyle extends NestedOption<IDragBoxStyleProps> {
    static OptionName: string;
}
declare type IExportProps = React.PropsWithChildren<{
    backgroundColor?: string;
    enabled?: boolean;
    fileName?: string;
    formats?: Array<"GIF" | "JPEG" | "PDF" | "PNG" | "SVG">;
    margin?: number;
    printingEnabled?: boolean;
    svgToCanvas?: ((svg: any, canvas: any) => any);
}>;
declare class Export extends NestedOption<IExportProps> {
    static OptionName: string;
}
declare type IFontProps = React.PropsWithChildren<{
    color?: string;
    family?: string;
    opacity?: number;
    size?: number | string;
    weight?: number;
}>;
declare class Font extends NestedOption<IFontProps> {
    static OptionName: string;
}
declare type IFormatProps = React.PropsWithChildren<{
    currency?: string;
    formatter?: ((value: number | Date) => string);
    parser?: ((value: string) => number | Date);
    precision?: number;
    type?: "billions" | "currency" | "day" | "decimal" | "exponential" | "fixedPoint" | "largeNumber" | "longDate" | "longTime" | "millions" | "millisecond" | "month" | "monthAndDay" | "monthAndYear" | "percent" | "quarter" | "quarterAndYear" | "shortDate" | "shortTime" | "thousands" | "trillions" | "year" | "dayOfWeek" | "hour" | "longDateLongTime" | "minute" | "second" | "shortDateShortTime";
    useCurrencyAccountingStyle?: boolean;
}>;
declare class Format extends NestedOption<IFormatProps> {
    static OptionName: string;
}
declare type IGridProps = React.PropsWithChildren<{
    color?: string;
    opacity?: number;
    visible?: boolean;
    width?: number;
}>;
declare class Grid extends NestedOption<IGridProps> {
    static OptionName: string;
}
declare type IHatchingProps = React.PropsWithChildren<{
    direction?: "left" | "none" | "right";
    opacity?: number;
    step?: number;
    width?: number;
}>;
declare class Hatching extends NestedOption<IHatchingProps> {
    static OptionName: string;
}
declare type IHeightProps = React.PropsWithChildren<{
    rangeMaxPoint?: number;
    rangeMinPoint?: number;
}>;
declare class Height extends NestedOption<IHeightProps> {
    static OptionName: string;
}
declare type IHorizontalLineProps = React.PropsWithChildren<{
    color?: string;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    label?: Record<string, any> | {
        backgroundColor?: string;
        customizeText?: ((info: {
            point: chartPointObject;
            value: Date | number | string;
            valueText: string;
        }) => string);
        font?: ChartsFont;
        format?: LocalizationTypes.Format;
        visible?: boolean;
    };
    opacity?: number;
    visible?: boolean;
    width?: number;
}>;
declare class HorizontalLine extends NestedOption<IHorizontalLineProps> {
    static OptionName: string;
    static ExpectedChildren: {
        horizontalLineLabel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IHorizontalLineLabelProps = React.PropsWithChildren<{
    backgroundColor?: string;
    customizeText?: ((info: {
        point: chartPointObject;
        value: Date | number | string;
        valueText: string;
    }) => string);
    font?: ChartsFont;
    format?: LocalizationTypes.Format;
    visible?: boolean;
}>;
declare class HorizontalLineLabel extends NestedOption<IHorizontalLineLabelProps> {
    static OptionName: string;
}
declare type IHoverStyleProps = React.PropsWithChildren<{
    border?: Record<string, any> | {
        color?: string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        visible?: boolean;
        width?: number;
    };
    color?: ChartsColor | string;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    hatching?: Record<string, any> | {
        direction?: "left" | "none" | "right";
        opacity?: number;
        step?: number;
        width?: number;
    };
    highlight?: boolean;
    width?: number;
    size?: number;
}>;
declare class HoverStyle extends NestedOption<IHoverStyleProps> {
    static OptionName: string;
}
declare type IImageProps = React.PropsWithChildren<{
    height?: number | Record<string, any> | {
        rangeMaxPoint?: number;
        rangeMinPoint?: number;
    };
    url?: string | Record<string, any> | {
        rangeMaxPoint?: string;
        rangeMinPoint?: string;
    };
    width?: number | Record<string, any> | {
        rangeMaxPoint?: number;
        rangeMinPoint?: number;
    };
}>;
declare class Image extends NestedOption<IImageProps> {
    static OptionName: string;
}
declare type ILabelProps = React.PropsWithChildren<{
    font?: ChartsFont;
    horizontalAlignment?: "center" | "left" | "right";
    position?: "inside" | "outside" | "bottom" | "left" | "right" | "top";
    verticalAlignment?: "bottom" | "center" | "top";
    visible?: boolean;
    text?: string;
    alignment?: "center" | "left" | "right";
    customizeHint?: ((argument: {
        value: Date | number | string;
        valueText: string;
    }) => string);
    customizeText?: ((argument: {
        value: Date | number | string;
        valueText: string;
    }) => string);
    displayMode?: "rotate" | "stagger" | "standard";
    format?: LocalizationTypes.Format;
    indentFromAxis?: number;
    overlappingBehavior?: "rotate" | "stagger" | "none" | "hide";
    rotationAngle?: number;
    staggeringSpacing?: number;
    template?: ((data: {
        value: Date | number | string;
        valueText: string;
    }, element: any) => string | any) | template;
    textOverflow?: "ellipsis" | "hide" | "none";
    wordWrap?: "normal" | "breakWord" | "none";
    argumentFormat?: LocalizationTypes.Format;
    backgroundColor?: string;
    border?: Record<string, any> | {
        color?: string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        visible?: boolean;
        width?: number;
    };
    connector?: Record<string, any> | {
        color?: string;
        visible?: boolean;
        width?: number;
    };
    displayFormat?: string;
    horizontalOffset?: number;
    showForZeroValues?: boolean;
    verticalOffset?: number;
    render?: (...params: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}>;
declare class Label extends NestedOption<ILabelProps> {
    static OptionName: string;
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare type ILegendProps = React.PropsWithChildren<{
    backgroundColor?: string;
    border?: Record<string, any> | {
        color?: string;
        cornerRadius?: number;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    columnCount?: number;
    columnItemSpacing?: number;
    customizeHint?: ((seriesInfo: {
        seriesColor: string;
        seriesIndex: number;
        seriesName: any;
    }) => string);
    customizeItems?: ((items: Array<LegendItem>) => Array<LegendItem>);
    customizeText?: ((seriesInfo: {
        seriesColor: string;
        seriesIndex: number;
        seriesName: any;
    }) => string);
    font?: ChartsFont;
    horizontalAlignment?: "center" | "left" | "right";
    hoverMode?: "excludePoints" | "includePoints" | "none";
    itemsAlignment?: "center" | "left" | "right";
    itemTextPosition?: "bottom" | "left" | "right" | "top";
    margin?: number | Record<string, any> | {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    };
    markerSize?: number;
    markerTemplate?: ((legendItem: LegendItem, element: any) => string | any) | template;
    orientation?: "horizontal" | "vertical";
    paddingLeftRight?: number;
    paddingTopBottom?: number;
    position?: "inside" | "outside";
    rowCount?: number;
    rowItemSpacing?: number;
    title?: Record<string, any> | string | {
        font?: ChartsFont;
        horizontalAlignment?: "center" | "left" | "right";
        margin?: Record<string, any> | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number;
        subtitle?: Record<string, any> | string | {
            font?: ChartsFont;
            offset?: number;
            text?: string;
        };
        text?: string;
        verticalAlignment?: "bottom" | "top";
    };
    verticalAlignment?: "bottom" | "top";
    visible?: boolean;
    markerRender?: (...params: any) => React.ReactNode;
    markerComponent?: React.ComponentType<any>;
    markerKeyFn?: (data: any) => string;
}>;
declare class Legend extends NestedOption<ILegendProps> {
    static OptionName: string;
    static ExpectedChildren: {
        annotationBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        legendTitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        margin: {
            optionName: string;
            isCollectionItem: boolean;
        };
        title: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare type ILegendTitleProps = React.PropsWithChildren<{
    font?: ChartsFont;
    horizontalAlignment?: "center" | "left" | "right";
    margin?: Record<string, any> | {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    };
    placeholderSize?: number;
    subtitle?: Record<string, any> | string | {
        font?: ChartsFont;
        offset?: number;
        text?: string;
    };
    text?: string;
    verticalAlignment?: "bottom" | "top";
}>;
declare class LegendTitle extends NestedOption<ILegendTitleProps> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        legendTitleSubtitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        margin: {
            optionName: string;
            isCollectionItem: boolean;
        };
        subtitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type ILegendTitleSubtitleProps = React.PropsWithChildren<{
    font?: ChartsFont;
    offset?: number;
    text?: string;
}>;
declare class LegendTitleSubtitle extends NestedOption<ILegendTitleSubtitleProps> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type ILengthProps = React.PropsWithChildren<{
    days?: number;
    hours?: number;
    milliseconds?: number;
    minutes?: number;
    months?: number;
    quarters?: number;
    seconds?: number;
    weeks?: number;
    years?: number;
}>;
declare class Length extends NestedOption<ILengthProps> {
    static OptionName: string;
}
declare type ILoadingIndicatorProps = React.PropsWithChildren<{
    backgroundColor?: string;
    enabled?: boolean;
    font?: ChartsFont;
    show?: boolean;
    text?: string;
    defaultShow?: boolean;
    onShowChange?: (value: boolean) => void;
}>;
declare class LoadingIndicator extends NestedOption<ILoadingIndicatorProps> {
    static OptionName: string;
    static DefaultsProps: {
        defaultShow: string;
    };
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IMarginProps = React.PropsWithChildren<{
    bottom?: number;
    left?: number;
    right?: number;
    top?: number;
}>;
declare class Margin extends NestedOption<IMarginProps> {
    static OptionName: string;
}
declare type IMinorGridProps = React.PropsWithChildren<{
    color?: string;
    opacity?: number;
    visible?: boolean;
    width?: number;
}>;
declare class MinorGrid extends NestedOption<IMinorGridProps> {
    static OptionName: string;
}
declare type IMinorTickProps = React.PropsWithChildren<{
    color?: string;
    length?: number;
    opacity?: number;
    shift?: number;
    visible?: boolean;
    width?: number;
}>;
declare class MinorTick extends NestedOption<IMinorTickProps> {
    static OptionName: string;
}
declare type IMinorTickIntervalProps = React.PropsWithChildren<{
    days?: number;
    hours?: number;
    milliseconds?: number;
    minutes?: number;
    months?: number;
    quarters?: number;
    seconds?: number;
    weeks?: number;
    years?: number;
}>;
declare class MinorTickInterval extends NestedOption<IMinorTickIntervalProps> {
    static OptionName: string;
}
declare type IMinVisualRangeLengthProps = React.PropsWithChildren<{
    days?: number;
    hours?: number;
    milliseconds?: number;
    minutes?: number;
    months?: number;
    quarters?: number;
    seconds?: number;
    weeks?: number;
    years?: number;
}>;
declare class MinVisualRangeLength extends NestedOption<IMinVisualRangeLengthProps> {
    static OptionName: string;
}
declare type IPaneProps = React.PropsWithChildren<{
    backgroundColor?: ChartsColor | string;
    border?: Record<string, any> | {
        bottom?: boolean;
        color?: string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        left?: boolean;
        opacity?: number;
        right?: boolean;
        top?: boolean;
        visible?: boolean;
        width?: number;
    };
    height?: number | string;
    name?: string;
}>;
declare class Pane extends NestedOption<IPaneProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare type IPaneBorderProps = React.PropsWithChildren<{
    bottom?: boolean;
    color?: string;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    left?: boolean;
    opacity?: number;
    right?: boolean;
    top?: boolean;
    visible?: boolean;
    width?: number;
}>;
declare class PaneBorder extends NestedOption<IPaneBorderProps> {
    static OptionName: string;
}
declare type IPointProps = React.PropsWithChildren<{
    border?: Record<string, any> | {
        color?: string;
        visible?: boolean;
        width?: number;
    };
    color?: ChartsColor | string;
    hoverMode?: "allArgumentPoints" | "allSeriesPoints" | "none" | "onlyPoint";
    hoverStyle?: Record<string, any> | {
        border?: Record<string, any> | {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string;
        size?: number;
    };
    image?: Record<string, any> | string | {
        height?: number | Record<string, any> | {
            rangeMaxPoint?: number;
            rangeMinPoint?: number;
        };
        url?: Record<string, any> | string | {
            rangeMaxPoint?: string;
            rangeMinPoint?: string;
        };
        width?: number | Record<string, any> | {
            rangeMaxPoint?: number;
            rangeMinPoint?: number;
        };
    };
    selectionMode?: "allArgumentPoints" | "allSeriesPoints" | "none" | "onlyPoint";
    selectionStyle?: Record<string, any> | {
        border?: Record<string, any> | {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string;
        size?: number;
    };
    size?: number;
    symbol?: "circle" | "cross" | "polygon" | "square" | "triangle" | "triangleDown" | "triangleUp";
    visible?: boolean;
}>;
declare class Point extends NestedOption<IPointProps> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        color: {
            optionName: string;
            isCollectionItem: boolean;
        };
        hoverStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        image: {
            optionName: string;
            isCollectionItem: boolean;
        };
        pointBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
        pointHoverStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        pointImage: {
            optionName: string;
            isCollectionItem: boolean;
        };
        pointSelectionStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        selectionStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IPointBorderProps = React.PropsWithChildren<{
    color?: string;
    visible?: boolean;
    width?: number;
}>;
declare class PointBorder extends NestedOption<IPointBorderProps> {
    static OptionName: string;
}
declare type IPointHoverStyleProps = React.PropsWithChildren<{
    border?: Record<string, any> | {
        color?: string;
        visible?: boolean;
        width?: number;
    };
    color?: ChartsColor | string;
    size?: number;
}>;
declare class PointHoverStyle extends NestedOption<IPointHoverStyleProps> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        color: {
            optionName: string;
            isCollectionItem: boolean;
        };
        pointBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IPointImageProps = React.PropsWithChildren<{
    height?: number | Record<string, any> | {
        rangeMaxPoint?: number;
        rangeMinPoint?: number;
    };
    url?: Record<string, any> | string | {
        rangeMaxPoint?: string;
        rangeMinPoint?: string;
    };
    width?: number | Record<string, any> | {
        rangeMaxPoint?: number;
        rangeMinPoint?: number;
    };
}>;
declare class PointImage extends NestedOption<IPointImageProps> {
    static OptionName: string;
    static ExpectedChildren: {
        height: {
            optionName: string;
            isCollectionItem: boolean;
        };
        url: {
            optionName: string;
            isCollectionItem: boolean;
        };
        width: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IPointSelectionStyleProps = React.PropsWithChildren<{
    border?: Record<string, any> | {
        color?: string;
        visible?: boolean;
        width?: number;
    };
    color?: ChartsColor | string;
    size?: number;
}>;
declare class PointSelectionStyle extends NestedOption<IPointSelectionStyleProps> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        color: {
            optionName: string;
            isCollectionItem: boolean;
        };
        pointBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IReductionProps = React.PropsWithChildren<{
    color?: string;
    level?: "close" | "high" | "low" | "open";
}>;
declare class Reduction extends NestedOption<IReductionProps> {
    static OptionName: string;
}
declare type IScrollBarProps = React.PropsWithChildren<{
    color?: string;
    offset?: number;
    opacity?: number;
    position?: "bottom" | "left" | "right" | "top";
    visible?: boolean;
    width?: number;
}>;
declare class ScrollBar extends NestedOption<IScrollBarProps> {
    static OptionName: string;
}
declare type ISelectionStyleProps = React.PropsWithChildren<{
    border?: Record<string, any> | {
        color?: string;
        visible?: boolean;
        width?: number;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
    };
    color?: ChartsColor | string;
    size?: number;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    hatching?: Record<string, any> | {
        direction?: "left" | "none" | "right";
        opacity?: number;
        step?: number;
        width?: number;
    };
    highlight?: boolean;
    width?: number;
}>;
declare class SelectionStyle extends NestedOption<ISelectionStyleProps> {
    static OptionName: string;
}
declare type ISeriesProps = React.PropsWithChildren<{
    aggregation?: Record<string, any> | {
        calculate?: ((aggregationInfo: chartPointAggregationInfoObject, series: chartSeriesObject) => Record<string, any> | Array<Record<string, any>>);
        enabled?: boolean;
        method?: "avg" | "count" | "max" | "min" | "ohlc" | "range" | "sum" | "custom";
    };
    argumentField?: string;
    axis?: string;
    barOverlapGroup?: string;
    barPadding?: number;
    barWidth?: number;
    border?: Record<string, any> | {
        color?: string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        visible?: boolean;
        width?: number;
    };
    closeValueField?: string;
    color?: ChartsColor | string;
    cornerRadius?: number;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    highValueField?: string;
    hoverMode?: "allArgumentPoints" | "allSeriesPoints" | "excludePoints" | "includePoints" | "nearestPoint" | "none" | "onlyPoint";
    hoverStyle?: Record<string, any> | {
        border?: Record<string, any> | {
            color?: string;
            dashStyle?: "dash" | "dot" | "longDash" | "solid";
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        hatching?: Record<string, any> | {
            direction?: "left" | "none" | "right";
            opacity?: number;
            step?: number;
            width?: number;
        };
        highlight?: boolean;
        width?: number;
    };
    ignoreEmptyPoints?: boolean;
    innerColor?: string;
    label?: Record<string, any> | {
        alignment?: "center" | "left" | "right";
        argumentFormat?: LocalizationTypes.Format;
        backgroundColor?: string;
        border?: Record<string, any> | {
            color?: string;
            dashStyle?: "dash" | "dot" | "longDash" | "solid";
            visible?: boolean;
            width?: number;
        };
        connector?: Record<string, any> | {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        customizeText?: ((pointInfo: any) => string);
        displayFormat?: string;
        font?: ChartsFont;
        format?: LocalizationTypes.Format;
        horizontalOffset?: number;
        position?: "inside" | "outside";
        rotationAngle?: number;
        showForZeroValues?: boolean;
        verticalOffset?: number;
        visible?: boolean;
    };
    lowValueField?: string;
    maxLabelCount?: number;
    minBarSize?: number;
    name?: string;
    opacity?: number;
    openValueField?: string;
    pane?: string;
    point?: Record<string, any> | {
        border?: Record<string, any> | {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string;
        hoverMode?: "allArgumentPoints" | "allSeriesPoints" | "none" | "onlyPoint";
        hoverStyle?: Record<string, any> | {
            border?: Record<string, any> | {
                color?: string;
                visible?: boolean;
                width?: number;
            };
            color?: ChartsColor | string;
            size?: number;
        };
        image?: Record<string, any> | string | {
            height?: number | Record<string, any> | {
                rangeMaxPoint?: number;
                rangeMinPoint?: number;
            };
            url?: Record<string, any> | string | {
                rangeMaxPoint?: string;
                rangeMinPoint?: string;
            };
            width?: number | Record<string, any> | {
                rangeMaxPoint?: number;
                rangeMinPoint?: number;
            };
        };
        selectionMode?: "allArgumentPoints" | "allSeriesPoints" | "none" | "onlyPoint";
        selectionStyle?: Record<string, any> | {
            border?: Record<string, any> | {
                color?: string;
                visible?: boolean;
                width?: number;
            };
            color?: ChartsColor | string;
            size?: number;
        };
        size?: number;
        symbol?: "circle" | "cross" | "polygon" | "square" | "triangle" | "triangleDown" | "triangleUp";
        visible?: boolean;
    };
    rangeValue1Field?: string;
    rangeValue2Field?: string;
    reduction?: Record<string, any> | {
        color?: string;
        level?: "close" | "high" | "low" | "open";
    };
    selectionMode?: "allArgumentPoints" | "allSeriesPoints" | "excludePoints" | "includePoints" | "none" | "onlyPoint";
    selectionStyle?: Record<string, any> | {
        border?: Record<string, any> | {
            color?: string;
            dashStyle?: "dash" | "dot" | "longDash" | "solid";
            visible?: boolean;
            width?: number;
        };
        color?: ChartsColor | string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        hatching?: Record<string, any> | {
            direction?: "left" | "none" | "right";
            opacity?: number;
            step?: number;
            width?: number;
        };
        highlight?: boolean;
        width?: number;
    };
    showInLegend?: boolean;
    sizeField?: string;
    stack?: string;
    tag?: any;
    tagField?: string;
    type?: "area" | "bar" | "bubble" | "candlestick" | "fullstackedarea" | "fullstackedbar" | "fullstackedline" | "fullstackedspline" | "fullstackedsplinearea" | "line" | "rangearea" | "rangebar" | "scatter" | "spline" | "splinearea" | "stackedarea" | "stackedbar" | "stackedline" | "stackedspline" | "stackedsplinearea" | "steparea" | "stepline" | "stock";
    valueErrorBar?: Record<string, any> | {
        color?: string;
        displayMode?: "auto" | "high" | "low" | "none";
        edgeLength?: number;
        highValueField?: string;
        lineWidth?: number;
        lowValueField?: string;
        opacity?: number;
        type?: "fixed" | "percent" | "stdDeviation" | "stdError" | "variance";
        value?: number;
    };
    valueField?: string;
    visible?: boolean;
    width?: number;
}>;
declare class Series extends NestedOption<ISeriesProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare type ISeriesBorderProps = React.PropsWithChildren<{
    color?: string;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    visible?: boolean;
    width?: number;
}>;
declare class SeriesBorder extends NestedOption<ISeriesBorderProps> {
    static OptionName: string;
}
declare type ISeriesTemplateProps = React.PropsWithChildren<{
    customizeSeries?: ((seriesName: any) => ChartSeries);
    nameField?: string;
}>;
declare class SeriesTemplate extends NestedOption<ISeriesTemplateProps> {
    static OptionName: string;
}
declare type IShadowProps = React.PropsWithChildren<{
    blur?: number;
    color?: string;
    offsetX?: number;
    offsetY?: number;
    opacity?: number;
}>;
declare class Shadow extends NestedOption<IShadowProps> {
    static OptionName: string;
}
declare type ISizeProps = React.PropsWithChildren<{
    height?: number;
    width?: number;
}>;
declare class Size extends NestedOption<ISizeProps> {
    static OptionName: string;
}
declare type IStripProps = React.PropsWithChildren<{
    color?: string;
    endValue?: Date | number | string;
    label?: Record<string, any> | {
        font?: ChartsFont;
        horizontalAlignment?: "center" | "left" | "right";
        text?: string;
        verticalAlignment?: "bottom" | "center" | "top";
    };
    paddingLeftRight?: number;
    paddingTopBottom?: number;
    startValue?: Date | number | string;
}>;
declare class Strip extends NestedOption<IStripProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare type IStripLabelProps = React.PropsWithChildren<{
    font?: ChartsFont;
    horizontalAlignment?: "center" | "left" | "right";
    text?: string;
    verticalAlignment?: "bottom" | "center" | "top";
}>;
declare class StripLabel extends NestedOption<IStripLabelProps> {
    static OptionName: string;
}
declare type IStripStyleProps = React.PropsWithChildren<{
    label?: Record<string, any> | {
        font?: ChartsFont;
        horizontalAlignment?: "center" | "left" | "right";
        verticalAlignment?: "bottom" | "center" | "top";
    };
    paddingLeftRight?: number;
    paddingTopBottom?: number;
}>;
declare class StripStyle extends NestedOption<IStripStyleProps> {
    static OptionName: string;
    static ExpectedChildren: {
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
        stripStyleLabel: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IStripStyleLabelProps = React.PropsWithChildren<{
    font?: ChartsFont;
    horizontalAlignment?: "center" | "left" | "right";
    verticalAlignment?: "bottom" | "center" | "top";
}>;
declare class StripStyleLabel extends NestedOption<IStripStyleLabelProps> {
    static OptionName: string;
}
declare type ISubtitleProps = React.PropsWithChildren<{
    font?: ChartsFont;
    offset?: number;
    text?: string;
    textOverflow?: "ellipsis" | "hide" | "none";
    wordWrap?: "normal" | "breakWord" | "none";
}>;
declare class Subtitle extends NestedOption<ISubtitleProps> {
    static OptionName: string;
}
declare type ITickProps = React.PropsWithChildren<{
    color?: string;
    length?: number;
    opacity?: number;
    shift?: number;
    visible?: boolean;
    width?: number;
}>;
declare class Tick extends NestedOption<ITickProps> {
    static OptionName: string;
}
declare type ITickIntervalProps = React.PropsWithChildren<{
    days?: number;
    hours?: number;
    milliseconds?: number;
    minutes?: number;
    months?: number;
    quarters?: number;
    seconds?: number;
    weeks?: number;
    years?: number;
}>;
declare class TickInterval extends NestedOption<ITickIntervalProps> {
    static OptionName: string;
}
declare type ITitleProps = React.PropsWithChildren<{
    alignment?: "center" | "left" | "right";
    font?: ChartsFont;
    margin?: number | Record<string, any> | {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    };
    text?: string;
    textOverflow?: "ellipsis" | "hide" | "none";
    wordWrap?: "normal" | "breakWord" | "none";
    horizontalAlignment?: "center" | "left" | "right";
    placeholderSize?: number;
    subtitle?: Record<string, any> | string | {
        font?: ChartsFont;
        offset?: number;
        text?: string;
        textOverflow?: "ellipsis" | "hide" | "none";
        wordWrap?: "normal" | "breakWord" | "none";
    };
    verticalAlignment?: "bottom" | "top";
}>;
declare class Title extends NestedOption<ITitleProps> {
    static OptionName: string;
}
declare type ITooltipProps = React.PropsWithChildren<{
    argumentFormat?: LocalizationTypes.Format;
    arrowLength?: number;
    border?: Record<string, any> | {
        color?: string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    color?: string;
    container?: any | string;
    contentTemplate?: ((pointInfo: any, element: any) => string | any) | template;
    cornerRadius?: number;
    customizeTooltip?: ((pointInfo: any) => Record<string, any>);
    enabled?: boolean;
    font?: ChartsFont;
    format?: LocalizationTypes.Format;
    interactive?: boolean;
    location?: "center" | "edge";
    opacity?: number;
    paddingLeftRight?: number;
    paddingTopBottom?: number;
    shadow?: Record<string, any> | {
        blur?: number;
        color?: string;
        offsetX?: number;
        offsetY?: number;
        opacity?: number;
    };
    shared?: boolean;
    zIndex?: number;
    contentRender?: (...params: any) => React.ReactNode;
    contentComponent?: React.ComponentType<any>;
    contentKeyFn?: (data: any) => string;
}>;
declare class Tooltip extends NestedOption<ITooltipProps> {
    static OptionName: string;
    static ExpectedChildren: {
        argumentFormat: {
            optionName: string;
            isCollectionItem: boolean;
        };
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        format: {
            optionName: string;
            isCollectionItem: boolean;
        };
        shadow: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tooltipBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare type ITooltipBorderProps = React.PropsWithChildren<{
    color?: string;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    opacity?: number;
    visible?: boolean;
    width?: number;
}>;
declare class TooltipBorder extends NestedOption<ITooltipBorderProps> {
    static OptionName: string;
}
declare type IUrlProps = React.PropsWithChildren<{
    rangeMaxPoint?: string;
    rangeMinPoint?: string;
}>;
declare class Url extends NestedOption<IUrlProps> {
    static OptionName: string;
}
declare type IValueAxisProps = React.PropsWithChildren<{
    aggregatedPointsPosition?: "betweenTicks" | "crossTicks";
    allowDecimals?: boolean;
    autoBreaksEnabled?: boolean;
    axisDivisionFactor?: number;
    breaks?: Array<ScaleBreak> | {
        endValue?: Date | number | string;
        startValue?: Date | number | string;
    }[];
    breakStyle?: Record<string, any> | {
        color?: string;
        line?: "straight" | "waved";
        width?: number;
    };
    categories?: Array<Date | number | string>;
    color?: string;
    constantLines?: Array<Record<string, any>> | {
        color?: string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        displayBehindSeries?: boolean;
        extendAxis?: boolean;
        label?: Record<string, any> | {
            font?: ChartsFont;
            horizontalAlignment?: "center" | "left" | "right";
            position?: "inside" | "outside";
            text?: string;
            verticalAlignment?: "bottom" | "center" | "top";
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        value?: Date | number | string;
        width?: number;
    }[];
    constantLineStyle?: Record<string, any> | {
        color?: string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        label?: Record<string, any> | {
            font?: ChartsFont;
            horizontalAlignment?: "center" | "left" | "right";
            position?: "inside" | "outside";
            verticalAlignment?: "bottom" | "center" | "top";
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        width?: number;
    };
    customPosition?: Date | number | string;
    discreteAxisDivisionMode?: "betweenLabels" | "crossLabels";
    endOnTick?: boolean;
    grid?: Record<string, any> | {
        color?: string;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    inverted?: boolean;
    label?: Record<string, any> | {
        alignment?: "center" | "left" | "right";
        customizeHint?: ((axisValue: {
            value: Date | number | string;
            valueText: string;
        }) => string);
        customizeText?: ((axisValue: {
            value: Date | number | string;
            valueText: string;
        }) => string);
        displayMode?: "rotate" | "stagger" | "standard";
        font?: ChartsFont;
        format?: LocalizationTypes.Format;
        indentFromAxis?: number;
        overlappingBehavior?: "rotate" | "stagger" | "none" | "hide";
        position?: "inside" | "outside" | "bottom" | "left" | "right" | "top";
        rotationAngle?: number;
        staggeringSpacing?: number;
        template?: ((data: {
            value: Date | number | string;
            valueText: string;
        }, element: any) => string | any) | template;
        textOverflow?: "ellipsis" | "hide" | "none";
        visible?: boolean;
        wordWrap?: "normal" | "breakWord" | "none";
    };
    linearThreshold?: number;
    logarithmBase?: number;
    maxAutoBreakCount?: number;
    maxValueMargin?: number;
    minorGrid?: Record<string, any> | {
        color?: string;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    minorTick?: Record<string, any> | {
        color?: string;
        length?: number;
        opacity?: number;
        shift?: number;
        visible?: boolean;
        width?: number;
    };
    minorTickCount?: number;
    minorTickInterval?: number | Record<string, any> | "day" | "hour" | "millisecond" | "minute" | "month" | "quarter" | "second" | "week" | "year" | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    minValueMargin?: number;
    minVisualRangeLength?: number | Record<string, any> | "day" | "hour" | "millisecond" | "minute" | "month" | "quarter" | "second" | "week" | "year" | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    multipleAxesSpacing?: number;
    name?: string;
    offset?: number;
    opacity?: number;
    pane?: string;
    placeholderSize?: number;
    position?: "bottom" | "left" | "right" | "top";
    showZero?: boolean;
    strips?: Array<Record<string, any>> | {
        color?: string;
        endValue?: Date | number | string;
        label?: Record<string, any> | {
            font?: ChartsFont;
            horizontalAlignment?: "center" | "left" | "right";
            text?: string;
            verticalAlignment?: "bottom" | "center" | "top";
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        startValue?: Date | number | string;
    }[];
    stripStyle?: Record<string, any> | {
        label?: Record<string, any> | {
            font?: ChartsFont;
            horizontalAlignment?: "center" | "left" | "right";
            verticalAlignment?: "bottom" | "center" | "top";
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
    };
    synchronizedValue?: number;
    tick?: Record<string, any> | {
        color?: string;
        length?: number;
        opacity?: number;
        shift?: number;
        visible?: boolean;
        width?: number;
    };
    tickInterval?: number | Record<string, any> | "day" | "hour" | "millisecond" | "minute" | "month" | "quarter" | "second" | "week" | "year" | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    title?: Record<string, any> | string | {
        alignment?: "center" | "left" | "right";
        font?: ChartsFont;
        margin?: number;
        text?: string;
        textOverflow?: "ellipsis" | "hide" | "none";
        wordWrap?: "normal" | "breakWord" | "none";
    };
    type?: "continuous" | "discrete" | "logarithmic";
    valueMarginsEnabled?: boolean;
    valueType?: "datetime" | "numeric" | "string";
    visible?: boolean;
    visualRange?: Array<Date | number | string> | CommonChartTypes.VisualRange;
    visualRangeUpdateMode?: "auto" | "keep" | "reset" | "shift";
    wholeRange?: Array<Date | number | string> | CommonChartTypes.VisualRange;
    width?: number;
    defaultCategories?: Array<Date | number | string>;
    onCategoriesChange?: (value: Array<Date | number | string>) => void;
    defaultVisualRange?: Array<Date | number | string> | CommonChartTypes.VisualRange;
    onVisualRangeChange?: (value: Array<Date | number | string> | CommonChartTypes.VisualRange) => void;
}>;
declare class ValueAxis extends NestedOption<IValueAxisProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static DefaultsProps: {
        defaultCategories: string;
        defaultVisualRange: string;
    };
    static ExpectedChildren: {
        axisConstantLineStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        axisLabel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        axisTitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        break: {
            optionName: string;
            isCollectionItem: boolean;
        };
        constantLine: {
            optionName: string;
            isCollectionItem: boolean;
        };
        constantLineStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
        minorTickInterval: {
            optionName: string;
            isCollectionItem: boolean;
        };
        minVisualRangeLength: {
            optionName: string;
            isCollectionItem: boolean;
        };
        strip: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tickInterval: {
            optionName: string;
            isCollectionItem: boolean;
        };
        title: {
            optionName: string;
            isCollectionItem: boolean;
        };
        visualRange: {
            optionName: string;
            isCollectionItem: boolean;
        };
        wholeRange: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IValueErrorBarProps = React.PropsWithChildren<{
    color?: string;
    displayMode?: "auto" | "high" | "low" | "none";
    edgeLength?: number;
    highValueField?: string;
    lineWidth?: number;
    lowValueField?: string;
    opacity?: number;
    type?: "fixed" | "percent" | "stdDeviation" | "stdError" | "variance";
    value?: number;
}>;
declare class ValueErrorBar extends NestedOption<IValueErrorBarProps> {
    static OptionName: string;
}
declare type IVerticalLineProps = React.PropsWithChildren<{
    color?: string;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    label?: Record<string, any> | {
        backgroundColor?: string;
        customizeText?: ((info: {
            point: chartPointObject;
            value: Date | number | string;
            valueText: string;
        }) => string);
        font?: ChartsFont;
        format?: LocalizationTypes.Format;
        visible?: boolean;
    };
    opacity?: number;
    visible?: boolean;
    width?: number;
}>;
declare class VerticalLine extends NestedOption<IVerticalLineProps> {
    static OptionName: string;
    static ExpectedChildren: {
        horizontalLineLabel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IVisualRangeProps = React.PropsWithChildren<{
    endValue?: Date | number | string;
    length?: number | Record<string, any> | "day" | "hour" | "millisecond" | "minute" | "month" | "quarter" | "second" | "week" | "year" | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    startValue?: Date | number | string;
    defaultEndValue?: Date | number | string;
    onEndValueChange?: (value: Date | number | string) => void;
    defaultStartValue?: Date | number | string;
    onStartValueChange?: (value: Date | number | string) => void;
}>;
declare class VisualRange extends NestedOption<IVisualRangeProps> {
    static OptionName: string;
    static DefaultsProps: {
        defaultEndValue: string;
        defaultStartValue: string;
    };
}
declare type IWholeRangeProps = React.PropsWithChildren<{
    endValue?: Date | number | string;
    length?: number | Record<string, any> | "day" | "hour" | "millisecond" | "minute" | "month" | "quarter" | "second" | "week" | "year" | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    startValue?: Date | number | string;
    defaultEndValue?: Date | number | string;
    onEndValueChange?: (value: Date | number | string) => void;
    defaultStartValue?: Date | number | string;
    onStartValueChange?: (value: Date | number | string) => void;
}>;
declare class WholeRange extends NestedOption<IWholeRangeProps> {
    static OptionName: string;
    static DefaultsProps: {
        defaultEndValue: string;
        defaultStartValue: string;
    };
}
declare type IWidthProps = React.PropsWithChildren<{
    rangeMaxPoint?: number;
    rangeMinPoint?: number;
}>;
declare class Width extends NestedOption<IWidthProps> {
    static OptionName: string;
}
declare type IZoomAndPanProps = React.PropsWithChildren<{
    allowMouseWheel?: boolean;
    allowTouchGestures?: boolean;
    argumentAxis?: "both" | "none" | "pan" | "zoom";
    dragBoxStyle?: Record<string, any> | {
        color?: string;
        opacity?: number;
    };
    dragToZoom?: boolean;
    panKey?: "alt" | "ctrl" | "meta" | "shift";
    valueAxis?: "both" | "none" | "pan" | "zoom";
}>;
declare class ZoomAndPan extends NestedOption<IZoomAndPanProps> {
    static OptionName: string;
    static ExpectedChildren: {
        dragBoxStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
export default Chart;
export { Chart, IChartOptions, AdaptiveLayout, IAdaptiveLayoutProps, Aggregation, IAggregationProps, AggregationInterval, IAggregationIntervalProps, Animation, IAnimationProps, Annotation, IAnnotationProps, AnnotationBorder, IAnnotationBorderProps, AnnotationImage, IAnnotationImageProps, ArgumentAxis, IArgumentAxisProps, ArgumentFormat, IArgumentFormatProps, AxisConstantLineStyle, IAxisConstantLineStyleProps, AxisConstantLineStyleLabel, IAxisConstantLineStyleLabelProps, AxisLabel, IAxisLabelProps, AxisTitle, IAxisTitleProps, BackgroundColor, IBackgroundColorProps, Border, IBorderProps, Break, IBreakProps, BreakStyle, IBreakStyleProps, ChartTitle, IChartTitleProps, ChartTitleSubtitle, IChartTitleSubtitleProps, Color, IColorProps, CommonAnnotationSettings, ICommonAnnotationSettingsProps, CommonAxisSettings, ICommonAxisSettingsProps, CommonAxisSettingsConstantLineStyle, ICommonAxisSettingsConstantLineStyleProps, CommonAxisSettingsConstantLineStyleLabel, ICommonAxisSettingsConstantLineStyleLabelProps, CommonAxisSettingsLabel, ICommonAxisSettingsLabelProps, CommonAxisSettingsTitle, ICommonAxisSettingsTitleProps, CommonPaneSettings, ICommonPaneSettingsProps, CommonSeriesSettings, ICommonSeriesSettingsProps, CommonSeriesSettingsHoverStyle, ICommonSeriesSettingsHoverStyleProps, CommonSeriesSettingsLabel, ICommonSeriesSettingsLabelProps, CommonSeriesSettingsSelectionStyle, ICommonSeriesSettingsSelectionStyleProps, Connector, IConnectorProps, ConstantLine, IConstantLineProps, ConstantLineLabel, IConstantLineLabelProps, ConstantLineStyle, IConstantLineStyleProps, Crosshair, ICrosshairProps, DataPrepareSettings, IDataPrepareSettingsProps, DragBoxStyle, IDragBoxStyleProps, Export, IExportProps, Font, IFontProps, Format, IFormatProps, Grid, IGridProps, Hatching, IHatchingProps, Height, IHeightProps, HorizontalLine, IHorizontalLineProps, HorizontalLineLabel, IHorizontalLineLabelProps, HoverStyle, IHoverStyleProps, Image, IImageProps, Label, ILabelProps, Legend, ILegendProps, LegendTitle, ILegendTitleProps, LegendTitleSubtitle, ILegendTitleSubtitleProps, Length, ILengthProps, LoadingIndicator, ILoadingIndicatorProps, Margin, IMarginProps, MinorGrid, IMinorGridProps, MinorTick, IMinorTickProps, MinorTickInterval, IMinorTickIntervalProps, MinVisualRangeLength, IMinVisualRangeLengthProps, Pane, IPaneProps, PaneBorder, IPaneBorderProps, Point, IPointProps, PointBorder, IPointBorderProps, PointHoverStyle, IPointHoverStyleProps, PointImage, IPointImageProps, PointSelectionStyle, IPointSelectionStyleProps, Reduction, IReductionProps, ScrollBar, IScrollBarProps, SelectionStyle, ISelectionStyleProps, Series, ISeriesProps, SeriesBorder, ISeriesBorderProps, SeriesTemplate, ISeriesTemplateProps, Shadow, IShadowProps, Size, ISizeProps, Strip, IStripProps, StripLabel, IStripLabelProps, StripStyle, IStripStyleProps, StripStyleLabel, IStripStyleLabelProps, Subtitle, ISubtitleProps, Tick, ITickProps, TickInterval, ITickIntervalProps, Title, ITitleProps, Tooltip, ITooltipProps, TooltipBorder, ITooltipBorderProps, Url, IUrlProps, ValueAxis, IValueAxisProps, ValueErrorBar, IValueErrorBarProps, VerticalLine, IVerticalLineProps, VisualRange, IVisualRangeProps, WholeRange, IWholeRangeProps, Width, IWidthProps, ZoomAndPan, IZoomAndPanProps };
import type * as ChartTypes from 'devextreme/viz/chart_types';
export { ChartTypes };
