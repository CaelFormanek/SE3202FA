/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
export { ExplicitTypes } from "devextreme/ui/responsive_box";
import dxResponsiveBox, { Properties } from "devextreme/ui/responsive_box";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import NestedOption from "./core/nested-option";
import type { dxResponsiveBoxItem, ContentReadyEvent, DisposingEvent, InitializedEvent, ItemClickEvent, ItemContextMenuEvent, ItemHoldEvent, ItemRenderedEvent } from "devextreme/ui/responsive_box";
import type { CollectionWidgetItem } from "devextreme/ui/collection/ui.collection_widget.base";
import type { template } from "devextreme/core/templates/template";
declare type ReplaceFieldTypes<TSource, TReplacement> = {
    [P in keyof TSource]: P extends keyof TReplacement ? TReplacement[P] : TSource[P];
};
declare type IResponsiveBoxOptionsNarrowedEvents<TItem = any, TKey = any> = {
    onContentReady?: ((e: ContentReadyEvent<TItem, TKey>) => void);
    onDisposing?: ((e: DisposingEvent<TItem, TKey>) => void);
    onInitialized?: ((e: InitializedEvent<TItem, TKey>) => void);
    onItemClick?: ((e: ItemClickEvent<TItem, TKey>) => void);
    onItemContextMenu?: ((e: ItemContextMenuEvent<TItem, TKey>) => void);
    onItemHold?: ((e: ItemHoldEvent<TItem, TKey>) => void);
    onItemRendered?: ((e: ItemRenderedEvent<TItem, TKey>) => void);
};
declare type IResponsiveBoxOptions<TItem = any, TKey = any> = React.PropsWithChildren<ReplaceFieldTypes<Properties<TItem, TKey>, IResponsiveBoxOptionsNarrowedEvents<TItem, TKey>> & IHtmlOptions & {
    dataSource?: Properties<TItem, TKey>["dataSource"];
    itemRender?: (...params: any) => React.ReactNode;
    itemComponent?: React.ComponentType<any>;
    itemKeyFn?: (data: any) => string;
    defaultItems?: Array<any | dxResponsiveBoxItem | string>;
    onItemsChange?: (value: Array<any | dxResponsiveBoxItem | string>) => void;
}>;
declare class ResponsiveBox<TItem = any, TKey = any> extends BaseComponent<React.PropsWithChildren<IResponsiveBoxOptions<TItem, TKey>>> {
    get instance(): dxResponsiveBox<TItem, TKey>;
    protected _WidgetClass: typeof dxResponsiveBox;
    protected subscribableOptions: string[];
    protected independentEvents: string[];
    protected _defaults: {
        defaultItems: string;
    };
    protected _expectedChildren: {
        col: {
            optionName: string;
            isCollectionItem: boolean;
        };
        item: {
            optionName: string;
            isCollectionItem: boolean;
        };
        row: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    protected _templateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare type IColProps = React.PropsWithChildren<{
    baseSize?: number | string;
    ratio?: number;
    screen?: string;
    shrink?: number;
}>;
declare class Col extends NestedOption<IColProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare type IItemProps = React.PropsWithChildren<{
    disabled?: boolean;
    html?: string;
    location?: Array<Record<string, any>> | Record<string, any> | {
        col?: number;
        colspan?: number;
        row?: number;
        rowspan?: number;
        screen?: string;
    }[];
    template?: ((itemData: CollectionWidgetItem, itemIndex: number, itemElement: any) => string | any) | template;
    text?: string;
    visible?: boolean;
    render?: (...params: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}>;
declare class Item extends NestedOption<IItemProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        location: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare type ILocationProps = React.PropsWithChildren<{
    col?: number;
    colspan?: number;
    row?: number;
    rowspan?: number;
    screen?: string;
}>;
declare class Location extends NestedOption<ILocationProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare type IRowProps = React.PropsWithChildren<{
    baseSize?: number | string;
    ratio?: number;
    screen?: string;
    shrink?: number;
}>;
declare class Row extends NestedOption<IRowProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
export default ResponsiveBox;
export { ResponsiveBox, IResponsiveBoxOptions, Col, IColProps, Item, IItemProps, Location, ILocationProps, Row, IRowProps };
import type * as ResponsiveBoxTypes from 'devextreme/ui/responsive_box_types';
export { ResponsiveBoxTypes };
