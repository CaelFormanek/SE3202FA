/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
import dxDiagram, { Properties } from "devextreme/ui/diagram";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import NestedOption from "./core/nested-option";
import type { ContentReadyEvent, CustomCommandEvent, DisposingEvent, InitializedEvent, ItemClickEvent, ItemDblClickEvent, RequestEditOperationEvent, RequestLayoutUpdateEvent, dxDiagramCustomCommand, dxDiagramShape } from "devextreme/ui/diagram";
import type { dxSVGElement } from "devextreme/core/element";
import type { template } from "devextreme/core/templates/template";
import type { DataSourceOptions } from "devextreme/data/data_source";
import type { Store } from "devextreme/data/store";
import type DataSource from "devextreme/data/data_source";
declare type ReplaceFieldTypes<TSource, TReplacement> = {
    [P in keyof TSource]: P extends keyof TReplacement ? TReplacement[P] : TSource[P];
};
declare type IDiagramOptionsNarrowedEvents = {
    onContentReady?: ((e: ContentReadyEvent) => void);
    onCustomCommand?: ((e: CustomCommandEvent) => void);
    onDisposing?: ((e: DisposingEvent) => void);
    onInitialized?: ((e: InitializedEvent) => void);
    onItemClick?: ((e: ItemClickEvent) => void);
    onItemDblClick?: ((e: ItemDblClickEvent) => void);
    onRequestEditOperation?: ((e: RequestEditOperationEvent) => void);
    onRequestLayoutUpdate?: ((e: RequestLayoutUpdateEvent) => void);
};
declare type IDiagramOptions = React.PropsWithChildren<ReplaceFieldTypes<Properties, IDiagramOptionsNarrowedEvents> & IHtmlOptions & {
    customShapeRender?: (...params: any) => React.ReactNode;
    customShapeComponent?: React.ComponentType<any>;
    customShapeKeyFn?: (data: any) => string;
    customShapeToolboxRender?: (...params: any) => React.ReactNode;
    customShapeToolboxComponent?: React.ComponentType<any>;
    customShapeToolboxKeyFn?: (data: any) => string;
    defaultGridSize?: number | Record<string, any>;
    defaultPageSize?: Record<string, any>;
    defaultZoomLevel?: number | Record<string, any>;
    onGridSizeChange?: (value: number | Record<string, any>) => void;
    onPageSizeChange?: (value: Record<string, any>) => void;
    onZoomLevelChange?: (value: number | Record<string, any>) => void;
}>;
declare class Diagram extends BaseComponent<React.PropsWithChildren<IDiagramOptions>> {
    get instance(): dxDiagram;
    protected _WidgetClass: typeof dxDiagram;
    protected subscribableOptions: string[];
    protected independentEvents: string[];
    protected _defaults: {
        defaultGridSize: string;
        defaultPageSize: string;
        defaultZoomLevel: string;
    };
    protected _expectedChildren: {
        contextMenu: {
            optionName: string;
            isCollectionItem: boolean;
        };
        contextToolbox: {
            optionName: string;
            isCollectionItem: boolean;
        };
        customShape: {
            optionName: string;
            isCollectionItem: boolean;
        };
        defaultItemProperties: {
            optionName: string;
            isCollectionItem: boolean;
        };
        edges: {
            optionName: string;
            isCollectionItem: boolean;
        };
        editing: {
            optionName: string;
            isCollectionItem: boolean;
        };
        export: {
            optionName: string;
            isCollectionItem: boolean;
        };
        gridSize: {
            optionName: string;
            isCollectionItem: boolean;
        };
        historyToolbar: {
            optionName: string;
            isCollectionItem: boolean;
        };
        mainToolbar: {
            optionName: string;
            isCollectionItem: boolean;
        };
        nodes: {
            optionName: string;
            isCollectionItem: boolean;
        };
        pageSize: {
            optionName: string;
            isCollectionItem: boolean;
        };
        propertiesPanel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        toolbox: {
            optionName: string;
            isCollectionItem: boolean;
        };
        viewToolbar: {
            optionName: string;
            isCollectionItem: boolean;
        };
        zoomLevel: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    protected _templateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare type IAutoLayoutProps = React.PropsWithChildren<{
    orientation?: "horizontal" | "vertical";
    type?: "auto" | "off" | "tree" | "layered";
}>;
declare class AutoLayout extends NestedOption<IAutoLayoutProps> {
    static OptionName: string;
}
declare type ICommandProps = React.PropsWithChildren<{
    icon?: string;
    items?: Array<dxDiagramCustomCommand>;
    location?: "after" | "before" | "center";
    name?: "separator" | "exportSvg" | "exportPng" | "exportJpg" | "undo" | "redo" | "cut" | "copy" | "paste" | "selectAll" | "delete" | "fontName" | "fontSize" | "bold" | "italic" | "underline" | "fontColor" | "lineStyle" | "lineWidth" | "lineColor" | "fillColor" | "textAlignLeft" | "textAlignCenter" | "textAlignRight" | "lock" | "unlock" | "sendToBack" | "bringToFront" | "insertShapeImage" | "editShapeImage" | "deleteShapeImage" | "connectorLineType" | "connectorLineStart" | "connectorLineEnd" | "layoutTreeTopToBottom" | "layoutTreeBottomToTop" | "layoutTreeLeftToRight" | "layoutTreeRightToLeft" | "layoutLayeredTopToBottom" | "layoutLayeredBottomToTop" | "layoutLayeredLeftToRight" | "layoutLayeredRightToLeft" | "fullScreen" | "zoomLevel" | "showGrid" | "snapToGrid" | "gridSize" | "units" | "pageSize" | "pageOrientation" | "pageColor" | "simpleView" | "toolbox";
    text?: string;
}>;
declare class Command extends NestedOption<ICommandProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare type ICommandItemProps = React.PropsWithChildren<{
    icon?: string;
    items?: Array<dxDiagramCustomCommand>;
    location?: "after" | "before" | "center";
    name?: "separator" | "exportSvg" | "exportPng" | "exportJpg" | "undo" | "redo" | "cut" | "copy" | "paste" | "selectAll" | "delete" | "fontName" | "fontSize" | "bold" | "italic" | "underline" | "fontColor" | "lineStyle" | "lineWidth" | "lineColor" | "fillColor" | "textAlignLeft" | "textAlignCenter" | "textAlignRight" | "lock" | "unlock" | "sendToBack" | "bringToFront" | "insertShapeImage" | "editShapeImage" | "deleteShapeImage" | "connectorLineType" | "connectorLineStart" | "connectorLineEnd" | "layoutTreeTopToBottom" | "layoutTreeBottomToTop" | "layoutTreeLeftToRight" | "layoutTreeRightToLeft" | "layoutLayeredTopToBottom" | "layoutLayeredBottomToTop" | "layoutLayeredLeftToRight" | "layoutLayeredRightToLeft" | "fullScreen" | "zoomLevel" | "showGrid" | "snapToGrid" | "gridSize" | "units" | "pageSize" | "pageOrientation" | "pageColor" | "simpleView" | "toolbox";
    text?: string;
}>;
declare class CommandItem extends NestedOption<ICommandItemProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare type IConnectionPointProps = React.PropsWithChildren<{
    x?: number;
    y?: number;
}>;
declare class ConnectionPoint extends NestedOption<IConnectionPointProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare type IContextMenuProps = React.PropsWithChildren<{
    commands?: Array<dxDiagramCustomCommand>;
    enabled?: boolean;
}>;
declare class ContextMenu extends NestedOption<IContextMenuProps> {
    static OptionName: string;
    static ExpectedChildren: {
        command: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IContextToolboxProps = React.PropsWithChildren<{
    category?: "general" | "flowchart" | "orgChart" | "containers" | "custom";
    displayMode?: "icons" | "texts";
    enabled?: boolean;
    shapeIconsPerRow?: number;
    shapes?: Array<"text" | "rectangle" | "ellipse" | "cross" | "triangle" | "diamond" | "heart" | "pentagon" | "hexagon" | "octagon" | "star" | "arrowLeft" | "arrowTop" | "arrowRight" | "arrowBottom" | "arrowNorthSouth" | "arrowEastWest" | "process" | "decision" | "terminator" | "predefinedProcess" | "document" | "multipleDocuments" | "manualInput" | "preparation" | "data" | "database" | "hardDisk" | "internalStorage" | "paperTape" | "manualOperation" | "delay" | "storedData" | "display" | "merge" | "connector" | "or" | "summingJunction" | "verticalContainer" | "horizontalContainer" | "cardWithImageOnLeft" | "cardWithImageOnTop" | "cardWithImageOnRight">;
    width?: number;
}>;
declare class ContextToolbox extends NestedOption<IContextToolboxProps> {
    static OptionName: string;
}
declare type ICustomShapeProps = React.PropsWithChildren<{
    allowEditImage?: boolean;
    allowEditText?: boolean;
    allowResize?: boolean;
    backgroundImageHeight?: number;
    backgroundImageLeft?: number;
    backgroundImageToolboxUrl?: string;
    backgroundImageTop?: number;
    backgroundImageUrl?: string;
    backgroundImageWidth?: number;
    baseType?: "text" | "rectangle" | "ellipse" | "cross" | "triangle" | "diamond" | "heart" | "pentagon" | "hexagon" | "octagon" | "star" | "arrowLeft" | "arrowTop" | "arrowRight" | "arrowBottom" | "arrowNorthSouth" | "arrowEastWest" | "process" | "decision" | "terminator" | "predefinedProcess" | "document" | "multipleDocuments" | "manualInput" | "preparation" | "data" | "database" | "hardDisk" | "internalStorage" | "paperTape" | "manualOperation" | "delay" | "storedData" | "display" | "merge" | "connector" | "or" | "summingJunction" | "verticalContainer" | "horizontalContainer" | "cardWithImageOnLeft" | "cardWithImageOnTop" | "cardWithImageOnRight";
    category?: string;
    connectionPoints?: Array<Record<string, any>> | {
        x?: number;
        y?: number;
    }[];
    defaultHeight?: number;
    defaultImageUrl?: string;
    defaultText?: string;
    defaultWidth?: number;
    imageHeight?: number;
    imageLeft?: number;
    imageTop?: number;
    imageWidth?: number;
    keepRatioOnAutoSize?: boolean;
    maxHeight?: number;
    maxWidth?: number;
    minHeight?: number;
    minWidth?: number;
    template?: ((container: dxSVGElement, data: {
        item: dxDiagramShape;
    }) => void) | template;
    templateHeight?: number;
    templateLeft?: number;
    templateTop?: number;
    templateWidth?: number;
    textHeight?: number;
    textLeft?: number;
    textTop?: number;
    textWidth?: number;
    title?: string;
    toolboxTemplate?: ((container: dxSVGElement, data: {
        item: dxDiagramShape;
    }) => void) | template;
    toolboxWidthToHeightRatio?: number;
    type?: string;
    render?: (...params: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
    toolboxRender?: (...params: any) => React.ReactNode;
    toolboxComponent?: React.ComponentType<any>;
    toolboxKeyFn?: (data: any) => string;
}>;
declare class CustomShape extends NestedOption<ICustomShapeProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        connectionPoint: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare type IDefaultItemPropertiesProps = React.PropsWithChildren<{
    connectorLineEnd?: "none" | "arrow" | "outlinedTriangle" | "filledTriangle";
    connectorLineStart?: "none" | "arrow" | "outlinedTriangle" | "filledTriangle";
    connectorLineType?: "straight" | "orthogonal";
    shapeMaxHeight?: number;
    shapeMaxWidth?: number;
    shapeMinHeight?: number;
    shapeMinWidth?: number;
    style?: Record<string, any>;
    textStyle?: Record<string, any>;
}>;
declare class DefaultItemProperties extends NestedOption<IDefaultItemPropertiesProps> {
    static OptionName: string;
}
declare type IEdgesProps = React.PropsWithChildren<{
    customDataExpr?: ((data: any, value: any) => any) | string;
    dataSource?: Array<any> | DataSource | DataSourceOptions | null | Store | string;
    fromExpr?: ((data: any, value: any) => any) | string;
    fromLineEndExpr?: ((data: any, value: any) => any) | string;
    fromPointIndexExpr?: ((data: any, value: any) => any) | string;
    keyExpr?: ((data: any, value: any) => any) | string;
    lineTypeExpr?: ((data: any, value: any) => any) | string;
    lockedExpr?: ((data: any, value: any) => any) | string;
    pointsExpr?: ((data: any, value: any) => any) | string;
    styleExpr?: ((data: any, value: any) => any) | string;
    textExpr?: ((data: any, value: any) => any) | string;
    textStyleExpr?: ((data: any, value: any) => any) | string;
    toExpr?: ((data: any, value: any) => any) | string;
    toLineEndExpr?: ((data: any, value: any) => any) | string;
    toPointIndexExpr?: ((data: any, value: any) => any) | string;
    zIndexExpr?: ((data: any, value: any) => any) | string;
}>;
declare class Edges extends NestedOption<IEdgesProps> {
    static OptionName: string;
}
declare type IEditingProps = React.PropsWithChildren<{
    allowAddShape?: boolean;
    allowChangeConnection?: boolean;
    allowChangeConnectorPoints?: boolean;
    allowChangeConnectorText?: boolean;
    allowChangeShapeText?: boolean;
    allowDeleteConnector?: boolean;
    allowDeleteShape?: boolean;
    allowMoveShape?: boolean;
    allowResizeShape?: boolean;
}>;
declare class Editing extends NestedOption<IEditingProps> {
    static OptionName: string;
}
declare type IExportProps = React.PropsWithChildren<{
    fileName?: string;
}>;
declare class Export extends NestedOption<IExportProps> {
    static OptionName: string;
}
declare type IGridSizeProps = React.PropsWithChildren<{
    items?: Array<number>;
    value?: number;
    defaultValue?: number;
    onValueChange?: (value: number) => void;
}>;
declare class GridSize extends NestedOption<IGridSizeProps> {
    static OptionName: string;
    static DefaultsProps: {
        defaultValue: string;
    };
}
declare type IGroupProps = React.PropsWithChildren<{
    commands?: Array<dxDiagramCustomCommand>;
    title?: string;
    category?: "general" | "flowchart" | "orgChart" | "containers" | "custom";
    displayMode?: "icons" | "texts";
    expanded?: boolean;
    shapes?: Array<"text" | "rectangle" | "ellipse" | "cross" | "triangle" | "diamond" | "heart" | "pentagon" | "hexagon" | "octagon" | "star" | "arrowLeft" | "arrowTop" | "arrowRight" | "arrowBottom" | "arrowNorthSouth" | "arrowEastWest" | "process" | "decision" | "terminator" | "predefinedProcess" | "document" | "multipleDocuments" | "manualInput" | "preparation" | "data" | "database" | "hardDisk" | "internalStorage" | "paperTape" | "manualOperation" | "delay" | "storedData" | "display" | "merge" | "connector" | "or" | "summingJunction" | "verticalContainer" | "horizontalContainer" | "cardWithImageOnLeft" | "cardWithImageOnTop" | "cardWithImageOnRight">;
}>;
declare class Group extends NestedOption<IGroupProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare type IHistoryToolbarProps = React.PropsWithChildren<{
    commands?: Array<dxDiagramCustomCommand>;
    visible?: boolean;
}>;
declare class HistoryToolbar extends NestedOption<IHistoryToolbarProps> {
    static OptionName: string;
    static ExpectedChildren: {
        command: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IItemProps = React.PropsWithChildren<{
    icon?: string;
    items?: Array<dxDiagramCustomCommand>;
    location?: "after" | "before" | "center";
    name?: "separator" | "exportSvg" | "exportPng" | "exportJpg" | "undo" | "redo" | "cut" | "copy" | "paste" | "selectAll" | "delete" | "fontName" | "fontSize" | "bold" | "italic" | "underline" | "fontColor" | "lineStyle" | "lineWidth" | "lineColor" | "fillColor" | "textAlignLeft" | "textAlignCenter" | "textAlignRight" | "lock" | "unlock" | "sendToBack" | "bringToFront" | "insertShapeImage" | "editShapeImage" | "deleteShapeImage" | "connectorLineType" | "connectorLineStart" | "connectorLineEnd" | "layoutTreeTopToBottom" | "layoutTreeBottomToTop" | "layoutTreeLeftToRight" | "layoutTreeRightToLeft" | "layoutLayeredTopToBottom" | "layoutLayeredBottomToTop" | "layoutLayeredLeftToRight" | "layoutLayeredRightToLeft" | "fullScreen" | "zoomLevel" | "showGrid" | "snapToGrid" | "gridSize" | "units" | "pageSize" | "pageOrientation" | "pageColor" | "simpleView" | "toolbox";
    text?: string;
    height?: number;
    width?: number;
}>;
declare class Item extends NestedOption<IItemProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare type IMainToolbarProps = React.PropsWithChildren<{
    commands?: Array<dxDiagramCustomCommand>;
    visible?: boolean;
}>;
declare class MainToolbar extends NestedOption<IMainToolbarProps> {
    static OptionName: string;
    static ExpectedChildren: {
        command: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type INodesProps = React.PropsWithChildren<{
    autoLayout?: Record<string, any> | "auto" | "off" | "tree" | "layered" | {
        orientation?: "horizontal" | "vertical";
        type?: "auto" | "off" | "tree" | "layered";
    };
    autoSizeEnabled?: boolean;
    containerChildrenExpr?: ((data: any, value: any) => any) | string;
    containerKeyExpr?: ((data: any, value: any) => any) | string;
    customDataExpr?: ((data: any, value: any) => any) | string;
    dataSource?: Array<any> | DataSource | DataSourceOptions | null | Store | string;
    heightExpr?: ((data: any, value: any) => any) | string;
    imageUrlExpr?: ((data: any, value: any) => any) | string;
    itemsExpr?: ((data: any, value: any) => any) | string;
    keyExpr?: ((data: any, value: any) => any) | string;
    leftExpr?: ((data: any, value: any) => any) | string;
    lockedExpr?: ((data: any, value: any) => any) | string;
    parentKeyExpr?: ((data: any, value: any) => any) | string;
    styleExpr?: ((data: any, value: any) => any) | string;
    textExpr?: ((data: any, value: any) => any) | string;
    textStyleExpr?: ((data: any, value: any) => any) | string;
    topExpr?: ((data: any, value: any) => any) | string;
    typeExpr?: ((data: any, value: any) => any) | string;
    widthExpr?: ((data: any, value: any) => any) | string;
    zIndexExpr?: ((data: any, value: any) => any) | string;
}>;
declare class Nodes extends NestedOption<INodesProps> {
    static OptionName: string;
    static ExpectedChildren: {
        autoLayout: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IPageSizeProps = React.PropsWithChildren<{
    height?: number;
    items?: Array<Record<string, any>> | {
        height?: number;
        text?: string;
        width?: number;
    }[];
    width?: number;
    defaultHeight?: number;
    onHeightChange?: (value: number) => void;
    defaultWidth?: number;
    onWidthChange?: (value: number) => void;
}>;
declare class PageSize extends NestedOption<IPageSizeProps> {
    static OptionName: string;
    static DefaultsProps: {
        defaultHeight: string;
        defaultWidth: string;
    };
    static ExpectedChildren: {
        item: {
            optionName: string;
            isCollectionItem: boolean;
        };
        pageSizeItem: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IPageSizeItemProps = React.PropsWithChildren<{
    height?: number;
    text?: string;
    width?: number;
}>;
declare class PageSizeItem extends NestedOption<IPageSizeItemProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare type IPropertiesPanelProps = React.PropsWithChildren<{
    tabs?: Array<Record<string, any>> | {
        commands?: Array<dxDiagramCustomCommand>;
        groups?: Array<Record<string, any>> | {
            commands?: Array<dxDiagramCustomCommand>;
            title?: string;
        }[];
        title?: string;
    }[];
    visibility?: "auto" | "visible" | "collapsed" | "disabled";
}>;
declare class PropertiesPanel extends NestedOption<IPropertiesPanelProps> {
    static OptionName: string;
    static ExpectedChildren: {
        tab: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type ITabProps = React.PropsWithChildren<{
    commands?: Array<dxDiagramCustomCommand>;
    groups?: Array<Record<string, any>> | {
        commands?: Array<dxDiagramCustomCommand>;
        title?: string;
    }[];
    title?: string;
}>;
declare class Tab extends NestedOption<ITabProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        command: {
            optionName: string;
            isCollectionItem: boolean;
        };
        group: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tabGroup: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type ITabGroupProps = React.PropsWithChildren<{
    commands?: Array<dxDiagramCustomCommand>;
    title?: string;
}>;
declare class TabGroup extends NestedOption<ITabGroupProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        command: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IToolboxProps = React.PropsWithChildren<{
    groups?: Array<Record<string, any>> | {
        category?: "general" | "flowchart" | "orgChart" | "containers" | "custom";
        displayMode?: "icons" | "texts";
        expanded?: boolean;
        shapes?: Array<"text" | "rectangle" | "ellipse" | "cross" | "triangle" | "diamond" | "heart" | "pentagon" | "hexagon" | "octagon" | "star" | "arrowLeft" | "arrowTop" | "arrowRight" | "arrowBottom" | "arrowNorthSouth" | "arrowEastWest" | "process" | "decision" | "terminator" | "predefinedProcess" | "document" | "multipleDocuments" | "manualInput" | "preparation" | "data" | "database" | "hardDisk" | "internalStorage" | "paperTape" | "manualOperation" | "delay" | "storedData" | "display" | "merge" | "connector" | "or" | "summingJunction" | "verticalContainer" | "horizontalContainer" | "cardWithImageOnLeft" | "cardWithImageOnTop" | "cardWithImageOnRight">;
        title?: string;
    }[];
    shapeIconsPerRow?: number;
    showSearch?: boolean;
    visibility?: "auto" | "visible" | "collapsed" | "disabled";
    width?: number;
}>;
declare class Toolbox extends NestedOption<IToolboxProps> {
    static OptionName: string;
    static ExpectedChildren: {
        group: {
            optionName: string;
            isCollectionItem: boolean;
        };
        toolboxGroup: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IToolboxGroupProps = React.PropsWithChildren<{
    category?: "general" | "flowchart" | "orgChart" | "containers" | "custom";
    displayMode?: "icons" | "texts";
    expanded?: boolean;
    shapes?: Array<"text" | "rectangle" | "ellipse" | "cross" | "triangle" | "diamond" | "heart" | "pentagon" | "hexagon" | "octagon" | "star" | "arrowLeft" | "arrowTop" | "arrowRight" | "arrowBottom" | "arrowNorthSouth" | "arrowEastWest" | "process" | "decision" | "terminator" | "predefinedProcess" | "document" | "multipleDocuments" | "manualInput" | "preparation" | "data" | "database" | "hardDisk" | "internalStorage" | "paperTape" | "manualOperation" | "delay" | "storedData" | "display" | "merge" | "connector" | "or" | "summingJunction" | "verticalContainer" | "horizontalContainer" | "cardWithImageOnLeft" | "cardWithImageOnTop" | "cardWithImageOnRight">;
    title?: string;
}>;
declare class ToolboxGroup extends NestedOption<IToolboxGroupProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare type IViewToolbarProps = React.PropsWithChildren<{
    commands?: Array<dxDiagramCustomCommand>;
    visible?: boolean;
}>;
declare class ViewToolbar extends NestedOption<IViewToolbarProps> {
    static OptionName: string;
    static ExpectedChildren: {
        command: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IZoomLevelProps = React.PropsWithChildren<{
    items?: Array<number>;
    value?: number;
    defaultValue?: number;
    onValueChange?: (value: number) => void;
}>;
declare class ZoomLevel extends NestedOption<IZoomLevelProps> {
    static OptionName: string;
    static DefaultsProps: {
        defaultValue: string;
    };
}
export default Diagram;
export { Diagram, IDiagramOptions, AutoLayout, IAutoLayoutProps, Command, ICommandProps, CommandItem, ICommandItemProps, ConnectionPoint, IConnectionPointProps, ContextMenu, IContextMenuProps, ContextToolbox, IContextToolboxProps, CustomShape, ICustomShapeProps, DefaultItemProperties, IDefaultItemPropertiesProps, Edges, IEdgesProps, Editing, IEditingProps, Export, IExportProps, GridSize, IGridSizeProps, Group, IGroupProps, HistoryToolbar, IHistoryToolbarProps, Item, IItemProps, MainToolbar, IMainToolbarProps, Nodes, INodesProps, PageSize, IPageSizeProps, PageSizeItem, IPageSizeItemProps, PropertiesPanel, IPropertiesPanelProps, Tab, ITabProps, TabGroup, ITabGroupProps, Toolbox, IToolboxProps, ToolboxGroup, IToolboxGroupProps, ViewToolbar, IViewToolbarProps, ZoomLevel, IZoomLevelProps };
import type * as DiagramTypes from 'devextreme/ui/diagram_types';
export { DiagramTypes };
