/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
import dxTreeMap, { Properties } from "devextreme/viz/tree_map";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import NestedOption from "./core/nested-option";
import type { ClickEvent, DisposingEvent, DrawnEvent, DrillEvent, ExportedEvent, ExportingEvent, FileSavingEvent, IncidentOccurredEvent, InitializedEvent, NodesInitializedEvent, NodesRenderingEvent, dxTreeMapNode } from "devextreme/viz/tree_map";
import type { Font as ChartsFont } from "devextreme/common/charts";
import type { template } from "devextreme/core/templates/template";
import type * as LocalizationTypes from "devextreme/localization";
declare type ReplaceFieldTypes<TSource, TReplacement> = {
    [P in keyof TSource]: P extends keyof TReplacement ? TReplacement[P] : TSource[P];
};
declare type ITreeMapOptionsNarrowedEvents = {
    onClick?: ((e: ClickEvent) => void);
    onDisposing?: ((e: DisposingEvent) => void);
    onDrawn?: ((e: DrawnEvent) => void);
    onDrill?: ((e: DrillEvent) => void);
    onExported?: ((e: ExportedEvent) => void);
    onExporting?: ((e: ExportingEvent) => void);
    onFileSaving?: ((e: FileSavingEvent) => void);
    onIncidentOccurred?: ((e: IncidentOccurredEvent) => void);
    onInitialized?: ((e: InitializedEvent) => void);
    onNodesInitialized?: ((e: NodesInitializedEvent) => void);
    onNodesRendering?: ((e: NodesRenderingEvent) => void);
};
declare type ITreeMapOptions = React.PropsWithChildren<ReplaceFieldTypes<Properties, ITreeMapOptionsNarrowedEvents> & IHtmlOptions & {
    defaultLoadingIndicator?: Record<string, any>;
    onLoadingIndicatorChange?: (value: Record<string, any>) => void;
}>;
declare class TreeMap extends BaseComponent<React.PropsWithChildren<ITreeMapOptions>> {
    get instance(): dxTreeMap;
    protected _WidgetClass: typeof dxTreeMap;
    protected subscribableOptions: string[];
    protected independentEvents: string[];
    protected _defaults: {
        defaultLoadingIndicator: string;
    };
    protected _expectedChildren: {
        colorizer: {
            optionName: string;
            isCollectionItem: boolean;
        };
        export: {
            optionName: string;
            isCollectionItem: boolean;
        };
        group: {
            optionName: string;
            isCollectionItem: boolean;
        };
        loadingIndicator: {
            optionName: string;
            isCollectionItem: boolean;
        };
        size: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tile: {
            optionName: string;
            isCollectionItem: boolean;
        };
        title: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tooltip: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IBorderProps = React.PropsWithChildren<{
    color?: string;
    width?: number;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    opacity?: number;
    visible?: boolean;
}>;
declare class Border extends NestedOption<IBorderProps> {
    static OptionName: string;
}
declare type IColorizerProps = React.PropsWithChildren<{
    colorCodeField?: string;
    colorizeGroups?: boolean;
    palette?: Array<string> | "Bright" | "Harmony Light" | "Ocean" | "Pastel" | "Soft" | "Soft Pastel" | "Vintage" | "Violet" | "Carmine" | "Dark Moon" | "Dark Violet" | "Green Mist" | "Soft Blue" | "Material" | "Office";
    paletteExtensionMode?: "alternate" | "blend" | "extrapolate";
    range?: Array<number>;
    type?: "discrete" | "gradient" | "none" | "range";
}>;
declare class Colorizer extends NestedOption<IColorizerProps> {
    static OptionName: string;
}
declare type IExportProps = React.PropsWithChildren<{
    backgroundColor?: string;
    enabled?: boolean;
    fileName?: string;
    formats?: Array<"GIF" | "JPEG" | "PDF" | "PNG" | "SVG">;
    margin?: number;
    printingEnabled?: boolean;
    svgToCanvas?: ((svg: any, canvas: any) => any);
}>;
declare class Export extends NestedOption<IExportProps> {
    static OptionName: string;
}
declare type IFontProps = React.PropsWithChildren<{
    color?: string;
    family?: string;
    opacity?: number;
    size?: number | string;
    weight?: number;
}>;
declare class Font extends NestedOption<IFontProps> {
    static OptionName: string;
}
declare type IFormatProps = React.PropsWithChildren<{
    currency?: string;
    formatter?: ((value: number | Date) => string);
    parser?: ((value: string) => number | Date);
    precision?: number;
    type?: "billions" | "currency" | "day" | "decimal" | "exponential" | "fixedPoint" | "largeNumber" | "longDate" | "longTime" | "millions" | "millisecond" | "month" | "monthAndDay" | "monthAndYear" | "percent" | "quarter" | "quarterAndYear" | "shortDate" | "shortTime" | "thousands" | "trillions" | "year" | "dayOfWeek" | "hour" | "longDateLongTime" | "minute" | "second" | "shortDateShortTime";
    useCurrencyAccountingStyle?: boolean;
}>;
declare class Format extends NestedOption<IFormatProps> {
    static OptionName: string;
}
declare type IGroupProps = React.PropsWithChildren<{
    border?: Record<string, any> | {
        color?: string;
        width?: number;
    };
    color?: string;
    headerHeight?: number;
    hoverEnabled?: boolean;
    hoverStyle?: Record<string, any> | {
        border?: Record<string, any> | {
            color?: string;
            width?: number;
        };
        color?: string;
    };
    label?: Record<string, any> | {
        font?: ChartsFont;
        textOverflow?: "ellipsis" | "hide" | "none";
        visible?: boolean;
    };
    padding?: number;
    selectionStyle?: Record<string, any> | {
        border?: Record<string, any> | {
            color?: string;
            width?: number;
        };
        color?: string;
    };
}>;
declare class Group extends NestedOption<IGroupProps> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        groupLabel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        hoverStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
        selectionStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        treeMapborder: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IGroupLabelProps = React.PropsWithChildren<{
    font?: ChartsFont;
    textOverflow?: "ellipsis" | "hide" | "none";
    visible?: boolean;
}>;
declare class GroupLabel extends NestedOption<IGroupLabelProps> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IHoverStyleProps = React.PropsWithChildren<{
    border?: Record<string, any> | {
        color?: string;
        width?: number;
    };
    color?: string;
}>;
declare class HoverStyle extends NestedOption<IHoverStyleProps> {
    static OptionName: string;
}
declare type ILabelProps = React.PropsWithChildren<{
    font?: ChartsFont;
    textOverflow?: "ellipsis" | "hide" | "none";
    visible?: boolean;
    wordWrap?: "normal" | "breakWord" | "none";
}>;
declare class Label extends NestedOption<ILabelProps> {
    static OptionName: string;
}
declare type ILoadingIndicatorProps = React.PropsWithChildren<{
    backgroundColor?: string;
    enabled?: boolean;
    font?: ChartsFont;
    show?: boolean;
    text?: string;
    defaultShow?: boolean;
    onShowChange?: (value: boolean) => void;
}>;
declare class LoadingIndicator extends NestedOption<ILoadingIndicatorProps> {
    static OptionName: string;
    static DefaultsProps: {
        defaultShow: string;
    };
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IMarginProps = React.PropsWithChildren<{
    bottom?: number;
    left?: number;
    right?: number;
    top?: number;
}>;
declare class Margin extends NestedOption<IMarginProps> {
    static OptionName: string;
}
declare type ISelectionStyleProps = React.PropsWithChildren<{
    border?: Record<string, any> | {
        color?: string;
        width?: number;
    };
    color?: string;
}>;
declare class SelectionStyle extends NestedOption<ISelectionStyleProps> {
    static OptionName: string;
}
declare type IShadowProps = React.PropsWithChildren<{
    blur?: number;
    color?: string;
    offsetX?: number;
    offsetY?: number;
    opacity?: number;
}>;
declare class Shadow extends NestedOption<IShadowProps> {
    static OptionName: string;
}
declare type ISizeProps = React.PropsWithChildren<{
    height?: number;
    width?: number;
}>;
declare class Size extends NestedOption<ISizeProps> {
    static OptionName: string;
}
declare type ISubtitleProps = React.PropsWithChildren<{
    font?: ChartsFont;
    offset?: number;
    text?: string;
    textOverflow?: "ellipsis" | "hide" | "none";
    wordWrap?: "normal" | "breakWord" | "none";
}>;
declare class Subtitle extends NestedOption<ISubtitleProps> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type ITileProps = React.PropsWithChildren<{
    border?: Record<string, any> | {
        color?: string;
        width?: number;
    };
    color?: string;
    hoverStyle?: Record<string, any> | {
        border?: Record<string, any> | {
            color?: string;
            width?: number;
        };
        color?: string;
    };
    label?: Record<string, any> | {
        font?: ChartsFont;
        textOverflow?: "ellipsis" | "hide" | "none";
        visible?: boolean;
        wordWrap?: "normal" | "breakWord" | "none";
    };
    selectionStyle?: Record<string, any> | {
        border?: Record<string, any> | {
            color?: string;
            width?: number;
        };
        color?: string;
    };
}>;
declare class Tile extends NestedOption<ITileProps> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        hoverStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
        selectionStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tileLabel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        treeMapborder: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type ITileLabelProps = React.PropsWithChildren<{
    font?: ChartsFont;
    textOverflow?: "ellipsis" | "hide" | "none";
    visible?: boolean;
    wordWrap?: "normal" | "breakWord" | "none";
}>;
declare class TileLabel extends NestedOption<ITileLabelProps> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type ITitleProps = React.PropsWithChildren<{
    font?: ChartsFont;
    horizontalAlignment?: "center" | "left" | "right";
    margin?: number | Record<string, any> | {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    };
    placeholderSize?: number;
    subtitle?: Record<string, any> | string | {
        font?: ChartsFont;
        offset?: number;
        text?: string;
        textOverflow?: "ellipsis" | "hide" | "none";
        wordWrap?: "normal" | "breakWord" | "none";
    };
    text?: string;
    textOverflow?: "ellipsis" | "hide" | "none";
    verticalAlignment?: "bottom" | "top";
    wordWrap?: "normal" | "breakWord" | "none";
}>;
declare class Title extends NestedOption<ITitleProps> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        margin: {
            optionName: string;
            isCollectionItem: boolean;
        };
        subtitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type ITooltipProps = React.PropsWithChildren<{
    arrowLength?: number;
    border?: Record<string, any> | {
        color?: string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    color?: string;
    container?: any | string;
    contentTemplate?: ((info: {
        node: dxTreeMapNode;
        value: number;
        valueText: string;
    }, element: any) => string | any) | template;
    cornerRadius?: number;
    customizeTooltip?: ((info: {
        node: dxTreeMapNode;
        value: number;
        valueText: string;
    }) => Record<string, any>);
    enabled?: boolean;
    font?: ChartsFont;
    format?: LocalizationTypes.Format;
    opacity?: number;
    paddingLeftRight?: number;
    paddingTopBottom?: number;
    shadow?: Record<string, any> | {
        blur?: number;
        color?: string;
        offsetX?: number;
        offsetY?: number;
        opacity?: number;
    };
    zIndex?: number;
    contentRender?: (...params: any) => React.ReactNode;
    contentComponent?: React.ComponentType<any>;
    contentKeyFn?: (data: any) => string;
}>;
declare class Tooltip extends NestedOption<ITooltipProps> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        format: {
            optionName: string;
            isCollectionItem: boolean;
        };
        shadow: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tooltipBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare type ITooltipBorderProps = React.PropsWithChildren<{
    color?: string;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    opacity?: number;
    visible?: boolean;
    width?: number;
}>;
declare class TooltipBorder extends NestedOption<ITooltipBorderProps> {
    static OptionName: string;
}
declare type ITreeMapborderProps = React.PropsWithChildren<{
    color?: string;
    width?: number;
}>;
declare class TreeMapborder extends NestedOption<ITreeMapborderProps> {
    static OptionName: string;
}
export default TreeMap;
export { TreeMap, ITreeMapOptions, Border, IBorderProps, Colorizer, IColorizerProps, Export, IExportProps, Font, IFontProps, Format, IFormatProps, Group, IGroupProps, GroupLabel, IGroupLabelProps, HoverStyle, IHoverStyleProps, Label, ILabelProps, LoadingIndicator, ILoadingIndicatorProps, Margin, IMarginProps, SelectionStyle, ISelectionStyleProps, Shadow, IShadowProps, Size, ISizeProps, Subtitle, ISubtitleProps, Tile, ITileProps, TileLabel, ITileLabelProps, Title, ITitleProps, Tooltip, ITooltipProps, TooltipBorder, ITooltipBorderProps, TreeMapborder, ITreeMapborderProps };
import type * as TreeMapTypes from 'devextreme/viz/tree_map_types';
export { TreeMapTypes };
