/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
import dxCircularGauge, { Properties } from "devextreme/viz/circular_gauge";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import NestedOption from "./core/nested-option";
import type { DisposingEvent, DrawnEvent, ExportedEvent, ExportingEvent, FileSavingEvent, IncidentOccurredEvent, InitializedEvent, TooltipHiddenEvent, TooltipShownEvent } from "devextreme/viz/circular_gauge";
import type { Font as ChartsFont, ChartsColor } from "devextreme/common/charts";
import type { template } from "devextreme/core/templates/template";
import type * as LocalizationTypes from "devextreme/localization";
declare type ReplaceFieldTypes<TSource, TReplacement> = {
    [P in keyof TSource]: P extends keyof TReplacement ? TReplacement[P] : TSource[P];
};
declare type ICircularGaugeOptionsNarrowedEvents = {
    onDisposing?: ((e: DisposingEvent) => void);
    onDrawn?: ((e: DrawnEvent) => void);
    onExported?: ((e: ExportedEvent) => void);
    onExporting?: ((e: ExportingEvent) => void);
    onFileSaving?: ((e: FileSavingEvent) => void);
    onIncidentOccurred?: ((e: IncidentOccurredEvent) => void);
    onInitialized?: ((e: InitializedEvent) => void);
    onTooltipHidden?: ((e: TooltipHiddenEvent) => void);
    onTooltipShown?: ((e: TooltipShownEvent) => void);
};
declare type ICircularGaugeOptions = React.PropsWithChildren<ReplaceFieldTypes<Properties, ICircularGaugeOptionsNarrowedEvents> & IHtmlOptions & {
    centerRender?: (...params: any) => React.ReactNode;
    centerComponent?: React.ComponentType<any>;
    centerKeyFn?: (data: any) => string;
    defaultLoadingIndicator?: Record<string, any>;
    defaultSubvalues?: Array<number>;
    defaultValue?: number;
    onLoadingIndicatorChange?: (value: Record<string, any>) => void;
    onSubvaluesChange?: (value: Array<number>) => void;
    onValueChange?: (value: number) => void;
}>;
declare class CircularGauge extends BaseComponent<React.PropsWithChildren<ICircularGaugeOptions>> {
    get instance(): dxCircularGauge;
    protected _WidgetClass: typeof dxCircularGauge;
    protected subscribableOptions: string[];
    protected independentEvents: string[];
    protected _defaults: {
        defaultLoadingIndicator: string;
        defaultSubvalues: string;
        defaultValue: string;
    };
    protected _expectedChildren: {
        animation: {
            optionName: string;
            isCollectionItem: boolean;
        };
        export: {
            optionName: string;
            isCollectionItem: boolean;
        };
        geometry: {
            optionName: string;
            isCollectionItem: boolean;
        };
        loadingIndicator: {
            optionName: string;
            isCollectionItem: boolean;
        };
        margin: {
            optionName: string;
            isCollectionItem: boolean;
        };
        rangeContainer: {
            optionName: string;
            isCollectionItem: boolean;
        };
        scale: {
            optionName: string;
            isCollectionItem: boolean;
        };
        size: {
            optionName: string;
            isCollectionItem: boolean;
        };
        subvalueIndicator: {
            optionName: string;
            isCollectionItem: boolean;
        };
        title: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tooltip: {
            optionName: string;
            isCollectionItem: boolean;
        };
        valueIndicator: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    protected _templateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare type IAnimationProps = React.PropsWithChildren<{
    duration?: number;
    easing?: "easeOutCubic" | "linear";
    enabled?: boolean;
}>;
declare class Animation extends NestedOption<IAnimationProps> {
    static OptionName: string;
}
declare type IBackgroundColorProps = React.PropsWithChildren<{
    base?: string;
    fillId?: string;
}>;
declare class BackgroundColor extends NestedOption<IBackgroundColorProps> {
    static OptionName: string;
}
declare type IBorderProps = React.PropsWithChildren<{
    color?: string;
    dashStyle?: "dash" | "dot" | "longDash" | "solid";
    opacity?: number;
    visible?: boolean;
    width?: number;
}>;
declare class Border extends NestedOption<IBorderProps> {
    static OptionName: string;
}
declare type IColorProps = React.PropsWithChildren<{
    base?: string;
    fillId?: string;
}>;
declare class Color extends NestedOption<IColorProps> {
    static OptionName: string;
}
declare type IExportProps = React.PropsWithChildren<{
    backgroundColor?: string;
    enabled?: boolean;
    fileName?: string;
    formats?: Array<"GIF" | "JPEG" | "PDF" | "PNG" | "SVG">;
    margin?: number;
    printingEnabled?: boolean;
    svgToCanvas?: ((svg: any, canvas: any) => any);
}>;
declare class Export extends NestedOption<IExportProps> {
    static OptionName: string;
}
declare type IFontProps = React.PropsWithChildren<{
    color?: string;
    family?: string;
    opacity?: number;
    size?: number | string;
    weight?: number;
}>;
declare class Font extends NestedOption<IFontProps> {
    static OptionName: string;
}
declare type IFormatProps = React.PropsWithChildren<{
    currency?: string;
    formatter?: ((value: number | Date) => string);
    parser?: ((value: string) => number | Date);
    precision?: number;
    type?: "billions" | "currency" | "day" | "decimal" | "exponential" | "fixedPoint" | "largeNumber" | "longDate" | "longTime" | "millions" | "millisecond" | "month" | "monthAndDay" | "monthAndYear" | "percent" | "quarter" | "quarterAndYear" | "shortDate" | "shortTime" | "thousands" | "trillions" | "year" | "dayOfWeek" | "hour" | "longDateLongTime" | "minute" | "second" | "shortDateShortTime";
    useCurrencyAccountingStyle?: boolean;
}>;
declare class Format extends NestedOption<IFormatProps> {
    static OptionName: string;
}
declare type IGeometryProps = React.PropsWithChildren<{
    endAngle?: number;
    startAngle?: number;
}>;
declare class Geometry extends NestedOption<IGeometryProps> {
    static OptionName: string;
}
declare type ILabelProps = React.PropsWithChildren<{
    customizeText?: ((scaleValue: {
        value: number;
        valueText: string;
    }) => string);
    font?: ChartsFont;
    format?: LocalizationTypes.Format;
    hideFirstOrLast?: "first" | "last";
    indentFromTick?: number;
    overlappingBehavior?: "hide" | "none";
    useRangeColors?: boolean;
    visible?: boolean;
}>;
declare class Label extends NestedOption<ILabelProps> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        format: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type ILoadingIndicatorProps = React.PropsWithChildren<{
    backgroundColor?: string;
    font?: ChartsFont;
    show?: boolean;
    text?: string;
    defaultShow?: boolean;
    onShowChange?: (value: boolean) => void;
}>;
declare class LoadingIndicator extends NestedOption<ILoadingIndicatorProps> {
    static OptionName: string;
    static DefaultsProps: {
        defaultShow: string;
    };
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IMarginProps = React.PropsWithChildren<{
    bottom?: number;
    left?: number;
    right?: number;
    top?: number;
}>;
declare class Margin extends NestedOption<IMarginProps> {
    static OptionName: string;
}
declare type IMinorTickProps = React.PropsWithChildren<{
    color?: string;
    length?: number;
    opacity?: number;
    visible?: boolean;
    width?: number;
}>;
declare class MinorTick extends NestedOption<IMinorTickProps> {
    static OptionName: string;
}
declare type IRangeProps = React.PropsWithChildren<{
    color?: ChartsColor | string;
    endValue?: number;
    startValue?: number;
}>;
declare class Range extends NestedOption<IRangeProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        color: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IRangeContainerProps = React.PropsWithChildren<{
    backgroundColor?: ChartsColor | string;
    offset?: number;
    orientation?: "center" | "inside" | "outside";
    palette?: Array<string> | "Bright" | "Harmony Light" | "Ocean" | "Pastel" | "Soft" | "Soft Pastel" | "Vintage" | "Violet" | "Carmine" | "Dark Moon" | "Dark Violet" | "Green Mist" | "Soft Blue" | "Material" | "Office";
    paletteExtensionMode?: "alternate" | "blend" | "extrapolate";
    ranges?: Array<Record<string, any>> | {
        color?: ChartsColor | string;
        endValue?: number;
        startValue?: number;
    }[];
    width?: number;
}>;
declare class RangeContainer extends NestedOption<IRangeContainerProps> {
    static OptionName: string;
    static ExpectedChildren: {
        backgroundColor: {
            optionName: string;
            isCollectionItem: boolean;
        };
        range: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IScaleProps = React.PropsWithChildren<{
    allowDecimals?: boolean;
    customMinorTicks?: Array<number>;
    customTicks?: Array<number>;
    endValue?: number;
    label?: Record<string, any> | {
        customizeText?: ((scaleValue: {
            value: number;
            valueText: string;
        }) => string);
        font?: ChartsFont;
        format?: LocalizationTypes.Format;
        hideFirstOrLast?: "first" | "last";
        indentFromTick?: number;
        overlappingBehavior?: "hide" | "none";
        useRangeColors?: boolean;
        visible?: boolean;
    };
    minorTick?: Record<string, any> | {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    minorTickInterval?: number;
    orientation?: "center" | "inside" | "outside";
    scaleDivisionFactor?: number;
    startValue?: number;
    tick?: Record<string, any> | {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    tickInterval?: number;
}>;
declare class Scale extends NestedOption<IScaleProps> {
    static OptionName: string;
    static ExpectedChildren: {
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
        minorTick: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tick: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IShadowProps = React.PropsWithChildren<{
    blur?: number;
    color?: string;
    offsetX?: number;
    offsetY?: number;
    opacity?: number;
}>;
declare class Shadow extends NestedOption<IShadowProps> {
    static OptionName: string;
}
declare type ISizeProps = React.PropsWithChildren<{
    height?: number;
    width?: number;
}>;
declare class Size extends NestedOption<ISizeProps> {
    static OptionName: string;
}
declare type ISubtitleProps = React.PropsWithChildren<{
    font?: ChartsFont;
    offset?: number;
    text?: string;
    textOverflow?: "ellipsis" | "hide" | "none";
    wordWrap?: "normal" | "breakWord" | "none";
}>;
declare class Subtitle extends NestedOption<ISubtitleProps> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type ISubvalueIndicatorProps = React.PropsWithChildren<{
    arrowLength?: number;
    backgroundColor?: string;
    baseValue?: number;
    beginAdaptingAtRadius?: number;
    color?: ChartsColor | string;
    horizontalOrientation?: "left" | "right";
    indentFromCenter?: number;
    length?: number;
    offset?: number;
    palette?: Array<string> | "Bright" | "Harmony Light" | "Ocean" | "Pastel" | "Soft" | "Soft Pastel" | "Vintage" | "Violet" | "Carmine" | "Dark Moon" | "Dark Violet" | "Green Mist" | "Soft Blue" | "Material" | "Office";
    secondColor?: string;
    secondFraction?: number;
    size?: number;
    spindleGapSize?: number;
    spindleSize?: number;
    text?: Record<string, any> | {
        customizeText?: ((indicatedValue: {
            value: number;
            valueText: string;
        }) => string);
        font?: ChartsFont;
        format?: LocalizationTypes.Format;
        indent?: number;
    };
    type?: "circle" | "rangeBar" | "rectangle" | "rectangleNeedle" | "rhombus" | "textCloud" | "triangleMarker" | "triangleNeedle" | "twoColorNeedle";
    verticalOrientation?: "bottom" | "top";
    width?: number;
}>;
declare class SubvalueIndicator extends NestedOption<ISubvalueIndicatorProps> {
    static OptionName: string;
    static ExpectedChildren: {
        color: {
            optionName: string;
            isCollectionItem: boolean;
        };
        text: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type ITextProps = React.PropsWithChildren<{
    customizeText?: ((indicatedValue: {
        value: number;
        valueText: string;
    }) => string);
    font?: ChartsFont;
    format?: LocalizationTypes.Format;
    indent?: number;
}>;
declare class Text extends NestedOption<ITextProps> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        format: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type ITickProps = React.PropsWithChildren<{
    color?: string;
    length?: number;
    opacity?: number;
    visible?: boolean;
    width?: number;
}>;
declare class Tick extends NestedOption<ITickProps> {
    static OptionName: string;
}
declare type ITitleProps = React.PropsWithChildren<{
    font?: ChartsFont;
    horizontalAlignment?: "center" | "left" | "right";
    margin?: number | Record<string, any> | {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    };
    placeholderSize?: number;
    subtitle?: Record<string, any> | string | {
        font?: ChartsFont;
        offset?: number;
        text?: string;
        textOverflow?: "ellipsis" | "hide" | "none";
        wordWrap?: "normal" | "breakWord" | "none";
    };
    text?: string;
    textOverflow?: "ellipsis" | "hide" | "none";
    verticalAlignment?: "bottom" | "top";
    wordWrap?: "normal" | "breakWord" | "none";
}>;
declare class Title extends NestedOption<ITitleProps> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        margin: {
            optionName: string;
            isCollectionItem: boolean;
        };
        subtitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type ITooltipProps = React.PropsWithChildren<{
    arrowLength?: number;
    border?: Record<string, any> | {
        color?: string;
        dashStyle?: "dash" | "dot" | "longDash" | "solid";
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    color?: string;
    container?: any | string;
    contentTemplate?: ((scaleValue: {
        value: number;
        valueText: string;
    }, element: any) => string | any) | template;
    cornerRadius?: number;
    customizeTooltip?: ((scaleValue: {
        value: number;
        valueText: string;
    }) => Record<string, any>);
    enabled?: boolean;
    font?: ChartsFont;
    format?: LocalizationTypes.Format;
    interactive?: boolean;
    opacity?: number;
    paddingLeftRight?: number;
    paddingTopBottom?: number;
    shadow?: Record<string, any> | {
        blur?: number;
        color?: string;
        offsetX?: number;
        offsetY?: number;
        opacity?: number;
    };
    zIndex?: number;
    contentRender?: (...params: any) => React.ReactNode;
    contentComponent?: React.ComponentType<any>;
    contentKeyFn?: (data: any) => string;
}>;
declare class Tooltip extends NestedOption<ITooltipProps> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        format: {
            optionName: string;
            isCollectionItem: boolean;
        };
        shadow: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare type IValueIndicatorProps = React.PropsWithChildren<{
    arrowLength?: number;
    backgroundColor?: string;
    baseValue?: number;
    beginAdaptingAtRadius?: number;
    color?: ChartsColor | string;
    horizontalOrientation?: "left" | "right";
    indentFromCenter?: number;
    length?: number;
    offset?: number;
    palette?: Array<string> | "Bright" | "Harmony Light" | "Ocean" | "Pastel" | "Soft" | "Soft Pastel" | "Vintage" | "Violet" | "Carmine" | "Dark Moon" | "Dark Violet" | "Green Mist" | "Soft Blue" | "Material" | "Office";
    secondColor?: string;
    secondFraction?: number;
    size?: number;
    spindleGapSize?: number;
    spindleSize?: number;
    text?: Record<string, any> | {
        customizeText?: ((indicatedValue: {
            value: number;
            valueText: string;
        }) => string);
        font?: ChartsFont;
        format?: LocalizationTypes.Format;
        indent?: number;
    };
    type?: "circle" | "rangeBar" | "rectangle" | "rectangleNeedle" | "rhombus" | "textCloud" | "triangleMarker" | "triangleNeedle" | "twoColorNeedle";
    verticalOrientation?: "bottom" | "top";
    width?: number;
}>;
declare class ValueIndicator extends NestedOption<IValueIndicatorProps> {
    static OptionName: string;
}
export default CircularGauge;
export { CircularGauge, ICircularGaugeOptions, Animation, IAnimationProps, BackgroundColor, IBackgroundColorProps, Border, IBorderProps, Color, IColorProps, Export, IExportProps, Font, IFontProps, Format, IFormatProps, Geometry, IGeometryProps, Label, ILabelProps, LoadingIndicator, ILoadingIndicatorProps, Margin, IMarginProps, MinorTick, IMinorTickProps, Range, IRangeProps, RangeContainer, IRangeContainerProps, Scale, IScaleProps, Shadow, IShadowProps, Size, ISizeProps, Subtitle, ISubtitleProps, SubvalueIndicator, ISubvalueIndicatorProps, Text, ITextProps, Tick, ITickProps, Title, ITitleProps, Tooltip, ITooltipProps, ValueIndicator, IValueIndicatorProps };
import type * as CircularGaugeTypes from 'devextreme/viz/circular_gauge_types';
export { CircularGaugeTypes };
