/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
import dxMap, { Properties } from "devextreme/ui/map";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import NestedOption from "./core/nested-option";
import type { ClickEvent, DisposingEvent, InitializedEvent, MarkerAddedEvent, MarkerRemovedEvent, ReadyEvent, RouteAddedEvent, RouteRemovedEvent } from "devextreme/ui/map";
declare type ReplaceFieldTypes<TSource, TReplacement> = {
    [P in keyof TSource]: P extends keyof TReplacement ? TReplacement[P] : TSource[P];
};
declare type IMapOptionsNarrowedEvents = {
    onClick?: ((e: ClickEvent) => void);
    onDisposing?: ((e: DisposingEvent) => void);
    onInitialized?: ((e: InitializedEvent) => void);
    onMarkerAdded?: ((e: MarkerAddedEvent) => void);
    onMarkerRemoved?: ((e: MarkerRemovedEvent) => void);
    onReady?: ((e: ReadyEvent) => void);
    onRouteAdded?: ((e: RouteAddedEvent) => void);
    onRouteRemoved?: ((e: RouteRemovedEvent) => void);
};
declare type IMapOptions = React.PropsWithChildren<ReplaceFieldTypes<Properties, IMapOptionsNarrowedEvents> & IHtmlOptions & {
    defaultCenter?: Array<number> | Record<string, any> | string;
    defaultMarkers?: Array<Record<string, any>>;
    defaultRoutes?: Array<Record<string, any>>;
    defaultZoom?: number;
    onCenterChange?: (value: Array<number> | Record<string, any> | string) => void;
    onMarkersChange?: (value: Array<Record<string, any>>) => void;
    onRoutesChange?: (value: Array<Record<string, any>>) => void;
    onZoomChange?: (value: number) => void;
}>;
declare class Map extends BaseComponent<React.PropsWithChildren<IMapOptions>> {
    get instance(): dxMap;
    protected _WidgetClass: typeof dxMap;
    protected subscribableOptions: string[];
    protected independentEvents: string[];
    protected _defaults: {
        defaultCenter: string;
        defaultMarkers: string;
        defaultRoutes: string;
        defaultZoom: string;
    };
    protected _expectedChildren: {
        apiKey: {
            optionName: string;
            isCollectionItem: boolean;
        };
        center: {
            optionName: string;
            isCollectionItem: boolean;
        };
        marker: {
            optionName: string;
            isCollectionItem: boolean;
        };
        route: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IApiKeyProps = React.PropsWithChildren<{
    bing?: string;
    google?: string;
    googleStatic?: string;
}>;
declare class ApiKey extends NestedOption<IApiKeyProps> {
    static OptionName: string;
}
declare type ICenterProps = React.PropsWithChildren<{
    lat?: number;
    lng?: number;
}>;
declare class Center extends NestedOption<ICenterProps> {
    static OptionName: string;
}
declare type ILocationProps = React.PropsWithChildren<{
    lat?: number;
    lng?: number;
}>;
declare class Location extends NestedOption<ILocationProps> {
    static OptionName: string;
}
declare type IMarkerProps = React.PropsWithChildren<{
    iconSrc?: string;
    location?: Array<number> | Record<string, any> | string | {
        lat?: number;
        lng?: number;
    }[];
    onClick?: (() => void);
    tooltip?: Record<string, any> | string | {
        isShown?: boolean;
        text?: string;
    };
}>;
declare class Marker extends NestedOption<IMarkerProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        location: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tooltip: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IRouteProps = React.PropsWithChildren<{
    color?: string;
    locations?: Array<Record<string, any>> | {
        lat?: number;
        lng?: number;
    }[];
    mode?: "driving" | "walking";
    opacity?: number;
    weight?: number;
}>;
declare class Route extends NestedOption<IRouteProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        location: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type ITooltipProps = React.PropsWithChildren<{
    isShown?: boolean;
    text?: string;
}>;
declare class Tooltip extends NestedOption<ITooltipProps> {
    static OptionName: string;
}
export default Map;
export { Map, IMapOptions, ApiKey, IApiKeyProps, Center, ICenterProps, Location, ILocationProps, Marker, IMarkerProps, Route, IRouteProps, Tooltip, ITooltipProps };
import type * as MapTypes from 'devextreme/ui/map_types';
export { MapTypes };
