/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TemplateWrapper = void 0;
var React = __importStar(require("react"));
var events = __importStar(require("devextreme/events"));
var react_1 = require("react");
var react_dom_1 = require("react-dom");
var component_base_1 = require("./component-base");
var helpers_1 = require("./helpers");
var createHiddenNode = function (containerNodeName, ref, defaultElement) {
    var style = { display: 'none' };
    switch (containerNodeName) {
        case 'TABLE':
            return React.createElement("tbody", { style: style, ref: ref });
        case 'TBODY':
            return React.createElement("tr", { style: style, ref: ref });
        default:
            return React.createElement(defaultElement, { style: style, ref: ref });
    }
};
var TemplateWrapperComponent = function (_a) {
    var templateFactory = _a.templateFactory, data = _a.data, index = _a.index, container = _a.container, onRemoved = _a.onRemoved, onRendered = _a.onRendered;
    var _b = __read(react_1.useState(false), 2), removalListenerRequired = _b[0], setRemovalListenerRequired = _b[1];
    var isRemovalLocked = react_1.useRef(false);
    var removalLocker = react_1.useMemo(function () { return ({
        lock: function () { isRemovalLocked.current = true; },
        unlock: function () { isRemovalLocked.current = false; },
    }); }, []);
    var element = react_1.useRef();
    var hiddenNodeElement = react_1.useRef();
    var removalListenerElement = react_1.useRef();
    var onTemplateRemoved = react_1.useCallback(function (_, args) {
        if ((args === null || args === void 0 ? void 0 : args.isUnmounting) || isRemovalLocked.current) {
            return;
        }
        if (element.current) {
            events.off(element.current, component_base_1.DX_REMOVE_EVENT, onTemplateRemoved);
        }
        if (removalListenerElement.current) {
            events.off(removalListenerElement.current, component_base_1.DX_REMOVE_EVENT, onTemplateRemoved);
        }
        onRemoved();
    }, [onRemoved]);
    react_1.useLayoutEffect(function () {
        var el = element.current;
        if (el && el.nodeType === Node.ELEMENT_NODE) {
            events.off(el, component_base_1.DX_REMOVE_EVENT, onTemplateRemoved);
            events.on(el, component_base_1.DX_REMOVE_EVENT, onTemplateRemoved);
        }
        else if (!removalListenerRequired) {
            setRemovalListenerRequired(true);
        }
        else if (removalListenerElement.current) {
            events.off(removalListenerElement.current, component_base_1.DX_REMOVE_EVENT, onTemplateRemoved);
            events.on(removalListenerElement.current, component_base_1.DX_REMOVE_EVENT, onTemplateRemoved);
        }
        return function () {
            if (element.current) {
                container.appendChild(element.current);
            }
            if (hiddenNodeElement.current) {
                container.appendChild(hiddenNodeElement.current);
            }
            if (removalListenerElement.current) {
                container.appendChild(removalListenerElement.current);
            }
            if (el) {
                events.off(el, component_base_1.DX_REMOVE_EVENT, onTemplateRemoved);
            }
        };
    }, [onTemplateRemoved, removalListenerRequired, container]);
    react_1.useEffect(function () {
        onRendered();
    }, [onRendered]);
    var hiddenNode = createHiddenNode(container === null || container === void 0 ? void 0 : container.nodeName, function (node) {
        hiddenNodeElement.current = node;
        element.current = node === null || node === void 0 ? void 0 : node.previousSibling;
    }, 'div');
    var removalListener = removalListenerRequired
        ? createHiddenNode(container === null || container === void 0 ? void 0 : container.nodeName, function (node) { removalListenerElement.current = node; }, 'span')
        : undefined;
    return react_dom_1.createPortal(React.createElement(React.Fragment, null,
        React.createElement(helpers_1.RemovalLockerContext.Provider, { value: removalLocker },
            templateFactory({ data: data, index: index, onRendered: onRendered }),
            hiddenNode,
            removalListener)), container);
};
exports.TemplateWrapper = react_1.memo(TemplateWrapperComponent);
