/*!
 * devextreme-react
 * Version: 23.2.5
 * Build date: Mon Mar 11 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
import dxResizable, { Properties } from "devextreme/ui/resizable";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import type { DisposingEvent, InitializedEvent, ResizeEvent, ResizeEndEvent, ResizeStartEvent } from "devextreme/ui/resizable";
declare type ReplaceFieldTypes<TSource, TReplacement> = {
    [P in keyof TSource]: P extends keyof TReplacement ? TReplacement[P] : TSource[P];
};
declare type IResizableOptionsNarrowedEvents = {
    onDisposing?: ((e: DisposingEvent) => void);
    onInitialized?: ((e: InitializedEvent) => void);
    onResize?: ((e: ResizeEvent) => void);
    onResizeEnd?: ((e: ResizeEndEvent) => void);
    onResizeStart?: ((e: ResizeStartEvent) => void);
};
declare type IResizableOptions = React.PropsWithChildren<ReplaceFieldTypes<Properties, IResizableOptionsNarrowedEvents> & IHtmlOptions & {
    defaultHeight?: (() => number | string) | number | string;
    defaultWidth?: (() => number | string) | number | string;
    onHeightChange?: (value: (() => number | string) | number | string) => void;
    onWidthChange?: (value: (() => number | string) | number | string) => void;
}>;
declare class Resizable extends BaseComponent<React.PropsWithChildren<IResizableOptions>> {
    get instance(): dxResizable;
    protected _WidgetClass: typeof dxResizable;
    protected subscribableOptions: string[];
    protected independentEvents: string[];
    protected _defaults: {
        defaultHeight: string;
        defaultWidth: string;
    };
}
export default Resizable;
export { Resizable, IResizableOptions };
import type * as ResizableTypes from 'devextreme/ui/resizable_types';
export { ResizableTypes };
